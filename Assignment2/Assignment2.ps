%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: Assignment2.dvi
%%CreationDate: Fri May  5 11:26:09 2017
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusRomNo9L-Medi NimbusRomNo9L-Regu
%%+ NimbusMonL-ReguObli NimbusMonL-Bold NimbusMonL-Regu CMMI10 CMSY7
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter Assignment2.dvi -o
%+ Assignment2.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.05.05:1126
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMSY7
%!PS-AdobeFont-1.0: CMSY7 003.002
%%Title: CMSY7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY7 known{/CMSY7 findfont dup/UniqueID known{dup
/UniqueID get 5096648 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY7 def
/FontBBox {-15 -951 1251 782 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY7.) readonly def
/FullName (CMSY7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D9DAFF1B3EA76067
C5493B69F73B89C8B61804A34FCEC826343337CCDFFCE17BF343EA8034BF95AA
14C56862C2C052569AFB236E1F1795F05150C8F28DFEF6BF4BCBACB678D00036
30EE84FEB44B1A8438185EB45654E6853C1159B073E54292D135F0961A64E8A5
AAE49C4BA9C44156C123426212120F99F3E8B7425752A5FE384AAEF755A8464B
51F015F9E2967477D57B22627D75CEF8AAAF0AEBD504EB46D0289DFC8D86C972
F042BD88A90A53613DD93D8A7A8460E63D85F6C15C000C0AAEE4BD5130B6E668
8C9B3F3FFD804745DA1D5EC0AB85C96E1724FA67F9324C59275415182AB48D57
9722DCF602396AD4B5C075A5A89A5D005C9FE11273E5FBDDD1800F11BBDF6AEC
6711C5633A73AC5DF038BA521AC492E138F7FFC7C5438FFD32FEAA1128C66E83
0D3AA40665F05E62D7EF00B1B0596162C402A34B6BAE6300D43F3DFCC84860F5
C0F0F1CE28FC60642BBFE9BC9102E80146774CDC88F9C250DE762D24A3484BCD
1D26B6D9FE981CA5AAB2A4BEDC528115043DC18D7105735D7528C2C5DD89A812
75B5D7B2E5A586FBB0C061E708F92C1552F64A296490BD0F20243986A4707FF9
8AB3C917B8DB92F19DCA6B9D4A1DB57515E51DD85D5C9D2CAF7A036AA3F9E9B1
5B5E099CC05A9126AB274C17D75CB4FAF78052366D2F21EDAADF84B22A2D645A
3E65C4BC0F540B5D9609D88DD0E4CBEEF87C16447D43A5F98528FD45ADD10DE6
41AEC411FD6929308F0E4F48A8D9C9EE386E920D41C1CC98A52073011DF5BD28
5683F280B5CF7F27DC50930C81D344FF5A8A9258A207D2531AC21A735B14155B
C22C752DD22AA33C52D6D4D053B3E46FD4C9129068DFF52695A3A9184D04E8EC
93696A3FEC3AEB3814D9015EC14C22EC3ABD5070E8C28A3B42F5596D948212B4
AFB9978A0A361135C9E18CBDC98E0D1E8BDC17E25DDB3D52E86127E5AAECC55D
FEE61693190E378978EF1BBD4D1AF005D511C7607CCFA4BCBD3EC427CAD82809
B725B25AE8A03EE88F80A7732A571A2317E0B6A0D072EE8CE2EB9E033CDCC899
B64CF4FA1C708A885442062F08D3D8DAF44C066EE278714D1486EB709D327865
A483F62709E89D08291F044325208EBA758DD459481334F5D9AE3BB61B3020F2
A4538CFC2C94BE84C920BE80806FDCEE394230730E049333A7E16509207514FD
695B5E0AEA9E4A9737311AA0B33B15F6769FF865D1ACB63DC6201C3F1062A3FD
1B446C1857460745917A36289DD57C94FE6240F4A40FBDFC10E91B91B79029D9
9F1B9C74E8E5AA011A0ECBEC660230AD5929F01D0325D15FDC0040406F124021
02AE176F4C98BAC1706F03C2B5B40F325A50CA4683B2BB4605E68E72D0CBDC2D
96B3BBCDD01201B650A7E7744D58D1E36D81FBF72E0A875FF29B4C109A1950FC
9621B18D58806392EEE9841794DFD39E3C4E20D45384FE07F9D445F143B922D1
AB350AA6DFC51FCF767B141A392D6A8B633AACBCEC9F56A0CF40AB08020EE63E
08CC0BE01B40E86388A65F5869F2F4D022DD4B912031CB8CEDEDFC2473772569
5B28F66AB74CD7902A0061AA3547D13C7F0C6EEEA7B0BD316694A94E4D672520
EA044AB28D8D01076C486CE456EDA1811F7ACA75D27473080D27D3E681E35FC6
447046120C6CC4C17674F0F051570A79DCA74848F3F300B58B19018430D99858
CA5504084D6BB74CFDB635B6866974A9AF05DF201C69352B2663B0623E7828B9
5EC5FFA8D8F10A7C28000F8C679B180067D5481D6315BF1C4194EB171C8F3CE2
4CE319975B9E948D907F9F7EEAF07089844391555F329E331D52FF114668B8A4
80704B3C6AC0CCAA2F5D043CE44E65EDA89A0CA854CFDCB11D549B7FA72EDB90
D35353C34A771B1FAF96F83FCA5258AAB65384BAFFCE448690C1432A1F749C20
5817205185F973FA098BA856584753E75EBEBF387FC155202885F5B67117DD7E
70D1CD887183C5573B6FB607D4F6CC9F8B94B09B3F3AEC2EF1E6A320CF6D0112
63046321941D1FB3F2140B59370AA9387E24D579D389A166A10C989497FE9549
34E1AC2E546CC06C5308460DBEF3E1AEEB6CBB0FFDAC458E61DE3391480CF5CD
34A647D4DE15B81131B7D1F9EED4C6837A32E89B0EAAD6A05F5F67518655E5DB
224D4833CEC60D5DBBDB8A03FB1A9730589BB4F0FF56191D17E73B9562E0C356
B188882B36F9505F6F42EB2644FEE125C2A7D12227ABC8ADB924E88B0A9E8DC2
79762523B0B88DBBE6AC7968A46BD9E9F0C3F03F5F64724CA07782195F01F130
30DBE895C212E0EE20162D863F46A674D85232FA0DEE69A8DF019794AF6873AD
9CC2A5EEEF9393313CA519BF95C08ADF7A75B6F53EDCDC39851D20E58B97CA57
A7523717AA1821DEA94C8A9F8B82346B16D92D15AEDC16F0011A45A44B09DE47
08CBA46E8511D0C5CC83F952EEFA4ACFA7F3D7FA5E113EF6B70E5ABA6F1AD3B1
E4D3B15AC6D5C3BC70A3946F411A7D965D6FA9D7B6C6ECE19B2C29A2FF476251
EBF0CF3BF658A1D896323706172746F58B2DE49F8B7E431E20304A42694CCF73
11C4E9E96260CC442E2938A1E27EE6744C7CAB01634C8210CE40488B9CBD757C
4277B5E3E43C7560291D945F9128AF1F85924003418F96458ADDC5BB8EC431D5
AC9093D20DEA69B92454613BC1A82DAD4FBF8E56084494D9D2FFABD82A7C9847
171FE36B265B546F3072B0923840E6C6BB12CA53E05A99F0E8FD4F5109782746
7CAB9B35B68050230736AE624B7862D1244C7D9BE4D1CAAE21B123D1E8372377
F1FEF269A9A2EDF02CE0CC8BF92FD7EF09556987B8A3BF6D8C0A663DB6B9742B
E9AC61A449106AF1EA7ACAD40AC6F59427CC51865E6A90CF2AEED8D6037BA70E
4ADDAF622CDE877C98C3B2006B4721FC9BA18E30F0752BD4ACE36221F5CD1497
8FEDA5D643BE2EE007970A68E53D85975116E6CC09F0039A09EBAF0CA4B0EED6
A485CC0B69E526033FD1C1190BC5686739CE13D1AE8EBCABC01FCFF26141867C
44ED291196E546369129B9F759FDD7DC21BAF0A528FC34BA9FA8937813953644
C539F9DA4E55E83DB3D6DA309C562DA1330B157957B18F7618544AB738E25F16
F0517CD13C1F11BB8EA056BDC575D77CDC526EF497639DD89C2098660C5C45B2
D7CF715AC5E76847E0D3178360DAC1BAF6ACAEE72453B845B9F86621C166857B
029CEF5AFE29D1EDB4CA3AD7D008B7550A779E0066D7312DD6C7AFE1C0BFFF25
7B062B0DF30032EA2A2FE3CC46C96A3A0BA1888D1D2B05424A59ABE3EE928ED8
B67F507EFA78AE128F58B54634C7F534B3D0F4AFC23E38FB56EB39CFA425FD37
848545EAD03EDC5A9E796CEFB345F527615C785963F536972EBD9CFC4A6A4A07
5A31A508CA147FBB762ADD198CE36DF86730FCE2B643D1E7DF0BDE800DE7AF89
44A36B04193E44231E08919EE91A8B559646DC4DFAFF0AD891890A0A88FFA8EF
B066BCB7AFCA409C51889E7FEB33F19A3CB1268BD0EA74AF29C1401BABD16F87
ACF7DD65A8513DA9995C5092C36A774BC4260113360D29AF7ADF5D22B5B58E7E
A9BEFC33B9A91D2C397B27A81087376CB623318A8362C3FA9CBE3026675723C2
E711910DDB328E0EE3FCE219F44FE528B70E58B8E6CDB4AAB48237DD933D9639
E9D4F9EADAA8D46537D964D75C27F210B0C2473CB60D65F61BBD91ADE01576BF
77C49E31936138B0FBA066BE910DE1B1F0E4FFB5E81038E8656ABFF08DFD923E
6BA2AFEDCE6998BBF7045393C34811501586A4846E5B942C8E99D4C481D3AE60
2796ADBB5242D59F1116EBB828014BD903EF58B223DFD18BFBAAE4D348876B06
CAC10B7AF0DC270E6702A3F75D4DCEF872F2CDB9470AC9A1DC1ABCB55636D26F
9CB6BF27A0DAEB1F62AFEC12F55F78C9B59AC6DA9DB4B45444B0C582DB4DB8A4
B31EF4AFB77988E92FC0B257374B4408406490D9AFCC495316D6C08BEC9A76C7
12371E14417711EF802FB7151B3F6A2580C97527C9C3A0FAAB8D62FD992AA18F
EBEB36F7910186CD5F70A55DFE932757C299D9D2289796769A00A0C6ABD18F82
E0D4E95D6477E67B4C012DBBD098FE20E2F15C412DD2AD5471A65EACE05B3A1A
0C9C430BAEF4887F2CCE668116B87FFD9DAB4B9B3605CD26E6B12488058AFA30
8843791A95BB322DF5C47387F3EC72343855D6B23D72144EB5EB5157B8B238FD
6C71DDDA64C9539F66A7DD569FFF43DBE4A8F0608A3CBD354DD9BAB5E3C756DD
92C3C1B3E169D86A2230299432488BC04A87E08A80809F9968676DF9157B1C91
27C664ABCCBA9997FAD8966F766B325086899D1FE44581FE07C97688B3E15B0C
234A22646C32BB965B9BFD2CD34854D1488AAF021E169BF9CA9665CF040E25A8
16156C80A2F47397CD370AAEDA731E0D14FBEE1E51A17DB972D96DBCCE33F937
5CDBF1A650BF1D3536BA4CB7A1CACFD5CB457E2368A660A62AC26E64A631B2BA
6B08EBE42E02D9B1B2E95BF9F0A6B59C96A122968FD46A4D17BA3D018CCBA0F9
80BA3C1E6C683111AFF79303CF64F1D2CCBD7571C6E09DD9B27B8E101BE219F0
E075880A0E367885AC94143E777DAE455B990383100EADF786300602C2CE28F2
4F44662FDF03BD39A5181912D8F1243C36FF88882CFC4B34C1D4EBBC01D96A7D
9CE5303042D1B21042E4FEAA455F22A01333FCAD7E4AACA5D3A5386331985F6B
9B247EC6310BB07507321BEF3E4ECFC3B915AAA6E029B3999644C987640863B0
5DCF58CE479497AFAD1208FEFD1796E74467E9F7867C313A3412E6923F4C9144
C69EFA17965056DF043DB465BF2F1E191706D3AAB47E6AD5C9767E4A73B29F2D
E2E579D0262237568F82B360ADB6D0219B7535EFD02DD0688CDD23D84FC4F308
5D2D0010B1A9F4F0321A00C154672D21708B66B91ADCF98BAC7A2F94848E9A4E
86CC82EDD0399BD9F13E43359E71F80086B9B0C3B6D08831D4479ED83E7892C4
90C477BD1F06DFEBBF60F26516EECDEFE4787EEA8683754F2B257D0BAA607DBA
35EC6D1618C2FDF3881827F92D793ECF152D761F2423A96210F582DC9B90120F
26A33025414716A5E6F56D712E31BABE5047EC4855B767AC63D793995C9E074B
6E35C7E5255FBF4C3F17E7AD7B2A6C5F7459794FC94306B581536910F244BF5A
3158E821CE75F4B0565EBE985DF24DAA92F9C1D848EEC6B88E21FB6C51125872
1752F7352291960E5BD36F78AABBCF6DAA4D07AF56E4B6058AAB13D41BCDAA14
C0D63C6807FCD0E2B4B9CC892F224843173A75DC53A8F0FA396959C2E2CFE3F5
9B1C8B62797F34E7A0BFCF0787C73FEF98442234A617CF161829498035D30B29
ADFEAABD0B496E8A2E764D22DB7737F950FC5982F1C5F4FD414C1B0202F40FBA
62C81B8F0E836CD73D79366FD62388B437B81FC673442EE34BF27454F72A08F3
389E60CE28A050601A42FB4491C60DC02EC008E6B9DD2495522BBEC7293E2923
120584E88412DA7137397B41A28706B1CC6BB0C80709A2A4BA79822D245757A4
3EE454198942ED2316FAEB981F7615E642167620EBDDC5B271E273216EB119C6
4F2F0412F0BA6E3BA396217597575C6739194E1F839232FF088FDDFD3695A5CB
9A0E220389938596D8BDB183138E1F73F64512E4FAB5E1328F9B42364E3113B8
004BE2CA0B074EE271BBE0260D31CE555D535C16EBB528747EBAFFF253E659DA
3A377CBE0B296276AACF0294CF90FDAADB4EAD5E2F600E5B2A018DEFB86FF61C
84296480A425687CCE37D671472537E897AFD4B8C6A6175E1ADDF9AD24DFC5C3
A73E18AC2D9B28BDA2F17D51DB3521945850DAF0EE48B0FAC271544C1B4F3B2D
53BFC8DE32BA366FB1FEC0DD6C0B1FEA374CBE2B96F5B235A1D83A240DB442C7
1460980A3E5B96AE3D5784DE2C2DFFA671E0A856DB2FF4130E5905F3D5338856
C11A468D867D0C6EC585F1AD3E7164B8598BB59973B9A952FAE819F052A6554D
EDC342BCCB0525905D1D27ECB9EE43847B69AE116F494CB2DBBAFB2773F1A3E1
C75FBDF8D66FA5AB4005757D631A0D9424FCDA91A1D2AC6FCE7CC7A23E84C65B
3E92BC684F23467DCF8521E0E27CF1441C487EC6E3BCA0AB54BB137E83776009
833D772FD225E88A8BD992FD69819B3BA90BAAD1DDF16E4326190CC4BF9C30F2
AF7CA1FB38E6387D9745FC5E176B248B1581BF7A4CA2FCA8E423DF340EAE29AA
7E07A25FF838F67378F9A6A9A0B404E01E86E64FEF71DD3D540D4711AEB1974D
E2E0D485DAFFC74BA6B8E9AFDA245BC8997BB39BB6BD52B496A09C68F7A8E900
8DB3007643416040FCEC85B407EA0A946827771FBBEE49A3DA5542CC5173A31A
0280AB8E922C23C1BDD88D70627EF124633C318E7C9ACBC14AE216BFD41C0B6B
3A0161757913CA1F7B6626963C09936A52E73DD9B3D86DEEE73C0293A646FCF1
21D4C33DFF1671DA7A53E77E20233EDE51571549AACB7968602CD03EE67ACACA
B231661CA9DA2BEC5795A83DFAF675E9B052C8BDD51490F7874C91EF5ED2E0A6
BE9CBABB98A950F7E55DDA3823036437C11F614E27DA5BB8BC6D955FFE54B825
0201275C2C49A3908BEF1DB3D87792DDFFED23DE7FD9CFC284F6255C77E54A39
C2FDBCD28F2938E4CC135829AC1867CAA5705674062C9639FEEFBE49D6108091
7C58585B80464F7E69966D7933C7019BF336B88B9E0E7073A85EAF297B71B303
31EEE9121347A482D28CCE942AF53E94F88A97EF2F1860A92CE29A14495D67B7
D37E207D42F3891E0423F5BCFFCAAC057FEC683696ED6FEEFA65C8FB6F1312C5
24A1130192B4179F3B08DA1C951D988894E7FE7CFC28C56992A1CA82BF8BDBDA
E021F16E630FF67201BA4DF5F3F4D6AA65B8347FC1575C142C6C1868E8472BD2
CF191137AE1B36F32FD84DCAD50644AD55EBA2694C93BDF984A5C9E7C92B73A0
26769F00831537266FD2E711AB3F8AFC5F3FDA3C9E6439FFC48C3D1B5527FC56
1FEDE991E66E8465C0E395EAD0A22A2FDC001E449AB9C5E0EF187A1DE9B74696
BEB6A525DBF3A60DA2FBF1579150DEE1C5D1B6F55FF2708CE23289803CE123BD
C81E25DB96551A13AD713D5C7BFDD3F2E1D5C12463A195442B51909CC1724E50
A1F6F4EADB3B7355908F36F88521F333C4E7C70B094209D1F883B961DFAC32BC
8C5A2CAF77CA5E6AAB714CC0AF2B42FFF6F73301FC71AFFA9B33A2153F55C2DB
C1C111874DEC37CB746BEC9A3A9A37A2DD098CE7C66B0FE38460ACD77A47D53C
1550F857FFB733B5A8D02FB56790A09190B29CCB4F4A3058B1C82F0CC5E1B2EB
2F8E06F2DE531E1EB81326A8EF0F82843A4AC59D267EEE45730895752820BA93
A129C22A78C1AB28BCF67AD5DF372FECC9EE6719A02E499FD5CA866688E86089
7EE8E5912087E0C4588DE38428114785E0CFEDB1E2EE24CC067D107DFDF1E2BD
B1C4F9C6B740F3DEA0BD315581004E851ED5A9F66C4F9E95DE97D355DB06F482
A43B565F1255A85710B15A281E2F034B1C23FEE6CDF3A043780CB6AB18A016F1
9EAFE545CA5A5B5AAE2459D69D2151E99D029FB5C1649B9DA784BFDF7D177385
4D8B16B9922D149FFF6B4F99311D52BEC9A9FC098E7192180DBB38767DA9B9C6
E8CFC98615219EF3AD4A8157D14C72BA3F91C8B78381383E0BCA1A5319749B8D
07C9A8BBB76C74F0F05157151B418C385F2ECADE863C977BC1D0592216FF2843
DC1BB8509D9BB8356D008D7449147F456517EDB169678E28B2C0EDBD271BEC30
6E181064988515BD2B3AACC6D45DADEBD4DECAD9AC58CA06A6C9014B780C53D4
67D0FE46560B44CA4FF989A4D77F1B8828BB42507B524B622F10AC8781B19CE8
AA275F9FEDFB3036079F4F10ADC8CA8FAF5F5DA7088996FB632CEBD691C1F29A
FD52CB18BD258ADFB0B4B8B80F857B543BC64BE31FC83D5ED0A4866444501B5C
C98E1CF0A452E886EF57A241A093B769BB09B19B125F334D9D374A9C1B6CFFD6
FFED42F77C7624F8094CA624F45801B960F6E145D9623ADCB90F36C0C273C5B0
6E0AA4E0C95CDA1561529F446FE5489523B6E793FFF58C9DE064BC47635CCA71
AA72328472FF6822BD62A82B7765A73CA0239A9E28179AE7740477196602ABF4
2EE916B80AAFB638D00C1FB2A1EAFDC4516C7EE3EE4F5D3039E70EF3B07915B8
7C9C128C2ED3C27FE48D27D39B41E1ECEC46CD2209D760D75E743AD13AF1E761
A8B7F996ABCAEA43645546F42C87F6909258CC74419B96A39D6DA3233834894C
C60B03F867B6ADAA2C18F60040A9D8E70BAB12221217095DFC57117CDEB536FD
A09E11787D4F7B448F88
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 62 /greater put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D916672480464F7E22
CA6E431FE38D3FC019BDD229E064B72C545C61C6EA55984565CCA88ACB01F744
3B4593CC8953C83DFB6FF3C5F9113898F45B76D98F7F118FE4D1E6BE669545C3
92676FA583E3D3B272D5BFB24153AF62BF53BA0C81BF5AA2012FD33DD7640BDD
5CE8BA566FC85FC277B1EF69622D720569405B04D49FAA4C9FB2D4E3983D5C90
6B9A4327AB712D655D33EBE0C95E1325576B034525DC7BEE4BE00928DFD23FC7
42F317916B81D6B189FAD3045D66E40AED0B64F709989F419019BD5CAD255631
C91E48735BF1A70917B17928088769ECA64EA6FF215A445CBCB6D6D784022768
BAE9BE186FBC80269392EC8C86
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusMonL-Regu
%!PS-AdobeFont-1.0: NimbusMonL-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-12 -237 650 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B89290699B50C1BF1BAEFFE
1F57BE7B5EA025241A248A6D4CFA5067A1DA6EBA4CFC940599BA3F3C934D7248
B8E4AC5816F0D2CE8B3C4193CE39D19FFFDB75254573173CB51CCD83C2F2D06B
2483CF9B07B21EC6F502F028C273887BB06DAE2AFAC10E9FD3C7CF51BCA7B277
B706E425302DC78975AC0E43B87073257A5CD7424B6865FCA89D886E8F95C4F6
D457623DBBC0D16BAFEB4C649F5D72B09B18502EEAB687E915E9B536A361B4F1
44C3CD4CC683B5F05A4ECB4823A5EB5179BB7EEE8B76C21B2491A97808F6318B
585B0BAD98F42FB4A755BCB74CD354F794C8BEA5B90FB9681BD5849D45247E39
930C882490230E1662D39CCA875BFFEAC3E79A78DE6E1298ABE9817AE98675C4
16220AD0D3A36580EE2F2A17AAA1246C416D58A4C52FBB26AAF3B6F75833AF8E
3AA996218DAFA571FBC7CAD90ECE9C883C813D8F168C5E86BBFA0F0A5CB36E35
2DE4CAA0F8D3227F72C5056BFB5BCA6BF9C60E037A0E44670A8D3CBC9A19F379
CA8DB30B711F518A8C7569211AC70C46EED2AF62A37F238BD0BD12D60332E673
C6E784B3EBA3F2E71E9993B97E8A38F85048937E958F1CD8FC6E661048546135
56B810FA1FF611B96495081C04542DF7FEF085DEC619DC8C84CC57683D212813
9D14728AA32723E1D15F2AF8F03422CFAFD8EA4C92DABFE00E6110BCA39FC555
BC066EF848E437B50688DAF26D001AED7E74605DDF9C0ED36BE45455AEF92689
8CF32BAF2418E02118593F54FE1857807BFA0B93B5CDCCD81D28BEDE22CDA6EE
2E32422C1E8DA8866E526300F9059E85CA54122ECBFFDC011460913E0D28F7F1
B3230E5A39C9141E775C84F5F08DF117833072669C2E814B6F228B8887C064DE
2A73519094BE9B1428BDF66FFC0D419508D28368D77C3D74397662157E6D94CC
34A4E8E3C92492497C65597085531DF64E73CF532923E209E8F48A84A163CFEC
2CEA98AC1D7181D637A568C615AC3791D8E509422878B912859424AF93DB66C9
EE07FCAD6181F82F434EDCD874E4345EDB25665463433953096C7C0CC05409CC
DC25BE97316CD29DE3D5E84A070772AF9A660127AA622238CE9807B35B2C2C0C
32F4122724C159AA1C428F49A9D1BECB8C59A9F4763F2566A7A513A6C11F527E
9B509F7B8ED0F3447145128EBAF2B73398289AC51DD4F7A808F1DD37AAA08EF4
F57EA64B4B22737981E8C15DF4DA4120AE6BB7424A76B49084DAA4E5997604B9
E81D6D5E001B17A8D845ECC703FF0851D4A533E8A7AF1258A15ED5674C3AAAC4
CAA8344432F60E76B207DF7219ABB9D6458C50E2075789F09D532FF5C52BB91D
6BF932A853CFD684DBF7F19487E8C2B17A522FF819216C06D3A0003AF55ADA60
C1A968918CBCF1BA0B61CBC0F205D27CD5C774B08A3B932FB2070F362774D295
0015F2EACCA793E7888C26EE723E78F3CE4C5B624832BD33B267275629CAD1DD
3B14B69236D958B5D14B64DE244E3A916F3EFAD1B4BF55BEEF99C192A98B01E6
571FC2537538A4DA5C46EEC25AFF26042946F5EEEFA423BBAEE305AFA3FB2169
83DF61299D28E38FC40779C826C9E160AA06F3C0B6861BC85CEC6935C9FD1FA0
EE61B939ED08F884480A3E19DD134C948A29ED47BFA0B135E0989C48F28FC2B9
1C78AB25F2BAFA7217AC70D8D9D02544A545F6880EED34399D2C3EE72CB33BFB
FED297799B3A802E0D2A06C44FD3144D426E46FDE470D568BC4A17A44A31E61D
B881C3303CA64B3D00E8B27F5559C0B2CC64B17D898289F8B9530330233066FC
BA83EE6C45350AA213AD5635DE26C14DD642C3C97AC15E4864F7A7979AA05D39
5281F7D0A6298620E5154BD4372980CCC046978FB9CFFB458E401646F45EA63B
A74EBBC62EB7903268006A9EF9E2B13A67B51AE8B12E5BFEFDE5D92BE7BC5EC3
81B09A3F632EDE4C96C7D317ED97A741A31CC1C39F0AE20090213BFF2DB659AD
D1E9993E2508AD48902A8D2674D05E250335E05CDD95E3BEFC41E38347AED4C3
B50D1EA14E7B8EA8A5BD31E2FD4A3C65E04F45CFA31474A485BE3CBF2F821157
6162D806F8F5A1C1D1700A9FF0772237BF80D6DDCA23C442FC7F602F7454B40C
5E098F847FDDA0D4DC48817A0848201DDD7E184D3F82F2A80550E3A89AA8A18E
4A00E72032EAF44C1B3CA43F1525A4BBB12EA7ECA1A5A5AE9679354CDA68B20F
578B9FF66D78D738FA85FC454C23236FF4B6625EA74C206BE178320D01B4DF14
5D6DC515C88CCA34166303DF6A79C301E00600AB38A00EEA61310B34A309F058
614B77D0112527C92DF85C31BE5BB7224525C59BC40880EFCEB8D91A7661AD81
34E3C94FE80AA16F004D436C27CC46EEF80FA1A05AB90D788643BDABB2A2993A
B5D0F5A7DC3BE3B885999BF8DA87335283D912E5C0A267BE4F707ECE93B3E1E8
BE6592231576DB47FD647E044206E1567BD589C6D37033A588A778DDDE6028AF
926E27403033E2AE41CB905AEA0B1986013273D8D6B92F86979F67036C2938DE
AF61D75DD89456D54BD4331E99B92136EE97A6F8588D8F6CC9789369AA1EBF87
F75FD4FACE6AB8A46C5A7A31F4D96DC3C90F4C459352F8149CF30339DAA54F8F
A10295E101D973D05F42D3E371304227EC703D42B4C1064DD953A685598D8408
D1190424E34A664631E00C17D80C9CA4A3259B2FBC52122E7974849DD398C044
CB32FD82D95905FB83958C19FE475DCA7075938672E207A5C3B479309AE973BB
998BBBFE4C486AD89EAB0D0C25228B8743AEA49E26DED6E9861BAAD4020FFC9E
1E34E2DDD2B9E7A2897E69408B69A54732D322EA007C14F818B442247BE7D50D
A8D8EA2256CF0C7B7161310423883BA857C54FFBD03226A2FF68301219A2A078
3FD58874BF2B131379A0572664876F7C46D3EE9253C6EFE87DFE2A06A70AC31D
5DEA0FA06483F8DD04F8958AAC589B3108785C1400E0D91EDAA4A206ED76B430
3ACA271CAB096B13B95692C2467823947971FAAEAAC3B3A5CC1C97A5C274AE61
3EAA4D6965FFD46EE8F7E725141C25A8E8C2F26E757882E58F6D7EED8BAC5677
EF84491B3DAD0B9C8AFD6537E7C04A5F188259E5CA10BA629D4765B1726290BF
11208634AC5B214B3F6E6A63D61DCB98B3D4F96D92BA5A0AFD91E507EEB3769E
39375B60A1B460956040DCE8CB8E8296F04A7AF173AC40DE1276025EC35FAABA
8658AA75B20DC5CDDC57296986480AF54A819BD094842D0A31DBD42493D2DF8A
406D54E1183CC3B80A81973105F3E15BF95307E9D958122941244563C02B9DAB
14A41206C3350B9DFC1DEC1CA573E24D3AD3BFED9D1DB31CB9069D9C3FF5D78D
A7FA70231BF013DA33CF12BB0F854CF1B11DF76574B9CB346DC4052D3D96A3CE
36F0B700EB6704E48BD3E0A0EB8464E61DB23032736B224A9B0C456200949A01
730552455852341A2636E5F91048125A7170E748B5BE02166E78539970EFB2D1
3C855D11D212CE13ABD5A5396E3FC235888D9E3D24C7DC65F407F99A68AD7AAE
8D5C1F7CA26FAFD56023EEDC6A1D3AC570D6CC1CA8DCA9709A2E36051D710DAF
B9333E14C331C97421979EF0C9E2E43707530FF446F58B37C73CF2857A7ABB3C
8F3C49DC522636D5B7FB6EF764097A17DA725C3AF856C3149999D9417CC312E8
D87F14AF3DC280BA7B11005013D121FE71C19584777E6CA510A921B50D54C169
F0152F9243C2A0366D689AF86C17BAC193BBE46EC45AE4A27685714EB6009A9C
06D216CBB04CBF6C97AEB8FC5D08D22097C50B193B3FB807C57B17EF0AFCF839
B2E73DAE8292072E68A7EC2AC67823C649075CD6C0113043AAA6879B4EB4C744
665F27E0866D8FFCB089975FD9B7EBC9C6881398C1114F2C827F55640FB757D6
1014F6482C45A6EA75CF4568948BE527D565DEE7A00646BAE63B28DA5EC1118C
B2DB8CF3D399EF759D2838D44ED5CB9B0E51DDC797110DE3CE3A69D22FCF6537
CA7126E06EB04AA53AEAF4DBDBF6F0800EBEF9EA787C0144C51B54BDACAD222C
0120DB71D79A7BB66BFE8F5AFA55FA4BE711B6DF0B7912C1FE9229D78A0C17BE
C5F00941CECE0AE684E56726F52F3A217ED572C6205B3D12461C250935D76CCA
B81688463FEA43F72357547D4DD8173012B6F47A077F767B8E0D8C174D131C5B
4B16B4A0FB3C69322D42C893A300DE892C12ACD5D2BB98B011658BC4A6486221
B57A9B157E203E5DEABCFEE96DBC13FB31B0EF2B584D7C534F0908DFE61EFB83
EABD7A1D4480899C4A48F16138E99310C45058AF93C2AE5D9FEC05C27994AA37
CF2D70FE8977955091C54F6830ADAE9942B8A8655F03CD105A5A587CBC780405
2C09E11A0E1FF3C4B9B145AF0D96A6377FAB0CB0C4D813F4D8A1BB88B945160F
F97D87704E88B3A522401D21AC77BD6EFDD2E465BB1BDC494D9A64ABCA2DB233
8DC06DDBF4D5DD6F62C66F589BF40C536C936B6EEB93AF3774A987FEE1026815
BF8D2784F150B9180ECCCC77586E39586DB7CB534D18001193BF524CA5AF7D14
06F8A10CE2D1A392ECE3E3A3C00AB4866DA5BB6598A0BD1C6C703168604B22F1
256D27AE000B820A95DE4DC41C5571A72F140E779FDD9DB73AEE2176C21E842A
AC91166093FD2DD96A99FE82EEE73518513A1F7A63A3F6709C7C5375D9D1792A
6D4A14EDCC2092FA8CD565E7936BA4C553F92E9421B90A9598C5DB6B6CD12D5B
5AE6C71B9D5BA40AF7FD4DB7220E561160918566D699B6E927E8494ED12C35F6
AE4CCC6B4D451E2F8E89B3400F570DB0B767F4E9332D1E0DEC683B555404A1BB
EC222D351E9D566EA091134A841CD914249FC82E4865D2AE5F9560C3190AC388
C4D02E161B1383535A46D45C18DE0B91E73A2AFD5F8DC4CDF14C1A9D0B93E9AB
55477DAFF0DD6EF77D7A2CFDD1E506B4F8A2BBE9E498FE07011BBF21045DC09C
95C9AE4B4EF735A5414D9858874853EBB08AE39BC8B715A541515BA68D3264DF
6339691F9135C70CD0214CF04A4EC5AD120D492F25CD6E1E8846F17672BE468A
C0E2E6DD2F6E0DA368B1D13711BA7FA6850E25AECDFC2B1A24A1B6B052A0DA80
0EBDB8202AD3B4398849013FD822B042ACCEEC6025F8D50EF309E189442BFEFA
46DC309CF7E982608781239B43F0FEE27EC234D3AFE4123F1D7D6290DD4760DE
6AEEF7692F63D89425977C174D2265B1C9AC635262C3DECA6005B3B61C2C8036
F49341F8E2B088B60F3DA6B9A32A0566277E2EEBCBAB8DAFE4BD13ED55FBBF17
4FAAC6A111D745C192D55666FB6BE037AAAE4CDAF2F7DE01225BAB548A83E7E3
69649F0DFD0046D577E248BBE1718BE7511AEB1F99FE97CFDFA1F943C5BE99C8
E9E6F3D32A5A166916A77957DBEB3C0C5724BAA0FA5FE12744E0AF5C9FD21A55
932FF0B539E648A8D7BA00DA4C053D4EC8E306B5CD29ED62ACA03CBCC8A68CEE
666BA50217B3B416BB66C17CE318B282648A06B7F086A76C902A84012F54DA92
E459A86C7A105F88617059FB410F61AC4891CBA003F27F1A81186610B2A84571
542B6D20B62ADCE42B4F504BA2ECE13AA10CFFE07A1CE8379ED1C4C044786804
7D4B367E7677460CC07F56A4A43758960690513A56DCF67A39EEF5734514F45C
B136D4F6B6264D94F39375AEFCAE9AB59F82BC278556B8E27C6B32B701653742
F6997A2E69BE326811ABDC1CA7877F24CC332FE07D7C9A3FD3987365574BA914
CC24081877F14E25A08AB6D36CE42FDDD9671F7C8463D5BD4090843BCAFB2B0D
B48E2446E4AF11C73D52910F14BEF067F255C440F31FC74599D32E960DE2CF2E
3C1CD6CBCB5194E910FB871A2A1812A3EDE5BF402545CEA5F9F1BD728B86D3BB
E1E388E724092FFD15C5E9BBF9C1524C164F29BC6BF297198EF016B1FEABC107
850EA178FBFD931E8C1693582C19514E403A240F5E8C6DC6E24969EFEBC08010
7354F0ED3EA6717DD3C4DD6F155686717DB69831A4C94E824294B23A556EF551
5BB9AF903700984A13F3AA8776062CD3A58E7DED4769FAC959A8513701F2F964
0DC46AF4CC68B508AE41AC3F46749B192F87B72ACFDD182329F91FECC9351B42
923E48312B5FA3BAF69846F71F4389CA3731EE9C79E4F150DCDA9D4FB46337D2
BDE9E18C4A499E7A9A2885083ECAF665EB9729F7333AAA6D12256F204947B021
324C0A8CCB717FCBA052884A30DD2132D0C9B9A1AFA21C82EEDCEA0D02C235F6
AEC25036261617FB6D268A459642E73BE4EF041C8FF2BA05552D55642E3F3B8C
EE34D05FD32F66289E8631DF20491C679856320C7E23C90590F0DF98BBA86776
9AC53093BE40A4E601F9951B817B69BEDF514DC4A9FE8FF12370B08535D3DF4D
6DB9326A5B0289B8361584885E465C1ABABD4CDCEB83C9D625637EF9E0404EEE
AEFA80518019083401F2E898352EED860F9B43861CE34021998345764F2E655C
403418E0D4E55AAD305DD3CAC4387A5693636A90EEE54D446D4A49DCA111C9CD
9BE0F6214F672328B0709E7CF16E6B13B2F2F2897746DB9EC514B42411EC9B41
3EF8C8CD0B3E85468D3B6CE6F85B1570A89C7E7E6DC2E5D970237D92520E8EE1
B1576E0F7C4CB08D39D00AE445F214041A6EEAD504FCEE4244DC4AE44977952A
40D900C5A075ADFD46921A316DD0AB83783902AE578BFE8DFC5469E8DF087027
EC2EC8DDA7400EDC6802C21B5561DBC1B19BFA4431E2C5647890B977FB03672E
CFF8E401E4DE644FEA737D84876F303AC69B22595259A25C5ADBF51F3DFAC696
60872B55A016EA9291D932AF28828553EB5729908E898E86D18322A30DD60570
8C275EDD7DDB9032C81A7C73C644EF466B67EED01D607610CF86D830BD74B231
5AA0C44EE84B02DA616FDB3E0513A062614F61CF0CEF919543A4674FBE296A54
3B3FE43467D1142613AC4FAD2BFC672FF7CE4557E2E185B59CADA151603F0BE4
EE1C83943D8D81198695A3A63F2532A98F5ADA485A644AB4A701F8987920EA40
03B108CC63CA504B6C74D1B1215E24FFF544ED61B8DECC065CAE294963F1F0FF
BA612E70E766777F1AC570C4970DF70D9812605F77CBCCFCB12F8313B7B784CA
55E5CD2486CB488D694619D3B6F77D8007489AA55E2EA8EFBF5E2EE168599235
59A2ECECBFF07BAD94A67121277E242F3A5D0D729DDE7D19D7C8D581635CB2EF
5B17D4FF2BA2C94B4C8A8FF9536B118D511E899F7A52930F876F08D5A3D7CE15
B502D9E0A28BC85FFDCBBD0919EE24EE8A444455C89DA926C40B10470827ADF0
F3B374E8CDB6D05853A1397D801606872CE15876D14BAE60D6FC05A0F71CEF7D
F456FECB49264453597E2FC0804193AFFB4790B24F5C4420172E0AC297069096
D6070E213F413E14651979A5583C9044FD9AD944D046BEFE083E146F5EA3AB6E
26FE4382FA3E82CB44FABC23E4ECA83E067C784926EABDD3D42A142BC1D1F1C2
0AEB76B9A5FDBF4C302D9C453022C7E1E6670C2876C40C9D362E8887CDE4A837
FBA4882B11AE6806CAB83C1706F75A82F420A1D9969FC723192A52743297DC67
CC1EB80C993660AC5C77B675F10EF3466D48A32CBF4EB3DFDA6A81780AFEF209
FD02965BB828898EECED18EBB01D8637EAE8FFFDB7356D21257EE38DD6C85979
2ADA821140C4AF794D8BDD162A9957B73C14981E066E0025917D1BDB7E9E37AD
935833B94133FD59DF8DC0A609105669122D86E83B98A3F5AE01AB9D95F8EBBD
A7DBDCC88392B8940C458A60F4738E85772C5D131319C2B08B6BAA4085D1F20A
07757F4E0A20A4958840A57AF7F52A51C0E009F7F9B1B8D9EB3BA37CB97FE42F
DEEF2E11CB1A97F524B45A6E9BF2E090F2B7B8349DE0E2BD4EEC0459E00A2F7D
BF723286D22881B6E14219FF9E70C221E46D867F1084DDAF1D0E060CA06F73B2
8F8FD39312BA7922560F099092CA1622069BFA06918DDB07054965BD22074A8C
E2ED3B727D88A77C5C5009DA9A86854EDF0C53AB58DCC4FDFE9B971B6A99AABE
A65296139A65A53C821DC4DF15FE69BD73E2F03D5672BF2A9051B04D25456D3A
A73AD23CA2108C253A775C16404D525AD7EC975C2E2DE2A423A92F6B05B67164
67CAA0BFD08C11D42DC5901A20F2509DC9D2000D2F135BAAEF4348D293E1FDCB
249B08236C869DA8557B63D6A4C7F1D1399DD0D434EF1FD6D431CC1E78F4C85E
51FCF25B6F007D2D8BF6A02607DAE2B6EC8603B6D89B8AFF8A4EAD2E627D4B28
0C7D1EB275BC1AB6F8847D80E4BD474269F936D2A337502F50A4280C835E3165
88A64A0B14D9A6F44932C2DC04E23562352D63B00CE64E574010172423BF5A54
03BB77D6CAFCB00B7BEF6E47AC23B920F7B535193DB8FEBB170F09C6E0D34685
3DA73055FAAB2DADD904DE6BB15DD509BA46BA450959FF4EEF5B163AB7AC47CD
6E9523811D4DE1C6C63C0ACEAA1B0280C4A7740C14DA2F7B6B1E99D4AF92BA5D
627FA697E110BC240CD8069D8039D9010E21D21C82FCAB5E878414ED99200D94
5BCCD36E19CC8C18341BEED641D1DB07D0DD69386DFB3D8144988D00892CBCC1
A37AC300FCBB1C8F38EFE801F71407301BF57E2EA173A2DB6CE3FCB50AEEE76A
106BBD771BA74D81C4DE68A091232BBA1C539D46CBE0420DE457EE415D070275
325331FA1EB4009CFF19FB5E44A47072D26960A87E8CBAABB98A5D4359E63E7B
5982A26F1ABC0F784189FB98DDE6B2E05B20D542B7E6C57204D09D05192CFCBF
7EB2434EA611EBCCDB60E27BB787B8930BAC7BF0952009F90A77EAED53ECDBA9
6A8110B796A3533F943629EE95C67A47C813999C3C595A7CF4D2DCA700C735F1
E749AEA8EFD63D93111F531B0D8E16539E3E6472B436527795BAA590F650B036
F2BDAE4CFC9A2EA106C01C544855E636D24A2FA55862DD7CAE3A005099EAA5AA
98B091AECEF65206B2AEA22AE03757BA1DA34965BE573F8872A46DA310F17C1B
EDA5B686E8089845046259EA79F9A41F6825C175BBB2285E0F721E0E59B4B8E9
59E8877C94C1BAA32474FC1E8DA934451F04D7D345652BF0DECDBDF7C8B275E5
EA03E9EB50E212EAE2140FB6A952C646ACD11485A859038696FCB8814EA6FDAA
D6F0BAB41A286B113076AA924BE26082FC12F01A62B2FA44E8873C9F74186C52
7DCF2C26EEA6B5033525C1D28E782F9BF6893395C4224EB4174D294D0EA1CA35
C66ED0228ADF096D86A278962BDA35CC68A1B7094108395E2181627E03FE76B2
B0F087D6457F8B83FAEFF577BA573BE3DBEF4336DACF26DAC5A32458F68EE18D
27994D21D9B4EAEAF8EC7DB4B8CF1A025B3B8C691F4944EB55DDFC433D1F9AEC
D8A6A27676D558D6931EEA4A860EEA5E692C9A980D780D2276730712DE8EC15B
8AFC966D03BF5EC2AB26D970F5716406D5557C37493814114CD699BF8D6BE059
F89443F66007194CF1DBA50C180089B03CEFEE5A5C18087FB230BA6CB7610AD2
5DFF186AD5E8CFBBF3ECC655A1FE092B9287BD43F40DC49A872AACAEC72A010D
9855C3FB18DDE6E060508B6CAEAEAD8210F7AC1858E4C2AD71AFDD83226C25C3
26430DAFCDDD181E0810BDC819AD41F70FC013EAB93115FE51069D165810F18B
D7B135C3300D4E6C7BCF1D8DF7B6318A2847A6228232930AF59C0D736946734E
C185403DFE4FBB8EA3200E3F695E86CF3395C9CE37990BBF01C461E2A4BCE5EA
E2EE2549412EC60294905ACE82021AB899871752D66BD946213FEC611A6AA6FD
4F88A532F591C5B695C29C3EC104079241ABB43360846E3B6987FD781289145C
5942E1626641060E55159270B4794F9C0945FEAC295D14258B745ABC6D79FEC5
A3BE33A9A0285EF5BAE4631847C23AFC0AF60E785B8B723C16F77F4F3568097B
60E1B56D340D852582BDB1EB6971F2EBCC0C538B9F4747E6F18EDAE75678E57D
E1F7E7F31F709A4B71156AE7ADDC10E564B15BAC0348706DAD0FEFCF83BA14B4
710841BE3B860D8799EDC4FE24714CBA543F2AB15CA3AD0E78C5B50DD01FF4C8
EDA1464E4B6822B0EA9B636F53F71DB7587E62CBD44517068178925302C10D5F
14CE4CE1D9FB31C807CBE9A5935DFD15F5C181D6853342FD9AAC09E00A563E6A
BF752EE368229466AA66BD23250F324FA5E2D025DF7D51EECA6EA4ACCCEAFD45
E534FECF04734C1CA7E763E1D8E2B8FB0DF6B5FB6D5C415495635BDFF798B313
5BF4BE860A2B46225D1784698203C4F0EBA2C58BA1A83A3D857D0B6044853C53
46456FD749529EC1FB00BA61BDBCC2D016EF4B68FE6C549FFD52BC02589DFAE6
B70AEF9E0DF35C6B43C7C81B91358CF6517C9C418DA0920FE6FCB5F93AAA169C
140A332092187F94485C96847A89CF61AE68D568CDA22B8B3BD3FFD900F59825
D71AED8DD381927DABD5226932DB9A0B87DD197916C6CFD3E5187EDD3E0DE35A
C5CE15B36401360DD1D3A7ECF49D9A1584049C0DDDD9855A3BF9605C9750D5E8
D0EE2F7070F717F1FBB3826AACF4489BE80CB7BF3C1C1ECC107607C6618A358F
BD20628389456D4EBEC5F445F99339132021D19604F4CA460E1C2898644AA025
4A1FE3C44528AF81E5FFCA7D34E1267393A62178F5184CAD8BE0A8E3FBD72615
0B00C9E1D19A25DC7FFEA265C6F4284D73DB7CFA6F8E219B006D990F63B0B62D
57B9C068A82D5519573814FB8F51CCE09E6D8D6726A01E77B949FC1CB8A241E5
E59C0593FE137A7FE2DC990921429AFF5FE8B6E14C33B8A740C40B94D69A62B0
E644070466F8437C5F8672A5FB5658387939864927699023DD437C906EC0FC37
72C86C4E3453975C67BA9136357A77D86730E71B5D7E40B1F9EEB79527A31F3B
38EE6FF0EEDDD13C68621950C93FFAB6A347E69D63D3D282E10FFEFD8F0D11EC
1226DE81C8A6A945A75226F8DFE6B04B77506A40682CDD21205CF6C5D86901AE
E975D2C9ADF2D43F909DCFA80DE24FC055E768A34BEC8C10EEC8D40497E616EA
C431A0B151248E60B39D68B3371D8BEDD7CFF77658880B39F4F3E3BB09C3B184
03619D16086216F26255BC1C454CF8F05D06EF7BE0D6CEC2410EFAE01CC1029C
5F334D2C4F44C2BC05D997BE16450FC9D4F3131E5B64FBD90F1EEAFB2FEA0123
36B53051DB93878AD4445B036AECD6F173E4F7D8F49E6303DFBB5D57C0CACA13
C348B2AC3A66BE3A76EC1249A5FBE07E3D5469164FA6ED7B141547DDF89ED193
1E512B32D6665BB1F2292BAAE73FD003FE34023CD044134404B58202B4805F0B
0B304B51C34823F8E3488BF8C14EC126361FE5CC05821FA5E2B831990E46F706
9764139401FF961C4A20C81CCB66A975889D24DF65427B62738987F7BDF81D87
D2AD05879EC3345EF092948B66831BB5AF98C1EE186C1A9C08DA089DD451EFF5
6B7192E02788F9E3F84E14A48871DB78FB7AC617162020E7DA25F01EBE4CAEC4
D3DF91E2C2B74456A4A4610A980B6F1466FD93CA0F1CD26CF55223172C2EF4F0
F9B95B918D4C9D64DD337CE21FD961011E450FC9D4F3131E5B77BD7FA20DC1EF
2B8F319797E11EB6063F6DBDC9284A0F4AB87D284384D6AD08DB4D4D750A4863
4632B1737775F5FBDD363746145F3630AA27ACFD99EAD434BC1A1C52ABB321BB
5F6E473C26F63ECC73BA7BF78B3388474E766DBB262C06251069FDFC52E58162
21AD744CCC8BE25E2B009D45D67BDD7D8875D7430333C1CF58FE0A248103A18D
D9F0B5D5D1FF2289A5558A31463A7EB4BE6776FB49C3553001E64297E7DD4850
67CD282CF8A940096A041E129C51BF49FE6F139F3512239186A1387A7F4235A5
1B7F84392D5991E947F9DF82FE31B442782FE3DD017A258252402CAD918C66FB
93437BDE3E63AACA600FF2F83F97EBFA3FA88482B20D5D9726B343AA523B341A
2D3DCF2461C8BEEB631B25849906B2611AD6460F7324FCA51DD67BD2616F3EB9
C4E5C02F52F548AE6CB765FDD1F2374F09644FCF9527871F0CF40D3E41ACF9DE
5D79A2DACC6610F25A0DA82EDF84E2FC42A7A689C6D7ED07EBB933820EB68FB3
7843B5107CC7658F5BBA1C6DD9936C95F474C1875CC61AC066941CA6317BD4A0
6EEB2AB1AB1B09C7E0B3E9A8C0FCBAD6626BB4938DCB5C28815B46083D924EEF
8F7CBC69A2EF7ADC9A21B6C692960EB2AFDD749810D978724CD58D9D6AF91349
4AB8BA4552DA445B2F324A1FF196248F725B9CB770D1500F7D6E49783E9F1DD7
D9EA8271C787E4C351D5901850E8A6A3449BDE3B3079891290A2643009F73B39
BA568A062C652CC976AF03D561C5F40D2189208B111912DF0BB686439960AB57
E8767749B7DDA58195F0C0BC22E26A431DEC8D124D065930150D0AB4682B9838
9DBF40B3A283630778311904C9B2C153CC2F20BAFC36B049CC836C9758D2A321
C0FF5A0789ACCA3022BFD560F7439437AED3C21A99A4B06C422496E8B80DAF42
A27056C0BB1F7690600BA8964AEE8F18F77B0743B88BC75BD62504EFDA88E629
241F374F3E9F3649F096A4E03FF10AD44C8EFC49EBEC7D1F603217B3FC5009CA
5C9DEAAB1B74EEB7B908917F5B15141A5AD1146F45FF2665AE9141841ED7367C
7E7B4032B4D6E72A3D4756BE3A37552D4E7E1777172E68B7D2CBA8723933079A
210A9E6CB5A33D82A7CD047F116092E64CC7E3D7BC2357A565C19E7211775C07
C8E7E139F5BA1B7F1B2E824AF1BD2928DCB7EF7D28B8F4FD7400E299FF52A356
2060A20E2B0007D86B16DECEEF6DE4F09197C54F8448F6B8DAC0CD2F931BF237
366D98761536E73E6C7FD601DF2DCBBE7382DF74804808C980CFC1188AAF1CC1
2F094F29C3E8B106530F7BA7C5D26C2EB8E75F2FA6C5FF3F0ADE1EB422B93508
A0D93E6736C3171ADA3500B5B06773349B6797184DB72A5872EEA0869F4AF328
A4379E8697ED1C9D2D00023627F31D5440D3C265B30F2B1254D63D100B3AB7E9
9F7A913E11D121F0F51D86976AC09A66C3822E2E19F817A2DDEC317BE5E5BD16
CEA103609BA2179835B87FEEA4C8D2668DA3EE7A5946F8E4FAC99C37DEE87C18
FF89139EFA7F2B8D86E468F2751EFC955E353E9E139629EF383C963A34C2CC86
2A97205B411AC395D103F4179B2F04D91EB74B1EFEEE3717547D41F25F17D079
D8F5EA9CEED44E74F0C6E595567508D6C6FEAAA7EEDA554D414587D7B23988B5
D74BF031C94A0BABC60F72CE2CB768AA69E19D95D0CD4BC18167CC2CD45ED8B0
65247530481B130C8A1CA36F3125A4BED0EEBD7734F2B9E3156400A4492A7395
8676B313F2C31EF2EBCCAA60F38FB91B502A6AEFFD47A66562C9C4369C921C70
4582323EE7EEF56D29136DDF6353C814EE2FE5D850A4BC5B1A0B20D639260D23
CBFBC98626739546A2F2E4C4F25CE9305040E74EC3D709363B7F261FABBC9403
3A75C66ADB3A63B4D931D06E3857634B1AE597555870D7BF4396254D48033267
7016F1B43767A150E155148C72509F7C8F71678F626A183CCB198C29181CD90F
9612553F34350582926AB374AEB05C177B359C25F8AF0DBDA9B82A4480B9C915
6D138945FE61C387BA870EFA654C76630D220342EFF005065AE22DB6761A7AFD
B04612251DD086A8D2A91CF28DE2E0348DBAD618A346BD8075C908BDB528D962
F5A4D7EFD4A4DC14ECC50927F1393B7AF4F8D9005E28F3D6C4FE6DC36551F427
1DD13CF485B3CAE0E0E78CFBF76BD9D20FAC91CC6E8191F65DD2168DD4CCDE4B
C02ABC6DCC921F6EBC54A833CF50A8276AA4D1FB8B9FD627C3B1CAEB9AE38D35
9065EC26F35B3FB13DBFB8B5A481A0BA9FA1267EF99D6172C970B63D3A5D51A2
DCB986D43DB6415CFB09F8457F888EEA7DE9E04226519E55932DF36358383965
5D62EEDE25574FDE687D5315E81004ED502939E89713B9920CFEAA2DBAE93F86
BC5996AD759FCDADC3B51065E26A09309F8BC7EC101AF2FC3F43F2FDE5954384
B8414D48FA825869197FB47787E401560F1AE32388D50AAD238BE5A8DCBBC615
4C37F8B2D7F67446BB05A325F0D67FA5E9E53ABF81E03D3062BF924AD20A7EA1
0AE4C44A972FAE60A1D0B4AD612445569ABA44D6A9546CD36B2FD7C4A5650451
020E839B965F042B35E631BB07CEAABA23F50A46A145A5A45C78DD34A49FA31B
DC7FAD27E826165284E9AC99C28F87899C144B473C560AAAA0414C5F1DC9D9E0
2438E6B8B634A890FDF9C13AE75839B2B41AB9F758C80768E86A79153009D2C8
87326471A7A7C7C66C4C20DBB737739EF070DA8DBEFC079D65D6CED953BDF1C1
44B6D385D34DFCBE11F86126DA1580079A142D27FA72A6B533587610C8587596
1FDDA498D72CCD4696D18E5D407066164293D4D9434BE39A8512776E89BAF848
3DC4AFCDBB19201A5526930AE655DB715134CC6D720000989C0C641FD7EA2AC9
D09C624A4E93091748B7D14C973C580897A912FF95D3DE7ED6CB3A1EC6A066EB
1BECA150012FEFC0728C18EA779F91D79204381FCD103010CFB803852E59D19C
2F015BE4DCA267893D9D3AD6EC07D0912A2EC451ABCADB67CF24ED4C068414CB
221F88023436278147C1A2067382CA827F6FD5368A2575D818CA20C3325C4CC9
B269D9DE9C40E22702F6FA419AF2E12433DD34543960FE52F0EBB42F3697EE04
85544A1276ADBEB679A5D9ECF02C794F29EB6B7A33CDA8C1A59A306764803892
75D701D5A0B2158284825C67C60F8525DB66BA6C00807FAF5BD4A5B703B13A4A
B709872C268BBEBB1DDE4CA1ABD4D193031A3EE90E87735926DE3F7DF6F60BD9
4821BE9FC7228490D0A2744AE39444EE38E98B7E2F8C16E92FF6EB3D972943DE
E87E84A25CD317947E4109BACE14E4FFE38FF58EFBD9D06FE1E4656AB9851BF5
128FEE5B1204645BC29A46F2DBA4FA83EDF65A5A203BF32E1E5BB146BFF3FDB1
2C23E77BF4462271ABF009E9F5E299B4B97D96C9CA6155DD99A8711F31C21224
546BE3A3349B369BA2A9983676ADA529D6B1DE0BE474C77157DEF12B0F50F1EC
3717F58BED2A015717122661A023FAEAD375910D89CA356C18BE703A89874575
9D9CEC2B750B53ABAD76A150B3D5F290842B8E7BD5279F5D91CC8954223B791A
6EA6DC3DB637D07A6B6FB9945319AAB87E7E41FFCBCC91C51BC94131B11B041D
AD10F91BBCCD4C29402D8E89D06E863D1C6E908A8C3F1A51A0A6494804BA06DF
97002BAC02911D4418CDADEAD3B784FB0989389B39825F0618985DD607832F8A
69F05C27C3A328181937762F51E3F004D62203CC2FE514BE4928E834498D90BB
E3386E0AF18478F95B51925D652C5A48BF8235DF009749A304A5F9715AEBFA2A
46379CFDEE2B32825C3E265C8F05C7D071DBFB7F07B90E9F5E713B472D9B2239
D5EA3375B32EDD30A7405B0B6D8EBFB873BAFE206178893A3615DE663E3137F5
53DFA5AA2FE13E29DEB61C60DB06D6637AB6B03CB16A9F9874A71B79F606C35E
690CFEC54B570D1A9CA16F0FC07BDB636FDAA2AE25778C857D6B7A73951AC80C
4D6D9C655C2197213C66AEDE3AB7B7973812A01445BCE39C576A8515758999FB
79C81D0EDBF831F52B0415386E2B6C100A8EAAF21B3CD783D1AB7C511D5A5275
D56BB69A2EA608B140B3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusMonL-Bold
%!PS-AdobeFont-1.0: NimbusMonL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Bold) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-43 -278 681 871} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B892AD5E69ACACC6C1640EB
3067BFC64938F41636DB8831883BDDABC6777DEE17F2E84F1D530BC76F51C621
75EC6B727A82C193D1C0801AC492BBE281B46626BD21F2ADBBFD144793EF754A
EA5F1CDA3310E83D78A098160C66D6B0C68D4976898D9DC1A08D01740AC3E7F6
8D3CE0A7E109104248CB86318400BD82EF894EFD9C9456E97055286C144D3EFC
D2625110F1AE76241079BEC19939AC962E0BA813359C15B07C74D5E9868E2167
EA1199D21CA8827CDDF1BE8357261BD32E79FEA6BC475577C5F6848345BCE58D
F5435281572AE6B33B53607EBEE6F862D4C752AEE43C00CDBFD258C7765B1358
5D6165EE034E5815DE79CC26C4A720607BAFA6049710EE3782BC2CD84FE2473F
1335D20A3B6E9E8355AF36673CDBE63C27D4F0E183FEDAB10031B1EE33B9573A
2E1961B7C6BAA41F7C3EE707FE86071EDE5756A00D7B3BF0A21B7C3CF41093CD
66ECCCCC22F4534912CB900B08E69574B07F246305DCBC238780278AEB8C9E55
3D096A944EC7AA9F697F354AA137DF90A9547EFEC1CBD568CB999979F5AEC6AF
A84EDAEE1564D178541CF4631081781608FD38964257CF89B1C8E0120B3F6AF0
793597AD553CEE5CCCD5C4F09CB0B4E998E6E76243191AF7E93833D067833F0E
53670D7E996ED67CFE6699A6E3815932AD272AF4829C2EE08A32AF41D0C67F15
0EEA6E6D9A07919D533CE73BE753625DD658A9A49824058B3D40AAB4C5F586DD
1AA3B98EA250A2A18E0FD974135FB897B2676481C8846980EC5C15A6CF3589A1
3F6DBEAFAFE973B91C98A1451EDD31135B7E7DB16730051EDAFC10D2A9ED25CE
E324888E648B46541EBD289AABD77322EA46F92EBEC5FD7A641338DF87904614
0A7321DAE9492A006E84D21EDD2CA9EC4DFAF3F3491D3024502E3DF760580C06
17D54A6CD838E51E38E72E5D6E3ABF1764E9CC6A4C56B69E963C1BF9B8CE006B
701C9523B5B9B145B6C92DD26021738105BCED3E94CECEB2E6E552D1F3AD1951
48EF85AE8B996ED2477421F6A82CA1E71C399BD284E6B82BC7CDFE0189EDCA47
2BDD5A7B8E16D60555CC1665B0458EDC336CB029F5DC16A771552DF211C44612
F4D39B6D5FC5E14BDBEBAB995DF855C084DA21E5EFD3BEC41F18FB8C6D2B457E
60950E1CEE77F24333BEF421A0AE453EC1567B6C78392AA062A7368BDC8F75DF
47CCF6216626AAAFA4DFC47FF9D123C1BD64443EB7D0F6C3883D195661CA3A1B
BAEA7BCB4950A9379B1E5038238A03A23B1B4CB13CE190839BC156620615883B
0E589EE3A0E0FAFC9DC93DE177F14A1FCAF6881D65F8CB127FF9339190CD0448
80D04A83157F6C7A104D3408735BB8ABADFD4F58075F2E4A779A8BDC031F0A2F
4E8ECF24A0CA6B4040383C9D965B43485D8916D491301D6F8F9E8864D2E7440A
64DACB0A61324819BD29B657D61E2BA950218A3AAEA347126CCDF3022F452D00
E6C3F486108289E9F1B5E29E5C584D744BFBA60FC22E964CE10AF512C228F4CF
C3DB240EF27A5C409A3F6AE1F1D3BE143CEC0C46F4BEFCA788DDD369BC6549D8
D02596DE943C067A52E1E24ABF132E2F1C61F31242729A9EBE877B546996C652
01C272CCEFB6270BE052F658087D5C67D702AEBF0B8E2A87C33D002B9869CBC1
77BD7D99E0ABA1EBF44D787112A01938185F1DEE52D5F739D1CFDD9459D56F71
A698EB8D7F3D54EBA10E0BEEE647974DED573B688C2AAEF49047078B06C8A968
F278BA7BCA00EA900B2429BA77A3F888F990BAD4D1810A9046288D9C33E4071F
3661B2D8DC640B8F2494EC316A5C574393F754972A1A6F8D053F2EB3FA8BF2C5
D6EFE5B2BCDF18517D0869E0916E6B555B31670C7044FACECC830BF9FC5B0245
323B24F840AA363C8C06EC0F4D58005511B0843AAFE4F1EAFDBE9FA317C2D846
55C143C4F74DA06E77B9094808F6F1115CA55B7BE5F2018ACC72A4B70E1621A5
8E2D8B37EB1309FDD725B6FEAACF65D8C83012A5191B4D7908FA753D997501EA
15183EB324BA351FCEFA37A93751BC46076F01E2D91BA27FAF9AB7A6CFD5F930
F3B3F5C994D3214A2D0851F039E95FCB18BA101F93D4D5A6D539C11187DE78BD
21561425B671D3601C7627DC1A93A9046F0061D3564D2044E9B8D2E9BC5560F2
A9F926A5855D4401FB1F62CD6C9CA9EC756072F77720ACE22C9983B434CD778C
286374763ADAD463346259844571401A131E488A004961B9D7754014195463ED
FAF7DF63DEBEBF603B631AB2F750DC5479B16B837416E74BB617589E877EF44F
84284B87C4C4246A6BFAFA2F12135BFF313497CE64AF94774175C7FF825827FE
2A6C008801304DCA2BBA8F01DFC0EF00645552C9A12DBE0028DC8EFFDA328259
36EFC9426F07342ECC66E68B983E966FCFB745795C4D2C85780F95B5A683ED8D
A83806CBF2B803C94B5A1350006146EFBE1744123AC8C0F4CA8C980DB119518F
89124248F3B93043F3ED792CFCF5AC617DBF2FB8C7A3E1146303DF6A79C301E0
0600AB38A00EEA61310B34A0FF7D6883F450ABD1799F8579A036AA6F4FB60949
07FCF217372686B1FEEAC57C32764D531E3B5CD8D17C3513C14BC3BF884B0077
C9CA4DCA2FB7C7EBBE81A9D14412312CCCD8E06297A576398B0ACAA04C99BF3C
E4DB9CE98E2B1DD10F21A0717E5E69694C514BF8D5F4E2BCE859A035DF080030
75C5109F898D7ECDC46559A1B312AD723585048D44006BD7390AB0E3183922C9
853A204FC7DE2392905875FC28D07872F48FED6A87F4CDA130B13E566F44104B
A1B29DD36486C75C130C90099A0630123392C599C95C2D501F8A38228AAE8043
FC64B26BF9E44951C3D22F573199F680F53FFF63F26AFD3D27BEC0995E743FAA
61D171FD86415C97E0C22F0D1816C6D921833C95DF6C500D819E8390F2A8FCD9
4D79AA6D37B5EC0F5E9648ED20C23EB154FC0D71D944295CF071AF86BABD7133
1F70B205B025BA19592318613EE93B4BCB7CA05C9B5ED07449D9F724E747426D
F6510290BE7C297838CE624E0857AFA55B4E52E035C02B9F746550DF9DA8C6AA
99A45B5DEABA8FBADC014CBC0FB8C671B76529F52DED96F7EAB8AB7C8BA1ABED
FD384942C03C32EE249D4550235FD56FB84E126674010EE3696D11291F2E3F06
359FB2DF0ADCD617CE2040752BF94A98902E608264DED8C3241F09E80F1628BF
F1109DA71D85A35F40871DD6EDDB2FE7FCB31505C0313797A2C62016519BEF23
B160A29C618F5C19FB751B46C7972BDAE3C044E0BBD0FFCFB0E48F77266B06B7
56BACEB5FCD36A0F153536DAD78AFA2BED5D5C4A91CCC4E24C50984C346A441E
0D4C2689943C2836FB593DA7C108DB15C18BCB8BB846C142D9AA712E3305DE9A
02A8B5684BEF87D9D231C885FC0E8FC3DC0FD24606E68F9F622CEC90F4E09F25
D875B88F403D6A88CDF4E0C8D41C64B9B1DEB72F0E9058EDB8EF222CAC2C775B
6964AEA57F562C969C92D66E1D78562AE2A9B800166E14E49DF641E5329F12B7
A6EAA0358C8502BCBDF10E7427ED7C134AB29DCECEA5328F92AA2E5B0B2D36B7
0B46A1469509A5FE8968FE5781736971FC1E8DA934451F042794A2BE867D0073
27F013BDB90ED2A09250644E264DEA1AC0EA512125DC02C129DC28D382B62F4B
33FBC084BCDA392D101B9013DE10F7D373086CDA1695792B27DF511737295492
414A8646D7AEA86128D6C6694EDA54D20495E9A9B8C7F83640CF8BA901ACE6D4
E3F37AD75C34B8F016330F620A32CABC12C385BF87D2DB985AB9D2D04DB25B1D
EA0090B833A47CC84A418D8B59FB37BB3F6B76D5CA30DAA2A9B6996A10D260E7
E5F6EE3D8DF80675BB385D300EAA72C87D985162D53910DE1DA60560F84973A8
47723B615D4661F3C7F23CA7363FFDBF3675ABF732FB41F87A6D9B9D3C3D9990
F966A842ED69CA1EEB0C5068E13167980B27C6E1FE10E8C7049F51BB406FC955
99776889FDC65B123B3BABC2709CDBADBD484E787AEA66368993EB6B1BC6D352
5A0ABEFDE8A19951520413B387258AE60CF6CE44512DFA273908512CFC05C613
ECFD8FFD09525C63116A454C568A6720526F07AAA545FD1CA4175840D5D2BD3E
272043E373EF35BF4133E260320CB39E191970C0F0E81DBEFC7AA97D3CAC875F
3B157CA31D94764FD69135A831510CFBB081D7E78C44DEAEF007F7421EC91B23
3C05CA8359BBDD2767549450C6803B603B312979604965FF72E535607DB32A00
1779973DEAB1CFF05FE0BED476C58E78B6C552479B1E51C74F3BE16F39C0B59D
10758E47568E9B618529F7CD8EA0B8653AFD5AA0B09CF40B13314B799C88E400
E64E17114BC26ECF6BCBF8E6854D2A19023CA8CFEF8F05125F9C02CEECAE7C8D
DB5A98A399C67A7C91C3829D53261D0357958DBC39F489B53D38365EF5D68BBA
C5D36BC620745B025E73058891B132813436BF310FAAA7C59E5FFF1ACEDFC536
FEEC11761AA1C58AE14B6BDFCF6287C6A021B890A6F2C3D83ED30E2ED1D235E5
AD6637704C683E6C590BF2EF885BE65A9F57662C7D460A6E6C6DA14E3A1B45E8
AECB82954502887B4732C4100CFD8D4619BE05CF8B91285D727F6A3F7C7EBE4E
FD45C103CDD10D18F3D2433B05EF6B1F64A14FAA7DFCBDE2E59D476FD2FC56FC
DBA6777B31BFB424421ED6047AF6C9DCED6A289C01AB88876D626C0DDF493F87
5241C7DFF49AF7370231D9EF10CE8BC3CBC4698763770EDBD5465F7521FE23F4
830EFED86917C5CEFF9ADFD18C0FE8DC532ABC5C2C46DF4A11ACA54D5217C7AB
478267D823E67CAB240DD6CF1B9734E9F49C0E6B139259C05181A42E65C3E1CF
A2031D9F520727552C693842837DC49B422A14ACAF087F3E65C1E41A7AB9C305
17F2D5B2CD3AA5DE874BA5DF60C1A592984E0AFCD5198893765DD878A409AD0A
FD194DA2743894CE9B9F43EEFD1FCCF91E1D1863ACA97BB5B2D27D8678B1203F
35A16209ED363412914ABF9FF75B9E0C3676F8106FC0C276CAFBF2EF14D4500E
5926AA784E56D9D51D2163985B24B4C82E3C49D28C16CAF0476BE5F26BB85168
9B9103528A718379A93A87535B1DC939DAB8CFB4A81105CF98BBE16F34BCC7B7
C3A79117F4F7B7112735252C972F31365405E63981C2437A4CDFC540D642D74F
6D456F8F03E64708C3FFC3B5103FDFB5220838E85C6DF4B14AC6C5E7C663966B
BB50B81A94DC553BAA3B4B879BDFF7A765AAAB0CC10CCB2DD65181BD5D36F075
C9FC9A8FDB465FE44635CEB9AD6BB88E3B242188E43CDADA08BD4BA8C303B85E
FA3C80B34C366A58602E4293DC9631B8F1DBF0A2254AC14E2B936CE7813390A4
220DC0AE5A51A5EF09BD0E4E8E6A1E8F00878E5D449CB25D70046C4179F90EA9
9D68B8B3487E03E0AF845CC710E54250DC42D5F56A4DB190817A74BFFE390806
CFA8285ECAD2DCC519D9AAB13163CCA4073D42A4B4F383E88E6E14F757AAC6F4
D1A6B46851AAA0DDC0E14D4615DF39B1B243C361D242F69E0E6CA8EDAB79BAB6
4E8A5656100588F34BF56E5EE8C2E9936A2608664F94D4DA40D76CBA8542A46D
56A6947DE6FE4E1767BA5731103A601ED2D783B196F3F3CC62690403199AF275
C706DAAED10EE9EF0FF67EE0FC862B7101868B9CBEE53718BA7D30E01AEB1CAD
C50468A2C278E0200C96F4ADBDE27D74745ACBF1F0A64F244250A6272788DE34
DFE7D6C5EE64012835D1507AAB3A6F5F1E07791446F9E9D18741DD7643D81A08
DFFDC72E3E7620AD1E77F2C982A19E9E9E8079A98051004D964F880327D9E02E
D93D0A3C039C48BBA0428E157752FCABFE62B086895C070EF151C665218E3C68
1EB5695DB9273C836D273AE2D4422F851F1110F1BF5D1E5FCE604228BCC383B1
A1843756AF30B31F700A74CC06AF849DB88E77BFEAC75452EC0BF49144089184
DE805F140144165C9BBD8C8481708E05EFA40FE36828F0655E3716692C4A4F28
D046327A4CF1F98F2C1B3952F7B7A9964E718E94861527D71899B26E36210499
28B01E78C6FC5FC52B1CB9BBE02BB81A24B3B50816F0CF6BDC9B4215EB14F5BE
63C6C87C2BB55F2FC806E16A8AB4FBBFDA427F0F1101517B2DA3626247538970
4F30E19C52DCA1388C7F6E8A1BCD23DE6414222FFBFF404E5A1318F12E614A97
64803F3105A1BC0AF43F78A47CAB74A46336B100F563E93F8B698F4BFD751A6B
7C9AFE616AF7A5B857A0447E23FFC7F33FECBB83499B57B0CB7E83DF577A87CE
00BCA1F69919E4A36370C084FE0561EE4D076D75E06851A178F56B9EA1B6D9B4
A140BF5DBC014205BEC9FFACD9881878CF118D2BE50A888E3B3AFC97F0DF5C14
09E65DC7D261589973786A401118C46AFAC69E4ED37E52ECBBB560F2FFFF2345
355BAD1D65CE733A3D3419C8268CCC18C69157027AAB8305D70C98143F0533D0
45502B99547E91CB8DE16638778AADBEB1FD0E5F80595162691EF7A85BF92458
F718EED93425742D97CC0F23FBC88F8CD4E4AC32CCB0F89D2DA31500445B3ECF
6CE09385840188F13D101DAF9F3FB84ECBE93CF485330FB9EB6EB7E2DC73C347
15BB2D53C93A75CCB174373DD652351676B600031396E48A1C92C297BE6F1740
C1AAF96FF2DDB9CD648B22685FE0F89EAC202FC8AFBAF7CE9E137EBD32D2B381
8E7F24D94F69D30ADDFAE3FFEF693128F504642CFD40F5A52D71BA9D54EA09C0
E2FCE8D049EAAC3FF95B46E8234763A2DF0854ABDADD0F30C73C8865AE2D8858
6DC9DA2F77A1595159122915F3B3EF576789722FC07BC26C7F25AA508ADA1D48
8316BB77526BFC9F71D3AEDE6C1A2CD50B5ECA65887BEA2E4D977FF54CC8F310
C249C6A61ED55310C0CF2000B820E594F2E760D326CF34B6F18F1004E2469FF0
98BF13F7C9512D9DF6518CB2128AC680CC6839043059E6BB4DE253BA50A8BD33
E1A93DA2CDCD92F28B4AE252D74CF8A43388FF84706DAE81668F88A191F34A9F
A713FC06C69B2C27D0EFB28089ADDD53FC250383BF1E7E06492F78BADB1CDDDE
EF1FB8E924B31076154EF05DB7DF07717DB27DDA9CA6C8E0048542D4B32C98C9
AE38C9028C75E8EB40882529CE5E4111CBB13CC3AB7AF1B865C905F11B254A4F
206B13B702DC4E76A76885AF0B09EB7F877D6543FED753FDD26C83FC50615B20
D31CCA7EB216D27981542226F3FAD2BE387F0BBF649A5EFC7BF136C8ECE84EDF
665DD42FA9522F630CA899A5D78A360E09596226F65E2830521A7BE2EF1D993F
75619EAC1B3A7A437610C85D7D0E93B2E5BB2497BD9B65620840B8631DEFB980
FE263442FA852F66E1E2044AEE7A98C72AA0DF2D07B4C75EECF5CDC5C944756D
F6511AE5914212BA387D89E0ABA731CB447D19FD60F946A660DACF72BA715467
566C06DA5720326DFC2A455157B1BF595EA3E14929085DBE527E1729711369CE
DDA424A9E19BED13D137DFE3F01F254849D5E120C8C3C96A3D38A88E5D4A9559
46519165980146112D96057F4EFAAF8BE15176E475E95DF937A382B11FCA6382
226C92B9537DF8C4F37383902B4E1665B63932D7A24C782DDC093059E1F19DC7
286BDE84468B0D120E16295B17CF8CDBB25AF54BD452D1FE2B0C171A9380E21B
0E9DC3106AB600C9253C7E0F6C1FE9964D881BB2F0B25ACA22605F360E3A1C8D
92F3DA1BC112FD5CE2DD727E9C323CF765E04BE85EF2D66A58DF83510F8AC412
CA3D92DF2E573DFE1D00B54902E74483626C2FEBB4E76C78B2AD6A96372D0EAE
47FDFF46C34A41C8C6EF43C49369A5BFAA6B9159FE7A9B8E531EBE04D392E441
277DE9C7FCF06BDA4ECB03575C5DEBA8DA3DE17D922E1AFB95056C2BCBC96A00
43AABB5C5D54E0644F0E0A23FB5BFF08F4D2C9D9105C2974735FD1294509051A
DA92A970F9EF82FA5B2CC177914BA32C322444D0CDD2D89887B72310515AC4D2
71D06009B13C021549E9737A9D46EC4D2621197D01ABC7A362447B3CECD65428
83202004104449B7F0EDF6E1138AA2626D0D6001C6CB0BC139CE2AC419F18D63
E24323FDDCAABA2B2AFE18B153AA494BA0B5D2CFAE7B48FDAD11D18414D5A9A6
CD7679E124DBA2FE38800D918538A699C7E26C43F2E6256918458B6071AAD9D1
1CC2509959D1C5B8CDC769D958041EDFB6594193010E6DA585E396E01106575E
BC4B4EAD459D4943657ADD234A3E2FD32B166A291776FCE94D58215A2F4E65AE
8E6C5EC44D93103AB26F4F30AA2ED73A87711CE3A32680BC3DE683417C3CCB7F
DF09BA6A218AACB16EDC8324F18FCB4ABC2820EA2E02FC704FDE891D15BE06EF
44764312834FFD5914AED901F2E1D38983D354181F4BFEB44D27F0A5B4E57365
F6D2AD2CB72FC63B6C7CF2ED47C6461AD437ABD27006F2BA4941F6199C6F1481
9256ED1230E482F227AB6DF8F752A7E76874B1C1ACE9AF8617C9CB0352151EC7
04BB055A9E0B0B1E72B5FC229D7668742033DCBA9EDAA3553A8C1BB3C6BB81ED
09F494125826C5E13677CC61B1C1B821CF8D2EDB052D7F8CBCAB8782C30F4FBC
D501D0AFF27237C47AC2639318863E702CF155F97B9BF22F583936424CAA51C3
6194C1A6E65C79C6E046D497885667F7C44D6856196EA42AE4F27E8E6088B96C
ED1EE5B5B6D8E466B0B0815D549C73C9FE7EF405EC077083EF857979BE422CD9
E975446B9AD294619100D24A5293B6FE90120DD984EFCDF07E3F08698793F932
C0E76A5E800FE4432D4687557BA6F247EB05B305031FC233121A680C35B0066C
618113687F1761F76D2B8DDB28BF961D30DD2F7F9CB24B4020929E292DC911FC
C997B3B64E8E52ECE2F1D0020D8D809A0EA538E2B543F663BE5A1E7FE952C244
D78B587F90ADD1688FADA986564A59EFF256FB064977A89ECF466056CC5419B9
080ED0DB9560419AA64F121D0A07B6A137E8C202CDC401F90E7741811E562E83
E74072CB93C34CB9BBE5329DC473D634572AD65B07067A5F1D365985F30E01D7
2A9C41DD8DC570BE15EEBAAEED8381482924DAE85676FB9A798F51BF4DA01429
F49BFC1C6DE2033DE4292722C7E63F20E114FB7B999601536E8C48B863E22A82
914DEB26BB53E7F5D63BD7C626D3553FBE06B057DED9F8256205D064A6956233
981568C93C2890F66F76DA04B3E5C2DD382C49F98820B91D69BA2F738AD25608
78F213CD613D1050E9C3192D73EDBAAF5AF0B24B801710B35A31F8FCFA4C6EA0
169C3B6A01B202B5E7E682DCC28D911EC66DE7EF2948DE713172FC4413044DD8
507D5B791323DC5A4EB459C3361CF3E644767557D8FA5D731DD3DF390C32AF87
0A441B237C2CA4ADB04D1F966D0D8B95277D6906CDC2A39473788D1D14F16E66
C54C4DE1E55EAEF9D6B7E7A1AF2AA27C521FF9E1BF6A4D18A2C8B2B537C2E5AA
F8E122DC4B569B9019C35CA94EB06FB50798427E3817FD9E461046CD60EA601B
561A59A7EF6C52CBB7CAFFC474F6E3BDEE515596BBF6943A992E63C0D44D9847
9D856880553FDCEAC3DCC99E3BC5A094DE6D12B3C75F93CD8D95658E6DCAF0BE
B633CB942A99B04E1C54D8F836E17B559D04C707372135B875DF114CFE63F0D3
9E7A1F845CE15E075221C64BF89E0EBEFE65C41C290EF9B8E5AEA267B4C8DDF6
7D1087EC718E9C36AEF641051282C6C5A31AE64CA73B1499B39512E856E637D5
A1B8FCD2D5FDF5A6D3F4FDAE71FC655F76467A613614306871E98D30C3F340F2
8317FFA628DADA2E3BC03CDA3275FD9AA4302F07739D7EC6A3BD1B166DFC869D
E675DE56E96E1A650852F74FA6A07DE51CB322621418E890269CB83DD78D5938
46517479DEADF1579263DEEB1629FDE36C59B8171E0D04ADC9E4E89922258BA5
5DC41FAD4E264FFF858FD06CE6B12D4B9CC6FA935824BB4A590DA0AEB1F0F543
5A846153F189F5B22B02256900F9DFD112C4B9B8CC4D58A9048263938455D297
25845171C4FC24A7B8D2424006ED987D21BD158A46DC9AE46ED4A2CE06BD4701
D600BA87080A0907E3B61B9DD2527CBCE2F42EC365BAF97EB67205216F09C85E
CF02B1519FF7508B17B582D6736CD26780553261902969B07A31F5FE65DAFDC0
B224D831F10A939281D7067A0B1B4E5D0B735C08FA9DCD56CCB1FA759DE0D92A
F301B7DAFB7FB1D180F9EFFB6FCDE6A4C44C76732E8F5313F188BF2DFBE42123
27CDE172D48FB665EB7E81E6F9DF332C22C20FE53A3091384BF7F74304E3C6E1
79789453B21656D3BE25F4B9DADC5A276956C2F89DBB999025279536814044F4
5DA8E1349195E0E2E5B4E37C8A8CE261C184D326DFE5ADCB71812D0E4EB0C259
470DBBA6B83AEEE138812E952ACE33B882CAF1851A8D43B793A419F1C86798A3
B1E6FF0BD06E2AB02B8BB1E2654770B608FCB56C750BB0DFCBD1D45DAFE873B4
3DBFEA476CD31AB511863042
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusMonL-ReguObli
%!PS-AdobeFont-1.0: NimbusMonL-ReguObli 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular Oblique) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -12.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-ReguObli def
/PaintType 0 def
/WMode 0 def
/FontBBox {-61 -237 774 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B892BE302B1E51F8EC1929F
36611266EE46F9958416CD8198D4AAA0516D5554F2367EBC9E7C9C4B3703A695
BD52E708A65EF59D6A15BB9B1841F38AAF7AC4E225A07B1C6A14F0B66C37E82B
40E5CEA94D45A9FD083F35037D97FF4FE2DA17F59DB502F5FD9BFD67AA74C5BB
E38B5D9118E344A99380FB171B4B5175CE37E765FA13B934379B5DF1E22568D5
27C507C9E85A93C768C684B18B68DE27F4C2EAC41E8BE6026FE6DE5779B03C08
9E0B896CA7B912CF84BE709339E77FBB7F0A23FEA14397FCA694BC21F68D6E89
DA45C1CFB64CF3AEB180237717618E3BF29253834A6A99F1623AA0179AE945B9
DE7A442440BBA99D4C2DE04C649C3B087B1072E291D3AF959FE4DB7377D25F25
38843829F4B3ABC912131083410B6385914AB05524D776F05282BBDE831B89B1
BF79333F291C98E542997F98B35721F629E466C190BAEB6DC88F11FD425E044D
6DDB0A533241F3DA09D6132C40179A438E08D2F7E6E97E554F01EB2CA3D13EAF
278691B1C179E7DBC40B69D406E3F3A2B457F0D7D20905F3C30913CF36ED0D27
1FF6DF7CF98AF85C06468331CB07B99DF7CDFFB71C6A3E627008271139C90471
AF5A35F2786836D0DA235FBC4D86AF490740C22BEE82842873B432E4B388D09E
0779BFA45E31726954F76C3D7DD5147C1D8171DBD33921EF49D8CDE064A7433D
854B17B86DC68521DCC815DC31C01255A5125CA63C6319DEB18F9D95ADACE49B
E65A86B2656A08425DA47A69C3DE3397E5EEFACFF9B01526D9D71A7418928A10
032A56DCC2A73404EF3ACD646C1B9E0113A1C092FB38976D7D00609A45B21F0C
1FBF1F6C230C1C1905C0693EEC4EA9576E77C88C2F7239B03D2D12BCE9DDECBD
29285BEA0FFF1561C17591B9019A1F118B2EF4DD6ECFD0237B7D5E564F29FC27
64914E0570940EE80607C27DE6DC52496ED8055F99B31B80F738DD4EE4E2A9D8
36585CC753B2411D6209BE8B89934175F4E8EF95ABF6F3CE047DE94AF75B75CA
56457DA101814F0675077074C167D00535716D2678A151979A0C70147753E076
B73687915D05705F38761BE654020F34D2E4564D557FF2F59C5E6A27F6FA0A71
7FC200F6039D043FB5759B9FDFCCEF0A928C365419C1D2AF7F8A14A61F8D65CD
6998E813BAF9B05DA05E957A0BE481889125A9F918B0D589B3F75135CC1B8AF7
CC9A7435EA85ED80D8DAA2ACAA5B048E4BD64CAAD2542B807009054090770432
D63B1C903E55A806E2A1040FAF2DE1FD6AFD5FD97EAAB6149568918492C713BB
1F90E6BC2574A176C98B41D28561050706F803C21AF93B4DCC5AA19DB2AB45BF
264FB98956E023CB286B1721B357D8D51AC9DE1E9043D7770D306102CA1D1040
5C55F6EF17EE4D84198A9E10E1101604114B1E6AB325FBC179472965BB6B99C2
1D0CB69B11D9DD9A7ABBF47B2F3BD7E7CB9FF0DB8D5473B9E39FCE901DD2E8EF
DDDBA23B3C979AEE51FB9DDBF77438F67A12A1472BC70B52B694D6FCD676773B
A3C37324F8482FEF08751EB68167529E383ABF631384DDA72FB9ECD544CBE2D7
C6FCEF4143E50F9A9079DD2FFC29EE059687FE5220B6547F10E5C09F9E499346
B2E0D735FAE9DC24349F29614784C3339DBF4C4D4D95243118FE16859A40AD64
A8C869C515A0696A8E3E169D452836416DC50F7333505B8BD1C756361BF7F774
53EF9987E0A462594AFB132AF95D2C459ABFECFD709013A36140B8DA142FD05A
A44E8034AB75C30DEC81BDCE8AA4496B318283B80AC61EDF21B109D7DC8DDB8E
386F56C076EC42F6A62EA6DABF34AC911826F482DD52BCA32E0EB863C256F65A
8F40EE3AC0C9F6154C4BEDFD7DC1D74BDEA77930F422822BB15D1BFC89A854E4
0090213BFF2DB659ADD1E9993E2508AD48902A8A9F36199DB4438932C670FFEA
35AE86E26AF1BD5E5D2B686A3D22F12830D995534A8D82E4B822F07B115E0DD4
2892ED6171B0E25FC7EA594E01E0E7CEE1D3F6D71E36014C5E4B546CEC445793
129113559E917EE19BC199ABA21AABCAC412960C8DCA687FB2321C2CF6202D8C
D7B7A6CC203EC601F9A7E2A4395ABA3406552556516CF79D54863F75475EE31C
331EBF6DA6B98253E190B73704F12745359AE31AE03A7BA66F3FF8BE68BBC5A2
25DE219D6A59AB27D6BBE18B2F2553ED0EEB16F25E98F57897F8985B6823BC95
21B8441F2FB263A188111C15D011CCEA181FD726B0303F33072ADE4A74845CAC
F364159079C5A7D7EACDDCABB2EFFC320C8889D9BD9060797845C3CAFBF5867E
989162975370A4EE44E4F48CCEDAB42621F267E423DF9A1C4B207C7AF531FCEF
84F17FA90E22D0B85C4C944EDD310DD10D67851E004B1CD9CC7C5DF73ED6F9DD
34E972EA474C185A1858D399042E292894C344D7664B4F25F6A67B5C170F842B
F517047608D92F19B78DD70C304F5280C8E0D21461EB5C49E8998DCA25512356
4AC6DEE3D7C0D4E67B5CA971235E62CD16EDA2D2201F14BBE717801FF6734BCA
03524CA0B8459E0D0238E3506B81691736AF00AA1950D5D27F64422703C8F987
D5A72F28C86971FAF3A8393878954F819549B394C7D69D64335099F404AFA974
B577C8CCCE5B10DA5D231D9BC589505BF6D79D77DB8CC9662BEA42BEB927AAF2
426421F0093C603BD63827E28F17D57CEA5C1DF64E73CF532923E209E8F48A84
A163CFEC2CE775B1420558C95EB3F7FA15E1BD0E1542ED980F31F334C52AECC5
D0D48796C482A5EE66517595851B12A3C1E17BB96E1A6F204B7D74A51DB8BD04
EAC244CAD6FDF607651788C29C175FBD01BF2371AC313CA00F20AF5C58AE2A1A
BF07CA60AC39E2773C8C606B6010DF4D2A4D687669B5D954933B677EF92F937E
2854C96EE48FBE67FF076D9D498B78404DD417BD83B88C2BFCDA1CF4021587AF
1E6CFADDC3AAF47FFC7D84D207F79E0CEA90E42498D079A80F9E6ACEADF497A2
F8232C7BE1A3CC54474A1BCC34E4F775C8645DC833DDF0A58F097CC13CA9BC69
5F782ADBE50737CE43B15E232388B4C31B161A28C88FBF14846ED8CE716D43FE
7E1E1C778CAB39F889A684F409BD672C3E6A26B4F5D5A4967C8D4CAAEB97FCA8
6D77E3E150439D42F6874E920693615747CA7804791C610BB1ABB2DCC1FC2C24
60BCD025878AC44DB91F33D815AC9DC3F442979798EA7EACCFD32F670C45D154
E8F01C7F8542871DA0DD38145A944F02F7C57E3591C33DA1DF09481F9394B5CB
960EAE6489CD6C8FB1F1FE5D283A981437DA8D65786E104B9D3B06490D129D34
C2CAAD10F354EA14CCADDB4CAC9D33FC49E85EC7967F0BA0A576E48E4B2BF5BA
8160DABC41DA079DA4A751DF9A6109796D1D5D1BBF1D2A82ECBCEDB9BA0D1CE7
F020D80EDB625F6FCABF7F92AFF012B534E21382B89450EF7F5AD1BDEB6BC063
554059E8F51AF452683478B6DEF86E0FA0D34125774CAC77BB83868E162D1392
6D3FBE131A013F4AA722100E29BF819D6AE34F69DAB92802C091E02C6C5B95AB
EF22AF24628FBAE30296C40725E836D4E60F4DCE1A5DF0F39C06D5DA2FC9FE97
9B4956B81C4E675890C09C561C5A3D25C2BFDDCD35C3384D66E59CB3E77AC4C7
15B017B8FF90C36A694E8B7659BFD50D1316D20EEB7E844E7EFB1458CFB5C403
F552F7BB5F4D5C71D3D039397198648495CA7D06938A6FCF89B5C71AA970769E
B0BDCB610AAE2B738D1F9CA45757F10DC66F15B83AE510C78E2BA3D7A6558297
DD30D76ACFA6EDB4D2014548B232CF00A760D92BF4B537D15C66B2F99FA9956B
C804E6C0432A3149B7BA168CA488A7C8F0D4C7CCD9314923F532E28EDC1F4EC3
D0E698D8253A6B933B546475BCFF91C512F4118D14B1C32C97334E8E1D77C0C1
1DDA2EC873CC2BD4C28604E044677A51F95693A5DC3207DBCBD73B067552BD50
DC534269889AF2FF244463C0DA21C717E348E0BE63120324CDE0C82234276990
86BB41DC31C235D20B206326C7E21D1D635CECB8442177468B4A69E269481F40
D004789B887309E014F82B805C37AECF05FD413220403E4EF5DAA14D0FE79DD9
30033C7C5B954D07B18585DA797A8EA15E8C93746D93ECAE87E3949D0F143540
CA685AA0ED665FB4B8D7E5C0297F26F5E4F618CBAB88D15C18B9123793DECF15
0CF094D83317A014049BECB798D3E2DFAC1AB8F2792EE4224F397A96D6AA612B
D13934DF05A780B8771E99ABECE211314AF20CF8BE8C2A21768B7B460A33E61B
A81C9DE1E09FD138C4F5851AA4672033772458534F9CD75A4B5BCD805257A2BB
198C29776989F13884CB30CFC39611E704EB77E790E115EFF71E1290E399B471
7D108F22109E1CC21D964E14685ACD8C409035C8282CA19A33F4F18794570C00
36D413CD4AFED3B7470B94624512485C1D560032862BC7FC1D40DD9171BE3366
206684D3DCBDCA5537ABC8C2B536DDBFEF267CC9AC4437AE94EA564F00ADCCAE
391DA00743A744BBD252661883CC13A06C3CDA459399B8C6EA8C10AAD1B2A08B
8CC12FD6E1B54CABF18EC0715F080A9395F9FCF7B62EBA74353A0D84229C2226
462D4AC27F4EE04A1D9BFC2738923606C2DD6B0C31CFB585C99AD3E6B3AB0CEC
0E4B61720675E8EE4FBCF9D9ED7EAB53DD01E10CF742C276D23E7664B75384E5
75B24C9B4A2C861ED3D82B0B0340FD61DAC9425D8493FCC309848947960CC506
36BB54CEC8D330DC8C003A4D33F5311626E16A988B0311882CDBF71E891C58D0
57338D829971E63BFEE7B118C4A908A60A5C19D33959111C13D51E5460CFA033
8DF1F5726862FAF91505153348C3B220391CC097A598D77FF64792D7F0567790
6C951005A094BED1A2323DAB45606995EEC592D132EF4895BBEC6ED36CAFC2B5
6CF97B0E458714F0F617BB8CCCE0DF447F4A817B63F16138E5F71E700FCC94B5
8F96192F4AC69DB7A211523587E1FAC0EFA047771753FA81E6D02FCDB84DC747
DCF8E913A21A7D6B4707ABED07AA7A869218C303A817C08D5732B042F9077B71
7BAE1F598E6C702D1D6F66368330CD37EFE8558EB7A75CFBBAE73F91225BD1B2
6A82DEA18A90251F8BE10CC00A480EB1FB57CB3623440A69B39CEF72D6A2468A
A85C938599F9456948AE0548456540C2858757CEDE3C2E017DFE6653488E24AB
DC6DF356C12E2BDBE4A1B3D08B075F69A1458298696AEBCACDAD6DA564240DBB
49D81325D13E4CE18BB30653556E938E0BF7773BD22727B5374FAA94F2C41CF5
7C271C8733BC1CACF29A98A18BE1B97FEB4726B8B7C11FE21AA1B5F9646738FF
6961BEC1B857F3A5D374872EE4996B8C3795F96FB5C66EE37DAE04A870BB2A33
B337CB562DD4D28D7F4FDFAFE8408725C544C389CADE60CC0674761EF4443A99
073370FC2742667B6FB3921DDF5BBB13C92303C9260C9A29BBB92EF3B1550C6A
0BAC99C91FC2A7DA20700DB08F65E1DAD97B91661E126FDBABA78FC1DF2E6FF2
7F4514F38563E9D926F0DA88423DC2849432C1F958142AE94382BD77E25C3A78
E6567EB5C7B0A9CA5BCC5C25A001FB54EDD9521FA2D011D60612B985AA1BB8A7
0771224CC81E777457529DC176164E5D239F7F406CE29F99AE618EC891AA9AD2
2C8F01E441B911D925EEF984D1AAD2051C7F3AFCB2332429C9661A9AB2C65056
2EC9CC7CBD8B3D74887A5F7F5B0D8F23270D9383080F9AAC0E3EBD9F775BBE04
C7B68F12C792CE24D1E8CC67DEAC570858D7C8BF79B503C9DB5F0A6A1A98CDA5
ED0E80BED0241E39A771747F326783D70F147679B0C06A811B13CC1D08010337
6C2E6B452557BD8E44BC4FA5BAD54FA328B6B347D629F983BA6EF04947C4EE72
CAA90D128C43D4E43F8C3FEF8C5584A1CC16D6018D22631A954AC6C54035C8EE
64141D157D45021730B02FA77022731256BB47EDAFCB0ED7F05FB5809A4CF241
2978DA7CF09D3366E84A63DA2D94E91FC9CBE9258093C05501847F13D5093441
9AD650F35E897D0B6044853C534635CB5B06E4E420E33B867C39509C1759EAB7
042CCF128FD56020B094041C6BF0D15CEBFDB5A6C6BDE47EF5C4020197A7334F
B362577C8EBA0B30D058DDA3BB466DED48889EB235FB5758F25708EDAD09EC89
2F2A7BE28B2BAA33C784CACE2F964AD475BBA9E474804EB0AF33E0880843F700
FC1F6065FA37F248AE52A1FBA98701F609ED1F02CEE8F51DAB8C058734862BD5
96BCEF24C8B15D84C4B7B5C22051017C43865049C3FBEAE8B54856875A8941D3
2C44AB49C897B2CF4708A05FCC5A87AD7742F331ACCFB0E26559BF8A5E7E6D5A
C916E5699CD8F81F6DCC293D61D024EF2849B24E6F22497AE944CA6C18FB7E5F
DB4238985495DE249B414569081C90815F216F48C233568B3ACE7E4DEA48290E
D4B8D64970AD1C2D4AB7D855B0EE5DAB1D2163073A546802AC225B4380420A2F
813895D7F8551DE31C9EA3126D7F601B0E36197BFA43953013E49F0119FCC2FA
5C53B841058296B4C5F6B92CF9AEBA3EAB6FB86ACAD4AAC2EC1D751CB725973A
D710018AEF03F5D8ACB7A8160566B59A3778799A57B8009493926BE93473A91D
C6968DCEF4FB29FABBDCCC6B3366E0EBB862D2A54F1D1B22718DFD8D05857EFC
E850D04AE72EFDC8AD3C6414C6DDA9FC8029AE532CF49BAEC80573D47C104E1B
D7AE327E508D050E43CE1E4F13A6240C6ED4D62E9F2912826E9C690AF7D4B47C
FAFCD5483746AB6347933B5D75DDFD290132BE97AE81BB5F2242FDB1467619D4
4FE7889E7176E70D4108162C20F871E45B314D49A166B97CCBCAF855BD977B55
F720EA55E4EEDEFBFDB74F40ED98DF5D61AD25303FF83F766F1D9394447DECC7
6A3227424EB7A65F897DE71BC886B9E82D902235B00C49D547666B743948851A
F8880623EAC60668A2E42AF8E4837854FB8DB4AEE1BFDA58C60748242213399C
57C25A56E730A93BD05C2E014888D9356E27A2919F62A705BF662D3B157D49A1
F8450E1F4DA7BB92EE841CC9518F0FDCC7AF4AD93658D416C86E3048847925F2
9A5250B6AEB708E365D92A33CFB80D289261183A09E93C07489B9CFCEE0C0518
D163A4D225C7130BB3DF984885AB3ED0612296CCB8E5A62947D444694B79327C
64B2AE291E70BEC92996A14254BA0270B60683D102166FF3F555BFDE56E2F31C
F6F6066B3C0CC562361E8ECE61C6202B706B748438237FCE86DB2E6F5DA15B00
FA5456E3544E55D127E3EC286DC2BAD85457C0D9FEFD239A38DCF99A3541B7EE
8AC0ED7EA1A99D70DCBDE6B158C3DBE99A3FD444E9B00553F0C54E24B71C8221
23E10942112918AE6D1096B64F58E6BE85B49968A59FC19B758825ED631CC789
7DF1EB0CE164E4EB550048EDC2F429B1105B50478818D9D9B1786F9D7933AFF6
38F6E54AB3969EA0170A554E35FC6C8CE3469854945B030E5C05A1A8430EADD9
62BDEADF1FD84AC91E42B5CF5E1931DD20A6FE54790EB58CAA483215647BD3E4
CC38421EF44CF53326C276869EA20941CEFD0FECC8BD6E826C175FCE3AE7942B
5E5A7D4A55EA4384D44928D767C7101D65E487A587BCA3A4C3E13281F8A4E0DE
FDBA01DDDDEF0125E3465D4091C933666F9BC7190004D7FF66A476EF9D5C57F4
B14E54BA26B2A8CFA3C86296F768E749F3AA8A56ADCC26A6A4EBB23B07EE7D9E
BB4B4121CE793F3E7941CCEBD1DDBD203BE77B846C9BEE668BC55CB057A516F7
CE9C378245E35CD0C1369B201B4DA7CE2B7194624D33B42527A5ED078D77B0FE
AC00EBE6A890D66A701899357EFD3BCCA07A62E3B0AE8CEBC1461957D73ACF87
F933E8E875D6C95A69A483FF21A6D13DEAFB498FD4192167B49D78F4576448A6
B9FD4333626E5F80F69D227175423258E8119AA80B7AC5B9E2DF5A2B82DB2892
8496A2FA290690729A65491CECCFFC25924ACBD792BA424D9EC37EE3BD1D9860
452BE1C98B195D564428DBB4037719FAFE710D42292EB90BC988D24E44F2D7F3
3437B6F1C37F6A3E95348F207BE882F5D6655380BFD4498A70B19972BB9B2A0B
D76D2FE72FBCF8374E8332B98D6953FFD8CBA79A5710951883B78DA708C33340
589D3651EDD7EF929D605D6577A03DE99BB78A0AA1139DF5414824E7D0445409
5D1CA40B9417A1DB1BC9CFD7A726E5853FD36B397E8BF15F78C8E8ABCAEBB05F
8735424FC707DCE60BF82462F7BF0A301EC9F7A07DEA1D0391B73F69D03C428B
CD77481778614D372B043761D928D66FCB9D760D333CF5D28FD6296AE76BEC4B
0044AC2984337F2EA913D075BCF0B44AB91B48826675A096BB4EE57F8E1FF000
052FE80DF0A5A3160110CD44EE59C6546918C3A842411785C131D01AED184003
11FEF6BCEDCE7A3AF356B171289407AB28B303E724D97F6AF1D3AEB8B5013B21
60A62F49F1A7D264A22CA5BB32DCE41205C0313797A2C620E5F833496170EE6A
5846EB372D926893DC1AD679859E771835EA607E161E2BF8A95A9BB46C267C51
A5A6D298358C57757F2B289DD8FC5E06826D26000820098EB339679738678FBA
2EEA1CD3DAB7BF37ED5650CD9488DDBA2ACBF7FF2FC245360AFE225860068745
EFA0A22EB830AAB6A614EC819B79C23B7ED572BC910D908F9D897A1295BC54AC
FCEDB80B4D1A638D8EF2A1067AFD772237BF80D6DDCADFF7E8A9B4C94C9BF514
E6E901E0D0969F68DC73729F2DBF99D226F5829D9A80E1471AA5A5E5C0CCA133
9F92843B17A91A155E7B2F20EF4969ACE232DBA89CA65BC71D085E43769151D3
2534FEB2E72BB564B454747ECEDEFB77F3009A5F3F6752370C27F434E886BD75
C9D4185781BFFAA383B232A623ADB42D2015DCC25907F1AE7BA3B9F30A491B76
CA778F4CD8C676A2EE92102DE366BDBF007C92D8A6A6DB7E39FEC880B2E910C8
BFF715F86632AFAC50A5A93D3160799819260F7EA431951746AB084F49A1D8B9
166EA9D305D44BB607BAB73B0B102CE2FFD397E6B581FEE72539D434A42B90F2
28063FAB36700139BD2029D01EE2F6C66859FF3D57ABDA180129EFFEBAD86039
C32C2C801E4AF89319F6B0491BABF43CD3705A229D177F6E3BCB491F751B7A5E
4AEC6EFE6DDAF2AC5FD3EDDA3A426BF5570C1ABCFD106FF1DB07F4BB49044765
9416C94B0D4DC1450B22DF1B5F99FA33CAF45A98333E02A4797C48350A3CB4D5
71969ECE5D255F1339DC04D154B80C7A4DA81F1E6D84E35C6C3B7F4043A328E0
2EE32CA73AE545C24F7CFC809E7C81A56C634A43C5581D8791927682DC21761A
BABD7B667878AE3A3BC9BF2A4A841A7F327EC64EEA27ACFCC25AAB12F041CD64
AFE61BACF3382729A48D81BFFCDDBA023C7D4863772E14433376F466E861BA1B
94E3495267478D8850E4A948CF95E3C17F8B3BE728FC486619D565C3007F68C6
A7C90596905ECF8217E44716DE8E3A1EB40F9FD95F64DB750C3545E9904DEA1D
3C3B4B5234C116CAEB1AE612842C771F78A9E3A63B54739394A426D1DFBC6156
2DA12C10DBF2A70E6BB5A79CB35C076AEDB641F9A4CA07D3C1CC9B82B970E26C
9A48FB00D29DB04EFF58CFDF28158AC6596F456563D304DACAF1E165DD932F98
E672D6F6A88A33CCB106E450AB00BD904B3F74D9E5D1ACD8CC60FBD987794410
EDFF2403FE6A41C94B9108EB15B6C464807974F08343F9EECDAA0679FCDEC88D
C99FDC16FCACF4D3DEE153D38867339C92CBFAA9A695DB486228E084FA7EDE0A
686F303157355B278A752DEB364C74A053118F1F73F5EBF9C18A37281180C570
C380706132B263536CDC730D58CD0E36D9B24EE0A930903A6EAA37D4AACFFA62
8FB535958FDF2437B81C9FB8795ADDA8C51EE96FDB7D89BBB56036CF9C82FE41
30BEE3A8CBA48AB38DB95BEC5480CE4392D376C02E1925F8D01C4110583C760B
721CB71A7F7F95317C44EEBF88E68DB1CDF7ED5AF1293EC2FF2B37847FEA566D
65D6245329CB0647B8E8D612631DCC49D07AB87FDFFA2169019DE05AB45BDC6A
7458787DC9238FEE7653E44813D72B81E12E71C6D58ADABC8303FE03EC1BD05F
17623A22A8862A4B5652A2A35E73C6194243C977AABBA2B541719A2D1B2943A5
13B52792EC4DD041943F334E378CA64DAB897145D0740C60BA183A318DDB2DC9
97B2AC7952170CC7C567C3CF9BF0EF374D28009E82919DD94704A7BBAA7A59F3
78723F7A2CA078E32CE3B8E6E1CD93C22FF7E5252059095B3EA7F33C843B12FC
A373C2210062890F8DEDD44656A4711DADB9E253C1EADE0830AE378B6B4423E6
5DDD61785944531F934792A978930BD49D61F1843BBA9110F865DBBBBD8C27F3
F570F3ECB30631DE6A2BF726321A1804CE779671CCDD5A8BA66CC63DCF984B9D
42ED1096241092CCC1B7907B23A14CDD1F40DC2C939B020051824BDCEDF66252
F19A453FA412A62B0CA07D5E9A31F28BCC56F7FDB58E8CB317FF6E1519F464FA
806E7C55B4BAC63E9FED7F1D410B639108FD5D09878A0F936A6B0F19D726D505
DBC801B65688BE206954F5945ED360D89A852A76CF3A7A942DCED8EEBB40925D
23715B2B5B78016B9EE5D3306898C45157AF4C65FF2A5BEDC445284260C63A8D
ED31F5CC494D605013E4E0774A3E73639F5C84F6A789879A34C30271578A2938
9348243532828DD750527FF56B6A10D7D5EFF8F0020B4B1C166A0386184A0BC1
D9FBA9EA777FF622023389FC48B08D9412BACBD160C7231DC0361A3B1A1110D7
C752B6E842120943DCE994DF63E559A167C0FE986ACD7A6C2FD31FEE923AE1BF
6E266C00C5D27514990A88F24B224695DE81FD5F3F63B33A33AF687E89A47BFE
B15CC7E5B1F65F5994605C94EF709930ECA646B20C2223B1D5098ECD73DDC704
40C2684CF2802E384C43249407F405702CE0FA35141B3BCBC21967DBF6171C9F
8F29D19C7240A11FE784EC2E462E5FDA6291B3CBF58472C2D9A95FDB8F39245A
FC1E88A8ED45EB31DADCDE569521BC55C9A9180D3121EC695CE539A35C9B1F89
7E6F9133E815BCA1ECBF9999E8EC57BE41DB5B877D1303B336F8CD99D8E6011D
CA346ADC6657DFA4D71F845BED84B92A651446F3DF588CCE92D3E3CF35B772D3
10DFE5C50C7207C8CD0B084777BE5C3FDA19ED8EEDF33D69868B96496409A753
A0D9F596995D7F58C143037F3AC143421AEE7F609193B844625D3DC5373CD52B
3C6EE5596981A170C8A86DCF5D7F378A3822282B6698A51E70211DBC37FC7EC2
AE103AFBC6E617DCBB7F4FD1B23BBAF5276A2416D15C0676D507D152CB2916C9
D0CB44A6DD2B195117F541DBBFC0EF8D1ECDE82D6BE11F7DD0138865E435F71C
772C29B15912E55B69AB5B2F4524FB0D95BBE22A2B302EAAD62862FBB603738B
278ACA9499A885F19EA6928A94B2B6DC3FF14D0B0BADB7FD86A7D00051DD1DB0
8FA80B9991E5E662F730E3347B2CBF326F1E0EA43DC095D669B6E0826526000C
7CA6C9F316AA2237CE31DB7E2D1C76A980468889080FB68E7D3BFB12B60960BB
5115AB9D1D91BAF01B48E36E7E47F19AF2A733248F1A9DFA23922488B2E8FC13
34568D90AA29178AB2C454113C2D6F0AA7DF2B35040DFB942C716C9C8B367230
C167511DA82DA9CD170E9685EA69FCCF0479116798F125E90E63D7E58564ADCF
DBC11CB1BE2A74B2004C4A0D9B2A43270D41692FA36A883A1AF1AC97C7A8FD33
D6DE7D5BDEFD6F3F61048DB6AB1BABC9809C99F04F21A821C75679EDA9626585
23D24434A5414F15BAA1AAA6E898754CD841D1D40822A1DB7B011B262B4BD5E0
A414B1E74F9A9C8796155C11E0D51C7CCBE2CB9AFD7270BFFFBE2A0B2826DBDE
528A2E954A8ED93C7EB8C8BB22A1F20B0BABA9647BB0F82D4A4A9861B97946D1
2A899876E471F6D9D462A0A972F58685AE1A3ADACC85CCCDF6542ED39DE14B78
70D343DF102B18E903B2E5791D2CC5E3DE598760C10C7E0D92E5739853BFB6A9
5079B62D27805D8BDA121761CEB778BF0D7369467350D30018A10B7257BBF172
C022C29B287223665F9E2E5ACEECA11244D492E7556774FF62134C0638E0F6D8
9BFFFB8BF23B9CEA6ED5BB2AF90399D4D6C8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585E93CDED901EE8B566E969C0D0
EC80D172940BA3ECFA1C2AD06186907A91B3C71C70AD476F8D6E6EC6D1476CA9
9DDEBB0897B97D21ADAEC5AC1FA34CEF83450F3CF96B23EFDB0B46E25392CD6F
43D5C842F87B6D8F433F9402B18339DEE85CE619109DC5B0A512D05CF9D7D567
453EFAC6B42EA67174348066E173C5D0B04A7DA04505AE8A67CD805EC55122BB
58CD67DDE0217905ED118A54FCEFBD129D6310995B58DF6D920A30C805741994
1A114E40863B737B002A6CA958B8C2397A96B4924A0C7D7AF0112FF1A1DFDCAE
E8B1B75A2BBF37F423BC88E6BDD06F2AF61301FD6091FDF2C662612531A23666
64EE40299590BDDE05228EC140AFB5D7E24E2B18FA0D5A7BAAB82D3297C9CEDC
20F9601CA9FEAAD87981D6DA72961783F252E49C5574786F45DE88FBF2D6B94F
12E4EA3A9BDB285BED832B3D6CCE7DA625F13D9C504668753AA079E9B24F0C3B
5C930C245C7C4B18D30A7046A27AA007D54F2A1B2596FBFA1E5C6668641E4C15
421F6D812255D98D2E89EE3BB7AB14D465CB0E4F622144E415EA54E08AF5899F
D8E30152DD5AF9200F8AC8B8FA39413858E8AAD7831B58CDCD3666FA965479B2
A5F85AFA549BEE2E8B72DEC59D297CC24DB89EC76930D071A679EDCE7A30FD98
2D182E86B3CB63C968430895741B98CC3150361B8901E76B80E3B89A01CFB003
D77233A407AEB2B43C524664AE0AB89DF0865E14A2374BC9C5097DA8A9EAC525
6F54531F9515FA7A9458A630D71D56B733A086394C076F82EC251D595E4EE9F9
BE26A986206B75F6E1151D7A6D811C66C3EE048CB2DB05D0E50A525C31CED2F8
389F5004865EE88ED4DE986F6029A4C0BCA95791D20C323193B70D462E6527E6
C2214EE691177F70C00E3CCA1E36E5111D74ECE14CE6896ED7628FCFC441C30F
108F0159505E014A35C21FCB5478A1CEE42E144601E47E3C44EF2B9C5ECE1915
13362AD091F6FFAAB185DDF759DC26288A27F32BBBB4087D2B948DED6C44828F
BFBF98843FD61AAC4452EE1E999CC3901A7FB96C757689A5935BEEA90CCB0F65
8995029D088B980C1BFE78F9D07C79345CAA69F4DB314DC2EEAC844E3320EE6F
8E895A70F5E23C13FDF9A7724A5FE71F2D7C6A9106D0E42E184317DF4428A4E3
D4A3C29F9EAB7F88C96F904A61C147BE8A77CFC638E18403A6E9FF8767233017
9114653F3E146573CB07E954A869F1BB6FED5048613BF39CA8CB9113D9FCD0CD
3CD5E120D17FE4D1553265DB5FBCC07B1ED23BF5A2D925263F0642D7F9D0C274
AAC6D549981CD8A5A23F0BE5153792894E2EC1D323677E92AEEC7F87B974227E
87E49BF062A0768D650B6AACA3735000E477AECFF9C99670502B08373AEC3A5B
F90CC47BA7E64C532EAF889F14897C9DEDC7FA6A9A458600D94973E8E9C2ED99
9BF8DA8733528484627BC648CF7562D5D69CBB241B5FE542AED77488779362D1
86F069C5BAF6F1D488AAC19F6AFDBA7D2F9B0C79E463DAC9531E164AEA39D39C
8BE741364E315E7A1E4C54C87A44ABC9F2A6F66D76D0E3CA4C1729D61AFB79F0
AF65F7263D94DB7D90B5F0EB05D672139182B73887AEF649B7E572B218E736F3
ED7CE2198FA4819FEF76221162163E0E6030CBAB2F5DEC8540F7894F04FCE9F5
85789F401D98B421491A006B52AD6A3528046683C9BC1658DCE2E31AE8196F8F
6636B82C823CE8FE2ADED8C8EFC9ECE13975B73F417DADB522141D21710B9D1F
B63542C8AC4157640D52E8A42AFCC7E10C35F3688B13BD129AA699D04482E9B6
0B908C01494A6E3DBD2F5E24463742B088247AA031B16F50DAA186DD0C099E81
618AF2A19313E987E209E1D792D8A5451711BCF103F760B3DCB112EFA57AC6E7
964CD6B38742F325B080ADF0C9EC376B8B6CDFB86A6693CC2CB60D4004DAE5FA
B0AE8E0E04E2A90A30E488F7BFC9308C93B748B3A350343ED8CCEC5F4A502090
96F46D9CD4831AF0DB23B343601C76450B50E0F5BF3AE85F088C8EA777191609
979AFA19329ED93F01B02EAC7F83EC916555287E238C700A9DAD172D005487D8
1FCD7EED6DA0AF85AA2FEBDD9838DEDC52BAE400A2E89ACBAD934122A6518D66
83C4D7F48A0A94D2B63CC5849424FD0A6B0F8CA07C3E84EBD2B4B6FE4E93B8F4
CEBA2E66131C9991A6010809DA8292F21814EA7DFFC70F609B38E66AB0708C37
B58104B07E78FB4D48BFC86792426D65752AA5EC954DB469270B5C04CF7C29BE
51A9B40FA4A4AB4BB2CEC3DAAA678B23A7EBCAF98097861710D733B5510790EB
12FFFE9D642464F431CD4C5AA463BA71CE104B525874F9D3B5509288ECDB5633
6D015846230D6CBDCD1D7DA837A40CA0A4929782F67156F05FF785FE50E8724E
529DAE3946A0C3A1DC023320A0166FE149667DB0CADB3DB95CE2C74D300AFC15
844C6DE56949F31D5077D0D23A9F679573B02EDE5223B38D2B734D802BB36576
5D1D092407A2870FD52C24D1EE2CFF632AEC235556FDF36D734438ECC21931A0
FC96813D697A04B2B3F3B0817DDA6B84F38C9D6589CCEBC4FE1A2A0B8923F689
5957387686FA472B0C469D8D97C290149FBAD1A52548E29D4DF19FB9DC0BCF64
B60BCC727F9015A060C09502E182EAB0E7D0D01ABC1E310F7D2A2E68F3F1587F
476AD6E7850D0ECB9BA3BBFD9A5E1B96FACC944BDF8C87B00481144E1428E550
30F5DB1C8F9E3C8D8B59C972627399F53074495D51EFD4976ACCE231CB8A6744
AB00B028B9FEF09C60EC7EA62551E76D6FB2D12A6604E56F26766AB98A44261B
400B19CFA88B959953691362BBB1FF3CE9758C0C3DC52B3D7F98424284CD9A28
0EC4310D52D83966B6E87E274F737A4AD179AED13C55F5B2395EE381841E8980
62D65F691C9337CFC51240CB91FBB1F267C4F40723EC60491463F4C49E4054DE
782E2383D7A66CA87E169501CE5DA6803DD88538D8DD38E22689D398BDAD5C14
5B1CFAF1E6F7EBF70A0D6A872A0A9B9874F1327A0333D0EC5A835B1352397BC5
4B113BF9DF8F1DEFF432ABF3634C8A4ED49F55EC482057D17B020572B3A812A5
36EAAC36AE82FDB8048CFC554962D553BE5AFA06E86BD82AF43D51C0EA3E6090
CB145B94451BE0B68FCA43840B1236C9EFA717434C2A95D55F2CB445CF6D9FF0
4EC2312D219664ADEA2F03FA22E81726885DAA0773914440DA3C0787FB5C84C2
4367DD6C3156B4B5722E1E4F5B61922DC4A068F35B9E7EB17E895A9862CA1C88
61169E68CA74E4BB24CA63C80C5ACACBBA97D1003181605A1CE8F509585C0ACA
D8E57397F9B7BE089A6C9DEED55254798FFFBFE2C853FF605E31FBCA635DD07B
98A6C76FEBEF8651DDA919811856CA6D1296CA1A7BE84FE3BBBBB9315EA6D786
9633F5E9B79231AFA4555DB50C7568911F6BABF3E498F4996B1F2A18D763DA62
36DDD7250442825D7CBF851259B0F872D5392470A172C6B48B8FCC44ED1673FE
D8B164E338A7C1DAC3FEF6CB5E603B1900F9FB86718A00A4209FB0E69E3054BE
A30E37578F21DBE61071F02FFF48DA781EC323CE9F04A6940F9B3C12E2B7B235
D514B13BF3E33CA454879E06105E7D7D313EB77105A65EB94AF059C5BF3FC1C1
9A7F085D9DEC3446B7D38E746F9E30FF31BFC9CB72C04132239D415741E550C1
1B96F6CAE997608D08B5EF26C1C7317D6A8D4BF72887D480235BFBA5FE221F82
FAE8B119141D7B41CFD13556569E88C05183A6B338DD38AB88D39F5E6E251D91
D5353F9560C83A3304973B70E1A4CD198838FAC38B735B33627ED8F43A4AB37A
B6E02AFB8BBAFF629CFE81D098BFE50548926CFFF4C00C1E197DD46DFA6CB091
44D952186962C49450BE0A667820B7B366133602D52539A4C2831017A01909F0
12AB89B1A81E894F0EAD4570BD037B8DA07FF36A4879B92AD6F73CD4B2C393B7
AB69E6FCBEC915F18F0170C5C214D83E06D819D57FC59A35B20F39A901067B1D
A8BFE99A676FB9A026489EC583315A0ED505141924A434CD7FB049A99E548232
17DAA510464E27EDE46F568791CFA42223FE124E12F6D74C2B699ECCC1820F9D
053B6B15049418E59C5418E699B68967704D31695637109405150D9B3A9D82BE
78BA903CFE41A030BAED3FD73752C693BB69DD309851430179B57D2AC8E9DDC6
1C0E9BEE7AD5DD407E9C24B5C70672D5613B831E9FA76E8616968E6930E10860
868D05AC944B7B713B63DE9465D57A2992CC43893291BD393C3107BD10F058F6
1B109606A45F4452068BC04A6F55241DCB44496CCC13711EC628A4A677DBCAC5
B938C7ED83799F0A16B3A8239F76E1D3B34CE214709FDFF7F0C20B11FDB0F552
29455C24CF54B6CBFDCCD8537C510BEEB69D403D267D5ADDBEB1A48B1597EF3E
34036AD1E20DCDB36324822CF1C8E8C4B2768EA2843A256BE75DCA9392D9F6E6
4F47C889C7BF19449A11807963BD02C6E586FF9A74ED949D368FCA6CD06906CC
A4D5FE82E13E99FE5A07AA6127A870FF2B0FBFC1F2B4733850A3D613C536616B
1AFE92479384A60160D456FFB8E396FA1EC77D82963B29BB0ED1195074A729AC
1D46459A36D8F643413C54F0384C24BBBC7F83A3DD56F92EBAED840C4918ABF1
9BD44E890380CEA0B0E0CD7A342D560BF8BFEA6EE0A240100F8D5A617EE61CC3
BFAAF1B415329AFE5324BF98B920FF47C0265A721F93E53FAA61998C854A0AD6
7320C14EAF892088DE7FBE38740DCEBA79CD5F19620451BDCF64D88C040B1856
3BD2321E4FE1EC6A122F4A2B51C20F5947D2CADC897778EAED1C49F8035E5137
1E4F340A57DCAB2B635F85832FA320CD9FE204CF2F99B0E1800708D97515CB6C
F112C2A89D2D44816E907413632AB021E1FE2A443AC56DAFE0CA144AB9E02C21
78715C846C1FF57890925A192A2CDA1BFDD81F7A2FC4E0191694A19FCD8E5506
3239A22723DA0ADC91D3BA889382F85EA515D665F6BEFD477FC3D2D0497A8FF1
20E278CFCD460AA15777BFBE815955AEB9C37A069476C96F52F1BA59AA153AEF
A7AAA0B5DB37982080D7FA0C00FBCE22ABE468EE44F6FB3A2E548B4F0E0AB5EB
81BDB29CF0D16A941307E86B644D139442A13BF94279A4EE1F89758C33D6ECCB
05B249C95DE657CFE8347CCC869A0A5F9F1C2DE3E85E5AE3CC87A1AD517170C9
05FD301758360960F3FF142E10AAE08B2DA6E1F5F9A10B3B2B1F35F993DE1484
BDC0572CEA4B78202C85CBBA637B50BC24CADB53363B7A4CBAFB38E0E351FAC7
04CE6D25C16A19E687510AF5EEEA901B87752564280289D0007C741BD5C69282
459F7527EE2BE9B145FB56DDA3F2BB8E6DB86650D0E4B4C930704776BDC8F587
351A0F32470313C5919DBDEC7204E96CF547F56244DC683808BA8B03784EF566
497DF949ACF8841F302BE362D48DC9D638693F0318A61A06F26C99EDF2D3BC8D
252111E851822B7074F66D1400CB8B71CF6D6772E5E7742C652136415D8D35C6
D0A1B332502F48DB2F5696E24B354AD9FE17A078E8ECA2D832095137F162BAD0
1CDB801DE1C40AB059093FFB211A95E4F490FF3325CA67FF440FC36E0E801F53
7814C4D778A9C500595A699F25F5EC596E9DC4044DAE413B0EC7EAE15BCBBEC9
80904227C2AC4E082CEECB6A871D1C1CFF8537FC172298E39F9D5B838C961988
292C1BB132ED87A5274D0CEC8F7E37F5F5EC05D1D63DFA3E63252D89DD8CC12E
79ECCAB56D0C25221C40BAA4A5324B79BE99EBCC1B00EBA7A59C6F1257E5E0A4
FB5A8D08B96311C845ECA7B4FBFDDB145500D77A97A8BF392606010F944ABA54
37B46FEFB4C4B82001A8B4E7DF01CAE49DE944C25FE946323AEDE5F026FAAB67
21853E0A4117D1B4B6FE63E36597036080C9C93BCC120E2E8273EE34C3A4EF08
8BE46AD9FA0D3E24F2FDCF57193CCAAA36A4B77425FE929D11197E2F42F5363E
6DF22BA29E867F335A421F20170A3AF187C72B119BE5F19E2D9777719D6D1C4D
5C5A20DF7A300E7DBA6370B48142B747B4373D23EDBC3BF495DF819FA518194C
6D281CB9F6F790051CF881AA21E8523BC287BAFD0D4CB5B549B69AC94FE49798
BC49D9D9D49B9CB9429CA197321B545625093729F5BE7849C3683FE698C4C99B
11D90001545C4F353B39777EA791A503CDE266BD99CE1D2976040390C6BE1938
DB4AB8F86636C0AEC29115B1A100E0941B86A910EC9C9749EF2864DAAFC2B488
6C6E9E9D214EF74920C44F798B2719D9BAF6807337B8BBE3F3002874511CD9A2
CDB39495A13475B594401F8BEA9ACC2CF2FE7F16ACC2F43FF9384AF0562C8569
4C713CE959E0FD12E786E0AD015C78FFDC31004182ABFC87710FA0AD8571707C
F683B84140BCFC5ACB0F725E26593BEDB115AD90FEF76D4B8F4E096E2029E3EF
35032DA7EE65899F4BAEBDA75217E0B805B6ED96C2607A0F1A814D91311F03B4
599B2563D5D0E368D6C6CC18FC4E7C07E9AA1F4D9C65C3A5B0D929234665B1D2
AD8D5160C7E9F656D93EB214E1FA04F01B66BBDB0AAD09C439797D92E1120186
B88DC96CED6B17F42258D65F1FAB9FBBE250F5A6C3D994EBC7F079E809BA8EB8
6992F1655E32EC0F3A909C9E8EC0A1213D3609D7226F568BA8A3E67E4F436A7D
FD63B73F243830183573838E83B1EE3C9854207B834F7A3F403F59A94BA9B253
B9A1AFA8B821DDE2F0C56CA3808FDEC5E0121F6CB05B2F13F52F77EE26F3E99A
3E422DBF10D8BDD44A2D4BC384F0CB459491C76838F536FD93AA48815F60DE47
FF22A646801EF848397FB57CC353D938E0D9154FD2BB8D104223BE87991F755B
2DBA4BD765F7A4F966BDDBC0507DA7B048F6F0A0829375589E07DF4BEF2EAC37
E9F37378901E11107F16AD70B17B9AFE2E860F4D6021117907FEA549013FD25F
743FFDA8A8C3C346302B79E9E395F5CAB8B4337FA560D02ADA19600C8FF1598F
39360D40639AA758231303650FB2E3EA7DE767F74D6E84A91F92861BEC15CDA1
4FF3FED905D29F842D1386163DBE244D3BCF71C666B0A5B524E738B89F8D9946
33E3E7682A570CF3E3C2303CF2EF210D0BF5CC1901F96732A98009CAE553A317
E908C6DA4596B2AAEE63B34E5735F198CEB491BAD5520D28288FDA61D5BE5A81
0A7232169565A5DD0DE97BD4B5D31DD2AB3A158924974C6CA677643FBEC5FFDF
853FF1F6B0E45E4BE3E27C553D7531FC15E50A0184FC8E0E3A1B1A119280F511
C3BECE1822371B61F012CF18F19B6A1A1C1BD83DB1393F038C937F3EE4F5006B
C4B6D0F070BC75CDB41BFAA1032DED90A59EA43320F4280071E75171D49C7184
2FA5F5B01C531E2A766D5DE4DFAF25B85C69FE5108626CDDC9D3D6101F697B09
48C4DFEF4BFA0430FD5C5A29242A09645F651BD5098F05BF138C75E890550774
1C1F981D36DA5896DC0E976980DAEF12DD33C53EA5A6062DBB19AA5F78C06E11
E8733AF4185105ADE2AC03251048A69B7E74E20C2AADB14A7E1E22C4D14414B2
5952FB9F925B1664907CA473A1FD2E01CB1197990EDF8444CC83F1AF7B279352
13CF690386FF773A42C48EF4AD284AF072BE982CEBC1898D2AEA861D0A93C641
9A595D11230573426A6754FDFA0AD910DDB31E7B4B4BE5EA212C4778F0571827
0018A852D6C63DB94895B33CC8C54E71E0756B492C763C4E867062C7A01A91E4
BB031BAD701C7BD1D0505E273F6BEE5C42399F8701A2D48B53A5F2B5EEF8C116
0389165522669C4030E2F0216F900B46753C7CA45D103528A79957F08BA5661E
890CA864D596BD43683CFC0900E0E011E8ADFE1DF19CCB2D51118CCF9BC2AAFD
7057954894FA6AD509AD38F50260E1792E31E4E20DFC391D647AC01C9AECD269
8F5B288669923D064C63BEBD65B4DE6458366ACC525CC69ADC4C399BC29D23CB
6F7A032E5EBA6FE6AEBC73D95D187EA52C2DFE95F7EA6A493EAD709322CA41F4
85B59EE7F1F9363CA966EF360755DFBF7D9A9488A7CB94C6F19B2493E5C30690
D68322F53C06880A71972D27B22A652AC7CAE0A87B5A0D8A371DBAA2FE592ED0
88AF9179C8319500243FCB57788C0C2E2C4BCFCCF0D6A762032A3FE5ACB41FDE
76C5AA5693DF81DA08CE18E9C45DFCC09EDA7AE963D1D391B205364B95B779CA
6F39929D7E57B80AD9F009C1B5C349CFAD8F885A3D4CA30C74613E0205AF23AA
2212D7B1C75D54053884EF88586CCB05FFC5891EEA9F0753E5FA7B1B2326F31C
AF13F8837BF5BD6C157FA02C1092D67952B08A5ADA04CA88C6B83F3FD610AD4D
7A1CC4D1B822E4B30330094E3ABE26398BFD765F3320924BC463D8228D3EF153
54BD07CA101FBF649A8F4E6B9DD9C3BBC4FEA8C2D1E5F26968F670B4A317F2B1
32400C3C7E12D4133CC51FEFF5F61EC846CEA41FDBBFDDA32EDC2824B00EDA64
442DA36262475EA8D6CB94127775162D04380B6A6A8650DEDBBAADED2CBE7650
3F3FE34DF9CFA2A2317D4A1D2390B36E5A8B62F31D3438BEE0CCE92D425DEC1A
A5CA22093A222AF420A9ACC0C8E0397EB5BB488D476D4EFCA5BE692C241108AD
B1ACA0A210405C9B5CDE246D0A15B36307EAD2720BD967C4C9B9F35304E24275
846157B02B1C6E9FCD7713EFBAFDE51948CED6F7B5F83024E9A3C46A12CDC92F
67387D81D444E63815FB24CF67EEF52F9A6DC92D19E70D2CACA87CBA61DB2FA2
0868587699A6BB8989F98B1BE4A9A869F8823C1F878A86EAEBD025791900F35B
D0FC57252612383FC19D2C56CA2CA535DD667C5F2CA7DF4BDF61FEB4AF5EBF6F
08D57FFAE34BFD1043D94CC8A34EF1C8404E486B51CF84F064A59940C67BDA61
16DB7C7D20B4330BD116E08A716D370F8F7E41CD376520CE39FD2A9ABC0B9856
655F9D9DA1ADBCBA5EE8339ECECFBD03C4D31652F4BD758B0748B26C9613A649
DF9D95D5D24C4B6B2795D94BDEB015C731EDF9EF916C94394D91C7EC0AA568F7
684A6B37CCE936BB42EC9B09E4DF37F7B8FD8B789AEFE644F929E005007E3694
2154EDE3A9BF589E24299FD34BD13605ED1672C9A5E9E34CC6B6717E8B794AB2
DBFDDF3A89648C906439AD57F5CC4D74549A52F36BDDFA8FF067549F3C6CA9E8
E36F19848614C5B184B42EA51452F540CA75E18B3418B6E63FA12606BF77E16D
1B038784CF9B7D4F33888BDB1947AB4B0247B4D041902FEF9E9E01688BF7A6A1
0749DD2BC565ECB955AE7E473476A0EBF03E3AC9E2D08746E18A701332225FC0
4635FD61D65A26527DC055BD861A6C23340D68B237D3C3618F2C2F86FEEE11AE
5BB62F5D5C0694D0F15976CFF3B13A19C14AF6552E6670F15F9CC15C9669D200
9B137EDE2064C8A2951F771CC656BF21141581DBA2D8F195DEED3CBD04A0149B
46C785ACB631650D95BCEA3BD95E9CB117617DB5FAEFD0F1E5A0647A794BD741
DD07AD6D39661CD267430125AAE44673821699EDFA81D9CD2E754E54C923F148
3F71B646634A4C5BF4B2C535FE5A29973E45876D27C65AAFEB563AC785C48F28
9CBF17C55D7A56A704DAAF9C494B9B47E1D85A98CD8D71BA013AB81CCE05B318
E4E966AF2DD3D0BB8F68DC37DFE2A910C88DC88FFB06B30063335EBE7CC569B4
CC25D26F4730ADC2846D60742BDA0722CC7D5C625F67192E457356F108D13FFE
53C044B40B95071142C5D976C36BD291C2D646FBCE8D38053537D8FFD3D7F4F3
A279294C9ADD9C3208251B6C177645D222A0C80BF3A8CCA876D474DFEA1579D7
9C7A78AF586FF0993EDD8D59CD411D5D2587F435EE214B8E33CC5DBAF0CE2FF3
C51F0E0A2FB2353D30CD025624C7B916A90B3FD13A58BB2F63EEBBC826E2C4F5
8AB798EACF5421AEFBA84C9BC4094C7091D3CE68F936908AAA25DA5F0B00EE25
B590F30CEF3BF5F590FF08EF7ED1A229D28B8E0E4568B3E086A102B8737FB9FD
AA0075C1FBCCBDAC9A0CAB64076EB9E9DA323F057BF773EC435F824A953C3AB1
F0B3CF95A2C2804BB5EE7BF0DBCE700723B454A8D9833B330F1AAA69E59FB3FA
6634CC694638F582CB1E6C7ACA5E857BBAC1D38941B000DE9E9245943A23E881
1E23AB283A35B20C5D87E15B724B62BB0C18F16F5F6A6EC1C3314567C88BE22E
0A01D250B6208658CEA6EDA0C0E69FAC766FDDB8E3D2C9946D021BC9F43F892C
EF56B1BF060B39D5CD50C2EE66FDD6947B83EE6F0FBC4E20095CE4C0F54C84EA
F18C232C028645A5ADC5E4B6C66AE114AFA7D1E58696A70135CCA2F848BF680A
F03858590E0974F2BCCFDD28FC5040C8E79920BFB188A6C909313B76269DFB1E
0E70C3EB905A56A7460FBC732DC15A037770B423EEF91E8CBE380C2EC84FB6E1
7F418B7300200F0C8DA37EFDEF65BC76D277DB7B455E4A937B004A3DC9776C9C
34508263844E00D8209A0D7CDED19AF16CF1A83DDCD78D676E71B6C51A64A87F
D82AC7FD782B89275261B6783FA8DBA0D35DAB6BDDA0F50004527B99DE185059
049FC2FE51835AE909D4638E8EB11C4114060FAD5D2A483EFA78F72F3AF83A22
333593A449E15701C778C5D004744F043FAB21D036E1017B60DB4C6E3ACCB243
FE9374F4B30C1A770195485E6B1D3E4830ABCB80D8FA6CC4AC85EFC2D28CFBA2
CA28A13B812424BA4402FD140BBE8806C33FE8FDA8E6703D5C9A2EA5B1E4860E
9DDEDA522704C5A927FC4F091B5900B9BC08B02AD6405D778C1749C31756BF9B
F02D5C797218E4A3284605BDD0F5D0E3024F40456A65D9D5472EA4AB02F0D34C
0B2BC6AC92B769213ACFDE70EA659682F45187EAAD570494103D598F013EA141
1EF3726309D198B7D05743D17711B8E138E42C9E9B2D346DA8E6EAF582DD36C1
D29166CDC5A658EE2DDDDF061E63B1BA2716124F6D3AC184BDB890A0DD4D7C62
B15DC40A9F810CB98D32B706A177AC31603F49A26F9E5F210DF60D4C22BE50AA
44C469EADEE3FE6E519F3DF7A42DCA87A9000DD5DAFFE353929EE3344130879F
2032497585DD01A6AB0D63050DAFEF2B2B970EA384CB6EA25D04E27AD6D30909
01719F072158DF40AA7C78D128AF38AD368ED4F736708280E7BC03A0FAFA64A7
C5FED819BEB1A91743CA1C9E6512F0FA82155AE155E6E458B4995D760C77B167
14C321E6E225B5250B8DC675AE6D23B7C82A5D1CE3C5DCF36ADC1931FD14E4A3
933805DAFBBD58C272D6208492E7A448B9AC27A37B81A7C0A7618327CF034A9C
96B52C7C69EDE11B274909FE3B79D5E020790534D6B52A4C6EE60DA2A9CE7073
E023A480EF8863FFA943948FFA7E16597B55FF86834F5C97E0891F9695060A31
89700AD11B06A9B43333BFD29109081403D96CD219C780181F8034395A1BA59B
325E5240139298877221F88A95C3B351AF4F7F6A0DCE2B0774EC139112727891
3456C5F3CE6C9CF23CBD507627DA646C979B95C08D758FF6E6B13FC009410C40
AF15C299D106B4762957F9AAB35FA5C74AAE3A3C08417119CF95677FA160B0B5
4B3C331CC8DF3D047F8C04BFBE22B7BB19B27498D264E5A199EC2ECD29C06D1C
6C4892250269E6CDA2C46A1574A39B61A5EBD0D519ADA58003995587F49909A6
399C1AC4D093AE96F31557A70C4542276BF29DC7C9DD280AE72E332B074E6DCE
1DA35C76424D7622840105B28113B5B51E066A91B8D7347DA871E7A52A069B0D
6D365206D43C86F4FA49723381B62D0FCD262677E3328017107CA00D0752C1E9
A19C49904081F0E8F9D7DA279097919A2254314FCF21D618A11C8FE5D40C0CDD
3716B714C94D0F9376E878ED733E90EF3EE62673FC1B354D93546A29395A5BE6
6101EC0A83496AF08772E3A0080CF4DFCACEE5513EAF3E903BAB38790E872974
1C15EBF54C4625875B72920956E2CA57CEFF63AA97377436395A3CC04D886FE8
0B0E447A91BFAE343170BB2E7CA8EC5A25E732C79C2AE5F3261266942D6FB60B
927644E9F7779AE1BAF3B8AA4BA26DC69F2A2446FE9687C6122F18ABCC0D24CC
7CCF80E57B87137DC95F002EE3DD35101D1DD0131C46E14DC4AA757196F84046
57430F1CEC5378DB3CCCC501550E3ACB7E4F31F88A4B4CC91386C4A6096CE3AB
0AC6745916FA18BB8FC92916419F76ECD4DC9D1D8E6CE20157EEF9F11D9AFE30
0853D10D3182F5726157123FEBE6D71C9542ECA2862DD8797666719E4F49F79A
A169C792898142A856E41F5E18106932087FF4370D1C25711478FD4AC8E03BE4
A2829D2E33F96CD42386C234A9447B82BD519B639D87A4B8D0506B959EB1924B
D4198FA0051E364D03B20E1E0ABFFBD3B6C69E17A074031B8EC4BFCCC16DC273
D4A0190EEAB7026226603DA37D8D9291E25AF279829F8D47B16A8D8C6ED56E08
10AE5994B981AE7B6F030E18F7DDF584AC60242A4A4EEEC6955407F7993C2377
B237D578107712792333087E98A8C64083C6E51F0E0BF508297839A84AD35C19
48FDAF5135B23328CC9CEAC2D7BF32B597CB5CEF31255442BF04AD5B8F08A115
B24EE66E1D478AA9DD9EE23415073D9ECE4E68732662EDD17BB9E76C94149A3F
1E42FEF7795BA4F9747FCD772569E557E716BCBE5A06689FFB85C8B0DDF9A396
3D0B1161934B23A5C5C87D078FDDB00C2513F3E8A5A080D9ECE69F8E6598B835
A0B93D8ECCF12C95304933BD4F1721E7087D73BCAAFC7EA12474452882F8514D
0FEFBBF1F53670535A7DEF5D003947DC745EBD95BDA180F1B054D57623F833A7
F9A20980509303B9B8280D7192C2790994FBDEBBC23000273645933425C0F59E
47609DD055B0758CC813E0EDBE55015C47BA817A1D303541DEA7B895CF4D412D
F23AB6A943C409728B918D946E250F5668637212372B0F67F973CD532EA2325C
667ED8305E2C673BDCC12135B2542128BBCE02EE3902A286E7ED3B55364DE800
35946C6E3002646FCD01738AACB9AD52BCD0D01913D39385A57F9383AA235717
AF84AFBF5D808D32048D67B3678A5B6B4667C90AF2ECCFAE7401CB52B5B4BE0B
F09278670404E541771CDCA5BCA8F492C4ED21BA36D3AE87B5EBACB8F10A27E2
B97314A9BFED3E1145BF13B2EA95C35A44216C939D3F93B323344D1A9C173F50
1848DC5BE00E44CE535FE171321A699B1B27CA6432E26C9F0048B1100AD729F7
2105840D01F61B3059A47DF9DAA4286057EDDE41FBF8349AA98AA567F1ECFB43
AD7CEBAA1E8A475CCB45C635B7E580EDC77556593EC3164531A0E3C211A89E16
DE5B8ED4F68A37829DDFFF80CB9DAAD047D01F2D9B8D5BE71DD21DDF88FA9735
C944C0C975D5A3E238F9B80DC4EF386EE0CC9986F58B06D0DA667BF6E56FCEEC
0857010504E234AB22303AFEA52BD81FF234C966649A77417D18D9545B149E28
B2800ACBFDC7E518F3F554554B03394883C0CBEDE00598E069B1446C298691FD
17A0A07AD7169CF55F611F06AE14190496C44A945B37426145BBA12B2D093BC2
EBEDCE84577FEB0BCDDE70E65ABABA125A46A02DF22BF0292695FF1916045F61
DFA78F42894E2D068620B81519DC0BBA0A118DBD212E5DFA6D0CEE8EAA1B8990
B6E201DCEA07C7262BE4A2247CD6B5CF20B118BAD6AAE5BDB181451800ABDB4B
5B7092FBFEE1A7B124CA6458E9F0DFEC7CE1E22FBB9CE97258EFA53EEEA0E6A4
A8E3C8285C3B6FBB740108D6BF77CC1730FFFBA559EC2F9D9247D48C8C56B91A
EB24671BFA2BF8B81A13506EDA3DB0990EA273A7778D91AA0B368ABE63165ABA
1554FDC72DA247FD073C61721CE18D24626B10CF6607F6D135D2BE126B6AD9BD
3884069D56587C93DA9AAC25EB9486BA8AEE2C1E76009F6952BC47860BF5FA55
C06CF32E303998F3E8A09BA5E77438F310BC25388B5B6A6A2EE27DFA8336833E
6913D9F67BC85294B2FC7C63C08064628F2374DF31DCD003CC0056E6D9A8FBC2
D5BDBEF7DB4416AD0B4DD9C771B73365A584E5CA19652C8381AEE48900087667
E98E190D53DC0BE8E79056CB574DC92A7889E243D468F960F9D49343EFA20A6C
DB681EDEB27E45344A8C4239442307A016E9CB98CFA325103403E276DA3BFB75
99B02E5AB2CF9466D3E50050249512199BE9E05622507B69E307EAEF60BA443F
E0DFE356789B49453A7585C0457E0314A536DF86B1015B6CB7AD3156BB7D1E5F
29A28CD3D4A72CED43DF2D6C4D0EBFC8B8BACF1AB120926E502E1BDA0119C2F9
3CDD131B99A124DDD44437C102E4E7A65267A01F77A38766FE9F58D08A59121A
69F146943B04FB5DE4C253547C115CB42E6BD2AA01FD829D634A5382286822FA
9371A4B39A4B4253487B26DD1A268A3EDEC0AB2D5635020D26239D40EA7BC473
79347C02B182A4D5AC84D952FD1D06F8ECC930DEECC781F4AF14B83735EC7E3F
6BFE3AE680C73F50DCC28AD8D3DC32A37C5BD00D4C31FA61283ACB6059C44683
100E558D209FB3BA0C5F80BEB2D27D8ED7FB31B3A12C07C60ED4564AAA5A6C32
08FBD2E89A0D4BF7F478F63193FF3E71C092745837768A90114A4CE06F14613D
43E5654F83A4CCAE29ACCE8951B0A852BB3ECC7C944437CFCEF042248D5C38C5
328EABD624AE34A517DBF9F13E4FAA5CD6219D9638B20A63B9445DCCE016BF51
BE29B702B62C6A115F816B471CCDB53B02872580BFA07D77178F10606A993D30
BB7A50AFF8681631515E174DC15CFBA2F41983B1FA5937DFC7C88F3393965BDC
04562B526E4E228F7CC573BC19F7DD58D7B7A624A24E9A4DF4BF9D90F444BDD1
7E199FF6A1B41DEC3763FD1C957691D10F8C2A4FE93E9BFCFA2EAE5A650E276A
BAF02E3859CD70777E6C71B7C6B75269574AB9877039FC81FF973E5278EBA942
D071CA9AFD1D5C1BCF3F52767D26CE0175A90147C743B1F009F0A9D64387EE4C
0C1452DBC23C723BE0DD764802B4CC15603CBD676CD5CD8416C343D3140EE8F9
D534289699B128898062F8F8B231C05471C19ED3B2D1640412BCC604856C99FC
EEE4265FFF829FB33073A2C9ECC5936B87BF165BF29DE88F0A2EE1F11BA6CE96
2B25A77CBCF6E995DEB00F42D0CBEE87AE6DFFEFEE71A601631E0DE9D4319910
AB02CC5D39A33CC7E865636E5CFA757A3711B5B35857FF8A64C61D4CC7B6184C
0E42C5117045440F071138FC4DEFD475D64925937B49CAB7659BB902E7822176
30CB9757F6DE10E95A014370B9D18D28B654C63AEC5410B43EEAFCC6A7D1C4E3
5E4480D49744D8B3D3EAFA28906F0FCB538BC49627E797DAE6F164AF68DBA3A0
74C35AEB4B512C2BAB80F1E02B42CED2A25744515B675B1E062475A8969179FC
DE51DAEA409135DF471D50318DCDECA3418CEF60544794AD49C0B3E349EF961C
00F2FE39EB785BA1CD6B061E41924B24EB35D95D0BAD161F948DBBEB9B74499D
603D23FCC470B003AA3070571713F271ECE4EA0220FDB10E7F11EFC046DEB594
DC4FCADE53ADFA5C5CCB61983F4A06C9A22507FC230524E59FF7068D53C8D5CE
9633727E00324CE405BD88AA32F85D8404B73563A6D55E978B506CF791B891A5
D375EDD27E2E213C371DCD8610DE7110A48839DE496ECAAD837F8C78F8E98051
C60BF5BA4F2DEA1DC6C51E222E088FFB529CDA10017435588087285FD2846C85
6482EE125C24085C55B3BFCA39851B8492F101A26CA3CD6DCA45B288ECEB0407
F7E8F8FD611D5EFF8117585CB9FA77105D044828AAEF3366A4FC76CEDD52F711
2FBB7A260F92D6DE01661C7858A1A171EC53F4FCFA0CEF03B9D218450070C52D
D0F8CBE72CA9D89A5EC6619BCEBC19A932810AE12DC0E2B5D72F87E627C90D48
4D444584862B3862E97E424918BAAB58219EF81E48B6B6A5B60FD258BCE6CFEB
C430167A089312C04E1954620432B266A48DAD4271D771921F0C7E0C82F0B8E2
C8AAD9BDBD17BB85D802FAC442571397230E955CC83141A9BC44BD7047D38D39
1B41CA255ADED8A60E284457C3C50504B41C5743432C586405B3A9FA46E87921
B656168918EAA4EA7460D4323FE560279E15EA836E8F3424414F474E1559E16F
8FCA432D1A837079E38ACF1F25C77253CFF3A966AB2862E7B5E2FFA98B8C2D2C
8CF01FE8C0A55CEDAD51D7F4B3126D81BB3B7B1AC4068B8637ED48D6E02DD76D
5BF15540DD278DF0E246319C65A26CC42F50F8AE4D16FE99991BE3F0B64FAA27
1DDEC0F7D5FD3F241A572C594F0FF2AAA2023C64D9EF2B374AC1CDA95DD03053
3625ED6E1C3122B9EA5EA8FC441D9D2124A842857652A8A13805F6979B763756
AF4742A844BEA3D543F388207A0F0BDEA4EBEBF57449A3BB6FFBC0BFE58EDD9A
ABD6C96002F8EC33E6881C31BF8E21696ED5DC2BBE083112E6C4D097A8E0B55D
A6F184D3C4DC493EAC533F6C71A9CD5E741AE4DE43E97BEF5D17BBE47BEBBD07
669E8156251093E9583B0F59941761DB5DB86983087F0643A4B5E145CF11AA52
A1F23C34E4D3356891AB9210BEE1FE1BFDD41EADB28C4E2AC43391144E700A79
765F52E0A54AFABAFDE0FEFB987D12FCF11A81CDCD562DB277048A3A194A2890
AEFC0FD11022E8C21607030F0DA31660D52F10755BF9C5D3A48EC7FC6DAC0830
E4FC1A51D275C860484E9996BDA701567C4A59F75ECA32D6C3922E3691878444
30B56B8EF2BF18A79F026499C7FBCE6DD90434D2C6361B3B7086460E49B3DD7F
35C2EAC0D0AA1C253F6D0A316AE7C283BD9FECBAD2A72C6B55BBA104B86C31E5
5A4E39FB1461F7FE8F28C8E11927BBF9CC4D64CDB3AF877F5F4514E90166C1B4
8C362D630CB951FD800BA3D10415F780C2803E6FD0369FD71A7C7F1C5DDC8A81
01D1CC5EFD66405BAF47BB5598AE9DCBA1E29707C31DCF1707E4D313328D11FA
09A9A7AE26BF5928049528D51AE47407ABDAAFE8ACB8A83F2547DB80D87BCDA0
BD0B8C004CD7E68A77B1B9103327F4907B4C916D97DB3F44CD637F9512A8920B
10BEFAD6130EDD554CF2208796CDAC80D2FF360AEF328EB9F8CE73084D17BBB1
5466293ED277D773E9804CB22F67DE6D9760B83D7AD58A00353F160620A083F1
BC55AF4A357A90ECB9325CD9EDFD49E89089BCEE862600CFD0B2F71861AED2EB
783CB2326AAFE225D6B9D8DC1427FB23437D31B6574804525840EE6DC706F338
B1E4E33B9D79CBA97FD13E263C254924ED4D9438F51EA69B9D8B7853FE240C37
F49C134362C04F6CF3C3C1CA26614927B65D6819F69316B5D418CEDF144ED67B
FAD9BCE6FE24E84D0FF8657DFB926676C568529AA7F8CE03658A8ADA878FBDE4
9802F2FFA60120ED56A4F4CC4307B21E564082D16A37C106F90CD7561B80A110
C95B4B4011F09ED52BF61C75ED2A3FB2AA0ADF83EC795E08D6AFD2F78727ED99
8AFD87F989E699E79797EE9007E10692B9E3099D5BF248E23E85B406A3B8A09B
DEE173A5157E49A925FFE4EE5CDF31E4B44008175CC0394D0EC9077E9B48C7B3
74BE75196FA36712435BFABA4787BC0A30EDF826E3F89818BE0E749BBCAD6110
DCF6E779978E708FA406CB10CE58DFE9C34562BC308DAC27BB7700680D76C499
9AE5FDBB1C4AEEF98D523B546B4C8374A0A8992E48FF345DA5DB78AC8E0DD07C
DEF518B2B97271BC484D6ECB26BB61926D0FC3999B4D9A3B974F05A3BBEEC891
D3B3CDB59FA479DF40F84D468CA8C3095C565D85B968B2080AA01BBBCC6F4FB9
157A731FA0A7591670AC1E4AFD0A18B1EE44EA733071A7DFFEB74F05A5F74731
AB3F3B5FD0129986C72D3D091B4277C55477FE3C25EF465AE1F5D97CA8856A61
906BB78AFEA9227390CBDBDC7ABCC75AA0559E001D98DFFC9F12D7AAF10B9E94
4C9E56DD6ACA36022EC52802DA0ECC9E586740E5B9994B13D1CF232030ACB2D4
20F5CA96376843545357ED41BE8C07BABE53F114CD847175810DA1C729614A2D
08E7CC20B3E012EE4C142E4DF704075766108C3BD5E8AFF3A005FDCDE601E8F3
5F8B1DD9A781FB7851E4DDE83CDC9A184400FA67230E390230B01950FC6A6134
BC46EFB1B298F863DFD92F54BDA404FD3EE95D7173F487FBF625F17BDA916EF9
1324960D56A9AFF57DD4B80F3308723B82611C0304ACC64063909D6C1D5B689A
B74E55FAAB0DD7DAAAFB1AB8CF5D7A92E0297431056D69FD55C0CA00A49F781C
3E2E38D3F747B55BACE4D5795AFA7F727C21B8789BC069A8BE8F8272277A70C5
F215B91982B4A9D726DF73C21A12735DDDD75F4426C6E0F9C654A4E525C470C3
586ABB59D7FE9A952250D2EBBBBEDC3635A8B65CC41B2C589DB96D6E1EDFAB7A
C1A0859D43CF5F6EBCD0360E51011D8D7141449C352E96E3D7D4462C5DB38075
D8135E08DDD43F4C646CC4F2BA84384E6D81868FAC79DDBAA9230C3B2C7DF4E0
E5A7567D931A8A33A24C515AD76B4D9E0C1995CC8D5223B985C793A1A661F34D
81CB0EC900DC331F36FD47C40FFD7564001286AE4A03FE4DD281807BED907C48
FC3C14B48161F6B4575AE37F41C27F38B6F70D99F139988D4927A19DF0BE5C67
1D7267F108F8A772165E412DF15698B7E4E297C1FBCFE7D11C9552027B7A48D9
705EA4DA6F8B45A4658A81071A996608DFDAA5D89BBB82FD2028054F83EDF6A8
5096008B8DD316F0E9001463AF7C76263C4C2DAE8E5FD35B632CE1239C21DA27
D24E8BF2396E117213400E7DCF451A3367FC1DF575732CCBE0D5EF4A7355B2DE
9A57342D81B89E5F837A05ACA3D48C9C5943BBE991E81FB32DE7561327EF871C
8FC5BE01451566DEA2EF7704C3C0852E61ADA197A1DC76CA38FAC6B75A3D593A
CD5E072A4319FEDAD6B88C777A2150D7854244BECB48B7CBA27B7BFAC278FC79
BC36F8C92A3C2E60357ADC4336CC0B17D1E8FE502FBF08BE679A6676DB5780C6
C2C446AD7AD4B729CC18A938633515C21EF77F6FA6E634626C9969DB41783E2B
CE5D36849122443B0665E7097A6FC07236EA1F39FB546E133D658DD965A51334
A7F952783A51198028FF2CE7E612EC914E3E8B3FAD891FF1389E2C763CBB2B20
18628A8DDD97D5607CB06F4EE214D4FA68B7D692BA7DD97DC04E34F7D825578D
6ACEF2F7B0598DB68C24B52FE8DDA5CFB4AEEE7B39641211DA0720647F927A64
7584C0672882704D07FAF595777D15A33DFC6E3B33530EE51BB198B8AA80010F
A6D7480A18744B1080347DB27998B22DBFD354D2576F356C14DF5074EC1B6BE9
E95AE73D04560CB66D100FF426B2F796326A93AD0CF31A9D9DB6DB6BABAAC831
0CAAA370E5811C18F4979C7A5CA5D52FA148327774B392577C33EEA4ECF5F1B4
AC620F67B494CDD94833BC980F2D3C59A5FE892F91C78502A50730F5DA6A7F93
D8BBDAA90EF7BA58B49D6FDCA20CED11BECB1CB76454554AD530C14C43DFA94E
22917D2AFEACDDA5B6D99148EEABBF73DE0434D2C6361B3B70B4174BFF6DD268
E766C2F0410C632B4B633B563E3D1D2FE7DEDECAD5C5842F96A853C273F3D839
99DBF6B36297A30CE5F2C148510BFF3B6A576CA36F5700EF060DFA5DC5D48BB4
4AE88C72D20A390C7F5CB32EE6BB8B6F97D3B34C4F0921BFA53BB601D69E9056
E3343311AD586216D0048E23B1DD05C834ED7A66F2B7285E775D492E2B2799CB
6D330BAE948A1972159C8C84F65814B403F5858C75C04756787B9995D377E809
2F12A9FE7029CE4AC5E48D12FCF5E8DBC5D296FC5640EEE37BDE4F6BFAB2B7D5
0F1E1430883DB185342EC978AD8C0AE7E3AB396EB590E15FC5C17057083D4288
275074EC337FAA32184D3F76CA90D54107017696FBA131D87E6053630EFA265F
C3298FA112A9228025250AED375E3EDD1157809309252727CAE414F6A7AAF7B0
28986A17196CA828AC92634D63858FF179E6DD11528D66C5749C790C4393ED61
C431C4444DB124C33751243695B6B50A14BD976716A4A16F61D4D2B44A72B66A
0E3BD2CDBB2DEE989C88EF8E67879F795A4B79A2ED955B38AA49D69F2E0D3236
A15C1489766CB4299585BD1AAE2AD138DB7EBDA57F69C5240060702D112DD2F4
2A8245FDA145B8BBCBA882CC8D7ED5B0E65F3C7F1382D144AC175E42FE1699DE
864ED1454DB080549A05B3C5D2ED08860D889D84C37554FF3505A3306B72C8FD
4B6A2FE36D86B1827915BB42A14B9DFB1A01970A2A114628A24E321F07E775D6
3C379D9F9FB2D1586C911EE2CAAAEEF1E7DED1C6B36119FBFBA42B3D8D4D0C45
55A5FF114E3EBAA962557DA97214B1ED76072746BC0681BDA671E541FFBF3A1E
370568BE68F9DC207BB910F33DDC421FE8141D446C8037320687601BD8190C71
069F8C01DE2836EA5F3ED4728A2D9A2F98839497E7B5908B7A5CD01CD9824641
891BFB989F7294B8795D648E8AD67C800D88B7FBB7E8A55CD0C946A62482BA87
1FA41D8BAE375E6148263D3133C7209DE20F8E81D2AF1A05B2E24E7C431B4890
CBC5751479F7CCD65EB846DF5E676902011243A07B31FF9674D00848D5186373
CF3E8DE5A9C72D47C65DACD6CD5A9EEFC1BEDE9E99063EFE816F3F8970EAEEF1
6B435B8B70885D0A75647E031C1C7A4F46139ABBD778F6641DE2DBAD13609E1A
28098C80EEC220D9F3EA0ED3FDC2AE122EDFD0F6E5C03048E1A1C14191762978
98C69F9D7F40CB2EFFD591FBA4091D819A33AD678FDF99143F1B417A624EA055
9B816EC96BAE7DCAA37DACEEF45C4D03ECB3E90E381644B7D3A518041EEC7A73
964C8361321B6536B8F8CE02B455CEB01E9DF54C4E80E8ECFB66BCE5AE0C18F6
55ACA1339E77750477F5BDC31354C37FA6E960944F9DE87783202035D9E91C4C
662EAC5BF88E6F9AFD19964CF98E5F6CC6ADBFC0C948E514094897E1472C7025
D91FDC8FA75387C947A0680571EDCF4CC64B02662F745181F7B790320185822D
BD8750C7035E31E42ABE5FD1C3454B85B9AF536A1149EAC5CA5819D7098F7C97
0F382A5CC63D52EBF391EE38314E0752FBD4F15CA3380292CE630857FEE6702C
1B38D85578A1B3AFD251A22F2AB50E7568DB7C4FBF09481FD3108D07130E2531
1E5F78A2D136458BCCE372C04DE89D0CEE677D3B314A5F395B745089C9B7DA26
E1A5DF247C8B085849C1DB46C03DE99192E4E4CE42FA3737789EB17244655677
098CBAEE6B728E7618610845A18FE7BFCB549298D5EE9A7DB22D589578A3298E
39EEA940DE79C0FA17ACE123D21E76D72727908E2ACAB16A46E7613C66A29889
415B86F2D4BA47768F4A78E26D7BF17BE4EF9865ED276148F068D9D3F252A219
402EDE40FFB91D69F8B375DC068EB27DD613B14DEE52F366437EFE2C4E91F3CE
74F1EB44778D8D3F6BE5F12B2C68765D00B5825DCDD6DC152AB5EF38C81511BA
8FF440877834B68B2FF72BD786BF5663F23F8651A712A55B2360AC8993FEE474
7C63D5467EBC28415C55A27FD7448F481C1404F83A246AF2AA84063FA73B0C6A
ACA68A8C412C1A269DB7CC363228CC0CD2A9833541D0334EBB3866F82BC4D0B0
0A46B754071A33464FE70C7CF0110800A961286B1703D231CE931A7920E52D62
C5263F2586900FA0BD59A2901CAA05C2FBF6C8A933C777BA7E6B4212B613BEB4
20EDC4CF074037C513E24050807704A6029B2B7EA9E6D99188171EAC37CF42FD
6AEEDEF41C09E1AAF6F7D0C6358675390E22F539F81B985A3D39B57CF2320888
C20F4594E3FE6301A4565EE42179BC5CAD58E29427FC6A4C39417962E0DE35A7
6CFFF2B6DFC6BB095EBBBC5D34DBF7AE407CD6945788690D048BE8206803920B
FBDE7633F3AFFE5A996D3EA342302264840AC1BC46637B3F9224D7097ECDD200
032F3EAFDBB18D6BDCF5A4BD5BEE6AD1C338AF5D3913DBE57D1417E309CF880D
76C76FB822B667B6D10A2D5EF39B0DF9913AD8FD408FBA15208D34229C5EC038
05CEEAE659404976337E149549C1BE1F6D0889B82CC28A2EAFDF804FAE4788D5
CD79B6678C04CE06CA2A5A9C29C96CA56B41AC3FE1EC1AF2190E0EDD988B569C
DA3016C6FF6FF783B8AE39FD86B40BE544534436C315DBDBF7998F17ECA5BF4E
156F9CADBB4746DE039BFCDA03258CE64303C8CAB02265D49CC2186ED07ABC40
0524AB976C5F2853E346D8170378AB5BAE7F11E3EBDA0669C415FED1E1F395B8
167212FB2D1F277CF4956271388F09ECA5F036195BA17FCAB9535761812CD487
88975677FBD5534F3C07670643D135EB66FB67C22587FCADC5D76E9A32771762
B088869CB68363929F59A76AE46F2BED36986527A500D88C2F4FA6DF8D26C801
22F60874F87B8C27E6C26A2701FCAFF2DD93130A83E1847D32A56740E8E8D6ED
52DAF67643853E806472167342BECA92317926D322408B47E513B02AD706ED6E
3AD1260C45262B6E0B8FA38EA2784EAA893F550EF7B095603101C02B38C37367
B75716F5BEE82A3919755C48B4F71194CEB59C101177E5AE1D570FF1CB8F7DA7
5D8DC89F2170FC65A6F09DA63E8581E53CF6B9A17CE58170A53BDA605F7C4A19
CD39B77FA4E6E2AED60347631ED9C652FD7F3CE73FF1A1EA6B8A98DB22D8D410
126601CCB6387DF6BA2162B2BB64E8FB10548593C75D0ADADF6437D2422D7CC1
D1499BD579CF6F12B55EED917A86F4CE8878D7DFDC82E83F7A3A51B0E203B731
9B182B75F99162D84A3FD31491D83C7DFB4F822BBF5A4BBBB383209EFB728209
362A2AB28DCA608D92511EAB240298A0B92DC3489C301746B42B778E5F10E2F7
D64C90122D57CDE4A8A1D15238527B1DB253A89B4F190E031AAEE0AB4558115E
17B47D8873061B4CCCF7EF21E87C0A5DA1DA63D0BE471B59C33CF79E5A30DAF4
C4D9713CB6626FF55279C5CA99999C9B1904C528FE063FFC388F3E17B9096905
4C655C9A77FE744F04C33813A2F01A76CF6CC83BFC6F0E4AB5CEE83A3AB1CF80
9366BB35223C1280AB738A0DC3D001BC8942AA789335386027486FB5B52DD4BA
839B17CD44CC24835129BC97346435F3AF7979FA8A6AE2BEF10015FCC437AA1E
FCB2F66B953880E2448C5ED051227EDE2F5C3191FA9C0D6F2330FFE736E47C10
78887060F1C4EB846EF9B295EBB864309E5C9A08157044FCFB6CA60FFD91DC1C
BC2613C777F69DF0063F252F87AA669964E3E8477D718334CF18C4A5CC62EA05
DCFBFC64BAFE1D9182623568B3B35040D0CC6DB8929379260D891ADBF46990BC
C663DCFFE4D9A195E18759A23C15442F2822C8C2F41CEF25845B53A56741C5DD
EA10AF95BBCE6E4172D1B771B972070BAF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BEB1EA95978DDE87C9
7B2188A293F30F2A10533A8BE1080729D8EAE95ADB3A4D0F20E59D2F3C54A4DD
511EAFC0FA382333B1C402C5557EB7C6E0B4804786463832323BD46651670EFE
6732E74ED7E06DFF1AB96261AF3E8D1343D48EC3EC1406810B1D9FFF19C08628
185D92C9EACFE140395CDC48DBB13D76989FE524540312950E283ABA1C8E09BF
2FC683DAA0E0C003FD3A0CACC3D34172433CC65265D255B58659028E5C21D8F3
D03AAA5E8B2F4426B5D9646999159AECF93DFAE4AC0F299DBCEFBE5504C063BF
B75B155FA9D39FD28D9B705F2C66A6D8DE1B20F63BCCF95FC104F14A4A4A82F1
006597FCE38EAA2936CBBADD4689E2AC12AB631C60CF670FB3550E5683AFBEEC
84B992D45A2680BAC63497C593C90728B1298DAFB7983BF339540A8D8280F357
6CDCD4F21401CE192B694582DBC021CFE1217CF272748BB9CD7D9B82A625B0F2
987083E1BEC613BCCB763A23259D1B1D635CECB8442177468B4A69E269481F40
D0047EB381B2482372B2C20ED895E24A946B868F9AB139E7A3DC6D9AF57EA283
EE09BBD61FC4AF42608C6E01E638D15E1346BBE8940C2F9BE4BDDA2E4322C052
851172A6CFB6830C394E62423A0D22D51EF24DCBE949D7FD3E6E525E86E041A6
DED9B721BDD6E2223145BB57CC550922E73CFFBE4201AD7462760440A2317E38
B52F9C8A8FA9E7F90D27E38DA7BAE33901AF57C7DB93E83798EB43CAD793E287
BF3CAD7E8CAE1E9BB5F52711E8AE3D8D0A626E6E61840B747F691339D47F8526
9E1E7CF1B65135F07EAF54D944AAB77B61B0A7EB4646171B8AF167A7725902F9
3ACDDBFFE238527088399F3210A5DFF807FC5D5BECFF46B42E74D2A5A6B1D23A
BE8A02237252C3B31BEAB8E59F9454819D14FE3ED2226BF164C8663945C62C9A
EE3F60236470669EE1E8BE6592231571EFA497582BAE2FD82785988DF0CEE4F8
73F6FD219C3B14FA22C3445C5F8015B05CBFAFC1CC1019BD805E1F6A2B9468F2
4533783C97CAA7F21A6C54BEF01C264F07D779D9E64F1BAF54805479DE212076
226AB000C1E7EA152EC53BC5CD9633B836F5D0DA2BF324922C8588E1C26524E0
FDBD75B18D0954A413CC565BEDCD31D6DC95AA065F777FBE9F6087BF65F31509
FA4A592CB547B115D45CF79E0D986DF653B6CB0347920F8A38E5960B58A08872
356235A371F85E18D5C058FB0B3EAD08DE5AE62723DA0ADC91D3BFF142DA6726
95EFAFBC424FC53D2BCE32B7B5F69340EB77E4B8C7606EC4125A17E193207432
5629DBE73F746E9EAFD2F4E82B1B9CF16B4D935084759ED8B69FBA23A96E8F44
303449886BE78D1D6001CAFCEBF554B73FACE4484A4988F921042BC815581232
9ABCADAF9C1C222037C1EEC431263601A0B7CD109E598C6C0340977074BF6E1A
3BF7EA21F059C70E53C8BFB1DECCB4337A8EE122D6C0D6297C9FBCFD292D93F6
B8C4578BEBDF4149A3C08E244ADED36D3F5B08013735D09E75A9B7EFA18CFE50
B8C4D1433F37D11AA4D8447BE5A7BAD1C2CE5226B0BE40836B6EE21267B2924E
293C8C5814BDC0A95D1A0D196A3C7897AE48DACFF21C83F6177086A221C7211F
5F527389E2FAC6BCC0D2A25055BFD70A21C8C2269AAA838966B3A33FE0B651BD
B65C8166106B69238CA62418DD31C081D45DF0FDA4DBECCBD1FA9E023AF7D235
83C0BE97ED8CC9F98797FB6CFC9886BABED752A7814F6725CE1EDB0FE2B48000
F4ED2BE910F6B9E7D0AAE65BE654D24DBC52B8AD6D1740295300AD2B6A445226
D28E082F3C5BCE6B6F701CFCB1CE03AEF130F50DB45C097DB23F25198FEF2CA0
325522EA81EFF5C5CF1603E0089B162793BE38C3099AC917B687076CCD14323B
D0466B76D18855CC16896F291C895CE07D7B3AF4B06E7DD2D69A293533DE22B2
99C19488B7B4F49D78858C3CCA2D67AE5E767C54483FCF0308B1353AB59CA4C7
A27D476058F015E90F34A709B766AE9330D7A0009BD87F9DC07C860C0913189A
64FD3F1EDAAD23B203D780ACA2F33742B980B829E667D37EEF41EC8E153070DF
96140E8FC9E3A8DC7221582BCF9884301B6AE24AB2022B65311E3A6DED2DC26C
28A403BB4A4ABC9EB32AFF187FAFDEC945EC195185B3F92DD31B772245FF1BA4
326AF3FA3498CDEFA080582905C13E6651CEE57BB28CE97C9CAFAC458C81DBF0
4C570B813A0481CD2BD186C47CC64005B85784105593BE4FAE81523C17C93B24
D0E0EADE4C9458B9A0BADFF16A0008167ADC6797612FD75E16BBA1DC3F62FD39
A724CB7EF913E2FCDF61925D546C0A7B151D4BE161ED73B8A5D56C84E1BC4288
060EE0197FC5019050DA129DC0FDC4BE50D5A5CD8DAB4109CD47BC074CCED336
BB116AB3BE6175D6DD1CAF80144DD5D92461C3528793C574A33D7CCDB6F875BB
A9E474804EB591F8849E760494BBF70003BA53516615023DBDE200E5E6DECA8D
612125A9132BBE40DF4E9182EE85D87D5F09FE9C536DC90CA01EB4A52E159CBD
D0539CE5FEE0AD1803E4DCAD2B132EC43533482E4A19106AB5774E40516E1FA0
7F7F5F01CC340713FC0025456930446F9EBD5B0E35A504B66ADA7C645AA6D091
9C82BC0AAAB37AEC8FC22C5AEA3DA646367C58B4DC4177B73FFBF6CB06B9394D
F468BE421CC531EAE4B3CD2473C979D11C11BA52E5339F573978AFDA870D31F0
BE5ED8FC0CCF16194240DB786E290974F9FA28FC998BBA0706D024C4B6B84E57
45399DC1A9FA200F391EED389AC49F917FD8922B5D174DC918B0EAEC7D248D35
91DAE0294BC44E9EAD180B15883B0E589EE3A012F641C638BF92F10649A30D26
378B6C94ED90D38FC0F0377C0AF1DA43A534429AB60D88BBD83F91A586DE0ADA
B0C5F424A95998D746221311D992E4548D2C6BD2C86D3AD2DA8588CAC53C39C8
B7F893C715A9CFE5705B2680AE82A7543C37E9685574183124DD26B1FF1FC205
74017B732A89592FFC301CC333ED6A1E78CB2424604B5F92A3C36B442C89A1F3
D195AAFAB21684FE01DA9CA85F688B3B8BA12D0625846B26962841D8B30B05F1
0A2694C35E1DC8965E0A3F0614A0990447E13D99F342BD3A77C4EEE8CBC7F220
B3F299587B2E99963E4499C75359814C9586F6E37CCB1B2D86051BAABD585F35
61FC58B2580B83DC0102166269AB6A4DFEA6E689945AD1D5EB23E4F322BFD82B
E007D82B23C402089B5BCDC5BD2F44C8D37EA22C30ECDD19AEEF84D31928C870
512F628D998E53AF47E4E541A01B9DDD06AB2BE566E420A2B0A885D323698254
3BA9F60B3C12B2BC1AE59AD0025944CAC4838C881C778C74EB0C5233DA1DAC8F
01EFD3C68B55FB44300E0B11954BF3D17B997EFF71C0B00B951A7570A341DBF6
02CEDCEED3EB490278F07B602A7FE79C2329CA1F65E78BED814E43A202003126
983D7EA0A161D1C416AC85C189A3FAE90AAC299B0A3174D32B6A82C3B240CC99
E5EC9BFB61F519825659E854A83D4E6F02B610E5B65F1C294E0D2BCAA3192027
1BE74A082ACB55C3009CDCFCECCCB420B5C9593B11A499EB2A59858783B57BCE
2FBAF7BABFC41EEF179A9E95A7B2A70E3A9170C482371ADFEA26A7554D77CAD3
FF8A8299B42D386A8180876384AD2C4263797E88CDA7B8088063FC1BFFC8BF87
7A4E051E3C58D8940A85DBBA74DC7A5419CBA56A8DDF6077803AEC3BCAB91057
F09CBDC0449DCC827A7980B8C41D5ED08F950307D71CCFFFAAF51155E5C7EC7E
5FAF0E7E1A022937E911586EA165CD065E78F5068E625B349FDF7B632C265EE9
D27B5BD4F4E55D38C93FAF6D8CEC704A6407105F95A1A9C09CC083BDA696E545
D299E9D645266CE807B06160D52DE3C5B5E0E291E63CAFA283D7CBF260D5C37C
8384AF3DD0C04E0E2182AD279DCC483DDEEA601FDC48DC594C74DB8ED75A1FAF
C1F41652C2FA7B7ABDFF767458F32383EDD79101C183316278D22DC032289959
22A4996D0C6314F75C6306AC237774148DADF08503BF166A9F41AAA88EE61879
0FD2DD9F52E223FD098660B344B76A7FE3FC83B58DDF6FCE28DB743BC92B2EC3
76370FD355FA08C74EF4D81B8DF9752463E32915296E14DF8098D83F657539CC
D0C1920ECCB0045381622D6D2532988B41207F55696B895C8F3034F885A299EA
F758FAE0CE7863428E160A5364EF1F6F3A8F40FC28A8F80062CD6C9CA9E0AC7D
CB0FD9A4D39EC820E0B6581A24EB1391BB3DC9666D70DD0EE5E56361CD270326
4B69BD25A5D100AB1609CB4D90B6068A5235A94489F21B514032F3FBA5F84660
F955C6F90995E1895A56ACA672B233D05F4FE08B7DF160EB87CBEFE56A4BA1BF
3141E88B83E33BC73BFD0D14217EB9F2CB21F0FF6087C730807473570B24BB15
5265E2EA7402BF17ECD71219A16E5A1B19ACB05975961FDDA498D72C313AEE1E
FF1472662635D4BDE0558439D97094864E520391D337A6EA74FCE69719F48DB3
24726265816EDBDE7927CCA8F5784F1B5406E62338897CA1F692B633B5529F24
55A1A1A35DCFFBAD800045C2FF4CAE8532FC072459623981B182BC9BC2D12101
A34BF27E593CC73359D2F60831D0EBE72FA13CB3DA1000085CCF5579B036B4E5
BC441CDC67B97706B7E8CB7B8A453790524F2CDA8B52A5509B5816E18C1E414B
CD11258772EDC99ABEFFC56233D09289D3752C4D8262B3A62855C82442D26413
AF05E7CFB6B070337F41ACBE79C907B8468C530A5E5907EC76CE873D9107FE0A
0360FF071E9D52E7C90CED0C85098196C1DB4925382D04F0BEE85112CDFECE0E
EC76414116026B743DA8661BEFDF1AE90192D0E132936EF2AE0E21DC1B760158
3951FA56C12295E9910C204C5265BDC2ECBF3B3DE7BDAA120524DCEDDEE187B9
69B2FBE5B79EB0151F43F349B78943018F6B37A11F679AD568050B11952756F1
BBCAFBFD6D083205E750DCB7982AFC8A4A3B5255FDD8A442CE7C35FCE0A8949B
E1DC27603C87526341706CA713FD6B3CA54BE3D4B0066B051DD9E902E81F2626
02C9D87938B75EF1AD0B95260889B07BD04EC6CCC6A3ADCF7693E9EBDF6BB501
3609BDD99A537F5C9245EE67EC99C06F191AD74C9BEBD9751392C1E32AFA573E
5E47AB732C4FE1C290AC5B6B6D3E4FDCAB0345D8D20EDB5954D1062C14BBA045
13AACEC1CDF0AAF515E0A46BA6E51A276E20866331E08995E5F3820F3FFA9AC1
F8B22F36BDBCFD62C776A5FA527986C805DA0232BF5153AD6576FDD913E47C20
1A652E0439E4E2B2DB67946562D76B38A70E919A99000BFA64BB8AE5A5D8E377
E27EA4972A562A1D24AD69B43554F192CEF166E1670F2EE9B93162B7E138DC7F
ED2ED8EE89496F3B13252D3036A903B0158C60C1489AC0DF265A2EFCFC775046
61892F60154E9E9E122CF811AC54308FADEDE7F301456291501A93EB64E18955
CE0DE58ED32B55C30C103312B17D16087D97601E045C3BEE015B34129AC4FA2A
63C8B1EE88B9716A4A2DFFBA14FFDB57FC5181D397D60EE346A42ABA0D94DD07
1DD8BA8B73B90B1D2DE8E9F7E6449AB834ECB4EA733B06C7D6B628E6C5A58663
8C1925BF9497263A716CDCE6018455B088EC12911AACF57CB21C5BA3F1D9450E
96D469B396D9EC72DED9A76107366257CB2480007B765F3A2158709895B6CC9B
4563A1D6215A9ABC514D765061B0E47AE5499CFFC453BB16E68EAA6851D93B6D
F11351F6FE0F7D465E4C24C4F4158F6D706257C3684B5612AC3F1E9C4EBC279E
D822BB0CE02FF58F11FAAFF063FC2CA1BDEC184994807B3558AF1013636F7173
6FEE2766F8A803B2F375F8250FAB9C5F313EC3F5B67C7C12A3070C1047194015
B689DFFD0F54285C413662FA1175E6A044081EE70C24F9D2A5D0E88C7D6D4C52
394D5A21B0FB0B02F93256370BB41EE441C394485105D5307832DEAFF2F6BF05
5A524058940BCF1CA8D16D9A2D6E64C0456D4825822602693C071225D0A59742
608FFD38593EE9589A3433023CE0290DB68CD3E9FB8AFF9059D3EA782B9EBF7C
424313C3DA64B8B5CD25536B2063908B885D8FD48872D60840A71D8CA55AB309
2B4B4287B17F5613AF6AF8353E4F46D2A3380F335AAD56AB035E21DBAD98E5DD
AE480DB698896CA33539E3E39FDDD9AB24D02862BE4DC8D91796CB9A077804AC
7C59F19265B3FE8663193B624F36667ADC2E42FB901A666DD13387024C120CC2
B8681D33E0BC9E2F4B9352E068090940C407525250FAC02EB0C788D6D22FCF65
37CA712E7923F1126C128DCB9A85A656F047414739767F4189D87F89CE4E98CA
4DCCC27129E86195BEC1F837DD39E7F357A2E2197651FD9E898D3E2422D01B9D
22BD99D25B523F45AF45301944FCCFCDB3F43E6240224A2980B8B6D1E3BE16C8
FFEE42ED1DFD3863FC9FBFC63AD3C735CD2B0612245B9154E9283D5BA8D6C436
0EBB285D67AE48E846665304B3CC39DA6270DFDAD8E6BB14FDF6A380DDF86A9B
FC88042FB79441C929EE3F253AC45660FD742EB1CA422822BB7592E542D54345
59E89F318AAB4D3B7AFD2533E5A964740BBD61BBBB5B8009733AFB2160F778DF
067A288441AF095C50E640523EFE2C336E82DFD330171ADA792E173A5FAD5978
45887AAFDB061C48AF125E5940927893B272BACEC3807CBE55E8818A643FBFC5
ECEFB864621E726B00C87CF6ED25978A39A50B12661726F4919B04ADA061CD44
A78853102622A9AFC4773E95182C70A3468A59B50EDA090970F9AD3D738725BB
04B691F608AE5D17A5C98FF9197F75EAD42C9BA96690FFF5B8F21949878231DA
44F60FDF86A788D53BF6E3F62D2105BCEB7865E35770CA12B87D374B0AD10BBC
3546EFFA81321173B0082CBF2E791749DC572C4BC61D9C644E3FC3F53D96126F
01B1902F233736795D2DD7A6155E0083641A5F2D3E5F3D3387E9874EA7668E8E
356612EAA895898566A515E3279D3784841DCDBFF37B133BFEDC6C0B83318A7A
F13CC1DC106E4A5C984CE1F73DB306DACE29E2AF93BE9EAA27EA5B12419F0EBE
F0B4C67863C6FE38DBECFC179978A52A03695CD9C17D3623EF6CDF540B4CB804
5B0902D75ECC3D7FE17ED03BB7C73E469706F6924F60DCB83180C73C3945D407
0F8CA7EF3987776F418C23DD655DAC47235EF34E2DBCC1F6C1B64632B2FDBEC9
FE7C7B0BD419C0E356665C3B3E2593B4F664CD29CBEC4D602CC8AE995BE4C9EE
5E5B52DB8E3B0C01C6D753BCE3C0CBC96153C0D2C52AABF31C85570483C06E24
9B7765843C930E98DC850D009A8B3868F4DED4839212382DD373FEC1A3DC9C5A
8F5FFECB7CBC4A049B275DCF7D57779D6EC9D065C88DBAD98B8D7B13FCD2578A
87F25447C10509E2E7AAD15473C0E6CF7449160BBE902DCC72B5FD1D82B6188C
74D5861717CCF81F69A8DBA99E01EA9EF079C9BB28E722BC4547411BA58C57DC
D30147CE52D8136408D156041041C0EEE10F825A65B22E68289B57785922265E
06C2E2E8DF95C24055BF228199A4A6DCAF1EE3D822CD8B8115CAE038C7FDAE9D
13424212EA9016A346C4C6DD513D0F33869FB160D969E85FD952723AAE3D479B
5C44126B20D3125DBD535D2579D289BF1B6962F1C654ACAEA5EC4698B093F9A7
AED367AE235798D5A34852024A1E0C0D4F220452AB1409C1AD3CB17906856E66
001121808ED7F7C44789BFFBEB026B8B8CADAD5C0A498F84AA45E1738FF34E45
624C440613A0DD5E44B8FA3B5C444F8E293425D11E5809ACF4EDEB082BB08568
4C294A1138DD01C76A507BF7314E1A48F130DF177F79F212F19C2A54F2CAA0AA
736B40D3A97177B97C60E2851E6B1CA081E0DA9CADA61FEB2D0C19B72901516E
FEA300E7E66D87672707AE56EC25956D70CB0D8606881C9A997D0710E9C7B178
7C4DCC3DF5328C4501A9718E76A53677E7150CB9D7885F6790718C96F0632441
2C027C1611FC07A67FAE9F0DEB6D39946E99ABD6F2901E270A5C7F5C98D61238
A3C4F62C16E7A530BAB9D4D540FF91EEA5E1BA913A1D5C10265139E8F35827AF
CD822AA17BC582B4EF16C3B09DF20DD03BC020C8FC5780825F9C769CD611F343
C793DEDEFB0A2B195538D4BFDE0535CBEB57B88696B62F9A8127A1F17438D272
0D2A5C90C7AC7AA8B27CFF05C56782CAD87934713DA2A938E062D94D7EE9B486
26D680C49935C78B50DDF960297D392FAA63DA51D42E1CC6FF6D87596187A044
328A4F98E205DEED22F68A12E2874EAD99F651AF2B691693EA4D7BD07BA10E00
53CCE55A1C31B165F4F5D1FE611ED3EBDBD34199A54C10C319575A9EBE997B32
D661FF7E88D1E8BFAA071F6B233FA51B8FDE35B612DBC27F39433CFE832FB018
67D58874AB666C8B2EC9F301ED106305D6E9E43CB4325FFFBAC2E0F8ACABC6F5
75CBB58EE2E9E2B82C3BB567375F82C2B20D6D893060B9CB06F8F917B6E71ACB
4849B3E0E8D46A3090B42801AE7A97DBC8BA13E5E762668F8D8A3F36DCBB5352
490FACD6E9EF0C8681C2C9F84370CB2812E8DF9C6EF0F015C8184493FC6CD675
52B78F5B4C7AAD461F3FF2EF7262BE393BF1FE446492555C19E82E70CC8199CA
27C1838AD44F402E97A88A23E53D9E640BA65230F2ED4249F222E103AA0C3258
6E116A124FD73991B3D288375E9DC20D45EB11CB820773724A05D2C052016F52
D801712F395B452AFFC376C027141314B22D544E9868188D10A28BC4867664BA
5A6998067E7A0E0CC4150F69E096F4B79F685902D2E79B0C7635C2836608B8B2
D7D71C4BAB2BEEB6BC8E8C8B62D8BCE87C7B1A57C6429AEFCD373482B3538812
3AA3C8198B0E1ED1E4009CF4F7DC51BC68EFAD7F9F5F14B9DB208D130BF5160D
289564770D0A5EEBDB900C93A5B74FF64283F15EAA51DF4C74CBB662283EA118
52062324D586C937020B6F50C8F9DEA93F60D8B8737E30AF14D447E9492F907B
D5AD2F14BA35BB6E9431F462F8DD1A97A2841500B51C672DDD9181CFAC6D5546
FA3A53820D3A4C2876F092EA5477430693F2C076AB623055592BCECC6A7474FC
DD7CC83FCF856DBF900704EB62CE3F0D3768F4E5FDC99AAA25AD6822B22B9CC8
A0E126AAC95D81353D89181D89CF74F9995B40E5C55FBC81DC73752AEF0B3B94
BD6D97C282B086A3AF63994EAF506F0AF42676F167CD6701C04869DA9D77CAEB
4DC19B2086EA76289795BA53B7B5F0A588E1E086955C3A5E5D1724A4E7F462FC
F7B4C92A8EA9C0E00489535D50F3C73B505667C711128C794F77BD223CF144C0
FDBF1576BC1C26F02C7700711BE194DB6748FE4F98AFD044877F327F213F5ABD
69FFF5A9A7B1874BC65B1F468763282BC437C5A8B756BCDEB0F3292A8AD108AA
64FFEB0CC4106C988230C262827B9DA3660AACD877B1132EE19BB147F4CC3D66
8A32FEE1F40AC5A42258DC11F916EB1C5108B01283DB71959A09D4BF174DECE3
4673BD763345FE085F54CD9DD02FBBCB47FE1A015EFC812D65DFB3BC71BE50E7
09650E9CDFFD63D9161F75CBF3C2434423202DA90781AB6D26B8700B5DC40E43
AEE3EE3CAE110BE945A63EAB362D65C77F144AB51D0E97FA4D2C38DCD34C0C4B
C3E4B8EA0DD997522658FA93AD19A9A34C78E06C7E4C30AD4D3391AE666233D9
ACA61A2B19F522CF6FB8288A4B020955E1D3C7DA1D9985C17CCC1F0438842223
DE56E6F8CD6601A1011800924E2F1DEE146917040AAD4A686AD6A7C07BBF8FBE
60B6F7491BCC79E2531E1715A18BF8463E8A0CF9F0CD0870270F0F40EFC13B6D
FBC3D285A49FE080CF5BDE899FC41B53325159F7D4803541DFF07C1A6E0CDD34
5E2C115CAFA68D28538C4D2A07F2F83A8E26A8139F8856BB81184F4256994B50
05D654E490867BBB4D7AAD3393806B86F68A2B24998E20AE7ECB82DE000CCD23
0384F710A002921B4C4B63F25AE01A4F8BA05BFD2729417C1865E2E3FBAD3BBC
137FD522CEEC5B7CA9ECF602952F95336FC074602E6957DA97DDFA62CF9AC0C9
741C93B3630A4587FF778F661590642D1B53CB86D762648BE0976D5F3C82542C
5E344F803547170067B51D06308EC4965F27BF8327C9FE55B586D057A5B67F97
297DFD6EC0F3E4585CAE02092F991F62E3F6573133B8CC186F24BAC11C7FB810
E57E992383B86188E2691DEBFDECD8C5FDAA4F84C57F6D048274CC2A30435544
899E9BC24AF949CCF9C181540243E36D59069A6D686DED51A3C555DD8160B617
16B044E5EB7629141E928065F10048594973204E90FEAFE0A407C7C23BA5F5E6
84764A0FF318768AC3DC0FD24606E68F9F622CEC90F4E09F25D875B12140261A
450E360B5B7C5B6AC9F9EEB11ECE0553843586E8CF15B83C7F0DD201D74FDF7F
448889F2CC1668F6772AE3504C2A06911A7FB36E5EB80D09C748FC43A09FE333
BAAE9DE070E73A17613406C711B92AEF8134F99DF301F08E9FBE3BA7C43423D2
5E4E26AF9E5B79B6895BF687CC29187152CB34A36947D272F9FB99153B8890E7
44B661157F09290D30732970607C7D61AAE6F23C1682776F1FAF7FC04B549FA1
A623A79400AFF543A33ACD5A01FC3464C31220F15A20A0C745CC25F858E34B6D
AB30AC7FB5033D1EFBF68EA43084CCE18CCCB10584F68B6894B08FDBB5212B3B
F054EC7AE5552E24BE33E0D0DDA4D02A93E18795A8AA1D4994D871C6C66B922D
A86B8BE39AAC8BDDDDF5625C61972D35EDDD2CD5F278ED2A59D9EE46F3336263
4F9758827B199FD07BDB22D9B971EDF13DF610C6F3EA97A4A38F3F28273DF0A3
B26080F85C9B1C3377FF508F942233A79FE1E56B19005EF566B490133D656784
318768CC9EC7C334FDFB7BD1E07E45213210B45BC180AF3C017391D052E9AA45
9B1694CF8589E0376BE7DE4D84D365D709F9EFB00B0D8A91ED45D5C9C99E16D6
ED5779A2B6FADD864EF89807639677C6928E26C70F239E3CDEB5276530D4492A
E7E4E354B285288EC0119F551F231724DDA5B6D9A7DC2F33AD9E9F4FF04AB84C
2CC2C89F928B219EFF61B012DF417D051382AEF6686E199AC5373E97075EE8D8
1A3ECF474E15D595606657DF32F391FA85DD6C995983594A70CEA40DD8FE9ADE
B30A2BB0C4BF76AF1E40829BDEA56D35450857C02C9847CCAA92023DA4FA2E2F
9F6A5E153AC3F49E4C2B83A795DCB3C33708CBD8364D98E38D88FFD888EE959C
62770C29BB03C653AD76EA6B116DC0CFD82C425A263EDE422AD302EE178C4537
B243989B87EC542908AEA0A0C4D9597FE0B190E676AAE8D8CBE9ACD7749C75A9
48F847CCC10CE792CE8B6C19920904BB8EF53F8CF6F267B357057AB3A6F6C8EF
8CB8133ECB916325EB6F3C223D2EBED02B702973982E43F39A2C5FAB4E9D3F99
7C109EC58D50B6464DE8B265C15DDCF6C885FFA8B3E484A2F6ED87AC1FF26655
E407FC3D07757B3DA01ACB50FE991D0D6383CC468F1D9DEECDD72EC83CF27891
4C2A90FCC71D39135945DF3A6467CD6D14718393BC9B48CC32348709DEFB46D7
57B508DD638BB99CA522902994E589C12E20A468E7A98BC17839E24FA659439F
87F987BA67F8BB68D3E81D53AAB67561B77C87689776E3CEE7F4BE3C42EB4CE6
B052525C7F4EB2A24969306D9A13F4AFBF23366DE57E6DAA1C29DA2B29E8D279
BEC6A36D7147522078C988B96FCC89B1914B7404E94C699B1C4BE5C058464129
F71AB474614D9A42149D12F88C3DBA37B7620CDAE5C187037A3D5F54FEF19D45
39D569D6BFE5544337CF87A5BB6C1CC3BEF64FCD71225E12C372B5C7FEDA31A9
C71F65C15F1185AA0158FB039F12D7F5239CCA2F949DA961C6FC6B4EFB89F6C6
45CF618B992705FF24A10FBAF4232B8FE29BDD9D2A905DF791B16167E04BADCE
BF5EF38D0CD25E372B6893B8270723603F09DDA3CF1EB8DF74B4DD9CEB614B95
0F094235ED88AED0EAE09A8D3DFE74FB087FE98253A1E13CDF27D966E950B838
9E475719092748C7DA1A9AB3C09DD39CDE45175CA1AFBAC322BC8E49DB229B3B
9ED9F7807904E6C25FBC068DFF9D20DAF33B4BDCD3C9008D54581D089D0C8DE6
A14619F5A313427121A6066610B5CA62D1C2B7E6BF14DD12C571F80CF8A7CC02
F80E9043A45D0756D78D5B84FA04CC79E7F2D881C6135171994B3C92E2699F58
2C9C0281D1375D4F2A6A2C8D25BF0C48906D3423108BCE163B98DB09B0F8C25C
5C98278C968D5F02CF13AAF80B3674CB53F96A3FCDA1598DEFC33624D637B3B2
A845921C29F7B2D3A3A936F81B8B2D786E54B6B8DF640A796F4BE99169DD7B89
F8E0659DFBA9E1911A662CC0786600A3171267C2FD20D7C164F21F7BEF88B798
6307550B69A0711685EFA90EAFDBA401A880BFD6E724A2467AC016E955FBE2E3
81811356EDE91711F72A9A2A2A511BCD9D996B9F0E27F9B3097314CEA5CD3D71
07F3C05696DF6C58EC0BDE1DD506CF810056FFB04F50428FCD23112C46B87C46
5E0115CBA8BD05F4E52965C33BF255C2452BE8226F4A619C49FF8247BF3EF553
8485E65D7B350EF754ED2EF42A988D720B8F00BB38919B06ED623E05084596A1
64BC8969598BAE2E0A0456D103AD8101F9880DD41252C80B5B5CBA809FB0EC1A
5E5D2D327BF8A63A52168E71B2F3AA2A8A2EDE2470BDCB485743996A93E60454
3362C220AA4162C441A91AF6760484E9701924BCE04358B973496DEE90854CF5
78CF1AF9F2BE61B429BEB6908B6C906B59FAC90187E0783024694CB1EE8C01B4
7BB043890FBC61A7A3AEB1AA1A2F1B7D6262551215A887AC8502AD1093D2E59E
44C82F7D699B4E574FBA91449FC06E05F9BEF1443C40B93233041E5A7408FEDB
42A81E44C5CDC217454B826A5D20C366A9C287E55CCF0C84A4E1195FE72FC65C
33CCC35B27A698681B8A30793239B6ABFD4C3F4E1DECB82A622A38171ACCA10E
54A3625A823AA145883F2D62EB7BD8AC1CDD859DE563D0658EA0216276745740
73A425DB24DF49E16E3A6E35886131481E93B8C97A4780D9B43BFDF5F9FB4357
4FB0FCA1D2027837FA93257C86AF8F876F2482D8403E28750E0442ADF0099B3F
4FD7105A419D009826A3BBF34CC6FAA0743954C03493174262728C8375672795
6A227C376CDA2735FA574A91954283A1CB62D09E939249ED115A7172498F8B49
7F42F37379A4756DC57FC080D823E4FE5770ADECFE05C45167FDAAD430B4C1F7
4DED14A2E724C1DC5AEB2ECDD7EEDA11E5CC965A61D73291F8271A8F4F5426EA
33D1D64A099809F875920B2AE29F9A800594030B26907E5ED03218632D96FDDF
35555DB53455A52851D26DD755602A26100CA0B9AE7B5BB616FB7B37E6E2C261
EAC816A57D7490E4DC72FD10EF10EF061F5AD9391FB30C5AEB7E4EE51CAD07B4
69870637D3C3FE3975732524E77A3A0D8CEFCC05583739A506FCBE98FB716B5A
489E997280EED2FA97C199A1474BDF17EA0181FEE29D4D771F966DB666E34EDC
7758AB09E700566E543FD2A5755974F663188C58CF981E4FCE18FFDF52C38CE7
13DD935ACE7F1CF1F1A72AD2E49F6D7892D2B15C122F7056570EE066BEBD9EDB
88C5DBC4812B91A9AEBF21A6B540843A9B57E261715CEA0FCA3E5E80ED9C7DC2
B1D3CDD403776F93F69C855F72C36FEABAE281E8E7C95199EF01BF41A58BFE1D
83FFC191A43929539FB7F8E165966A833F63AF0DA6AEBBFF5C1BC8679E71EA5C
425DDA7C7FF904411687E4E9FCC6838E1F15DDE1FDA26DE3EFFF4E582C437825
75CF24A3CABB120BF7EF379ACCE677B746B45B307B4C4D7A3E69F00E82FB9564
0581406DC126AA7367FD1E87772FA9AB48548B91AA66B2633D452288DEE5799D
0AF2660DC002D7446AB2AA10255AAF013BAD9F18932DA92906435E15653AA431
8DC99088435E483D6D0ACA76420F676FF3CD999BBFB5CB9131A76DEAC1C5E8D2
FC13E344E558A494EFE822BADFEB7AC19A2099EE1F2A9D64B50B48894541D2EF
EAC540887CDF5B893B795D22F50CAADB2FB30DA622A0F97CDB6BA9B9A5B5C9A7
29F23B23897C86CB094F7F2EBE3BDEB589A6E37D65B19DECBD09D239CBC6E652
1F011390DFF4DE6A939E8482DF1C91C0EBB98029C987A697E2F324EC581B0442
D9CF2524A435A972CBD73F55EBC1B36460E8EF2234443143DB0896B6E3BB9F1F
877AA584B521AE1C9F14B75F610D67BEFEACB84C5328B312C8A807CCAE72EB0E
6DBD3F3D1BC4866191277701310E278FD0B809590EA8AC19995A5F2A636F6D0C
A0324AAE0EA337415B2C7D90EBFEA8B757F79554AD8BDA84838C61ACC2725C8D
11F06D957E6F80C4621BCEFF127D64CDF14DD1AFCF1976BCC53459FA7F5CE33D
DD1E9572C868F120D2FB4842DFB1791B7BDBA751F034F4775F6B4F02B6F495B6
B89FD0151746813B0F3DCAFF1EC7897FB734D3DA68EF9392A85ABD0355AA980B
C8A609DFDFF00F97D1B0A5193EC69F4BE07EAD89AEA7EFC632C7DBF15A130457
A5307A0B7B2C8C84592B99F09CD25E88CF4A77B53D661DF5948C2DA1D9E5D304
2D12C7D5FBE4BFE4DED2E6CB231F157336B511047BE8CE64E105A2B6089A597F
DE44E9041E3354B6F67EDE8F55A4F912DA197DB4672025F988FDC9D02FDC38E3
993120E91130D0BE1EA943188F053EBC6512F04CBEEE31552FB330B6B88E5DE7
C30768891B7225417FC2EB6542751AD25B4412C66B5651824FA7C5B7993AAAFF
5D055E04D928589E9C936C8C4A35D13859854F6ACD1FD4D3862956AC060681F2
6A7361E0635EF78E48308CEC985A24EFA4E6A72EE183E2310CAFFC06766B5F8E
BF3639BDDD1858EDF16E97EF00F67F29B434C8EC54A0201CE1DEF2C33B955543
08E291B416FA197F15F7AF9C64A06432E506109D178ED990F7E4A428733A2E17
CB673CD9C2B44EEDACE8EE7537358526D2EFC7DEBCECC4125443991944E82059
63AD845B82E1F92F5173BA5983D84FE998815AFD85AB22AE229C994CB98C0CDA
D0E7801156257FE0784E7E045C9B2893979FEE0711AFAED8915B1449200D38A7
6C93B848E573296B72EB486FD5FC6B3954A42F2B42226A6690460BC9785EE68A
3F4D2DA4E669A7660D975A754211F4F1FD6099AC34CDF3E256A0158E03373577
60EAF6C1864CE69641D90B5567868E525D258E771A5C8C6DFFD2AE56E545F7A8
B54AA4758C03ACBA3DC218E443E89DD17C5852E422D5690DD94392BD3F596524
14B5F4D67F2692181EB12AB5230D7FAEFAF02D71507BD6FC70321BFE1A187BD3
CB1656CB76514387D7CCD752C45BC0C52CE1633C000A072891F05B1A9C106722
CFF21CB46D9446DDD9A8A7E296661952B74160DD5B2E62D19E22A23D24F2C8E1
79BB1B2805CC29310E18169DEE968CDE5DE54426F10386242D47F1C1154498E0
489267CD02AF06038A7867F1AA2B30E33D395428D4BF6807896BBE9C1925442E
D4A5CE5FBAA40AEDE421CA14FB8C55340E95B917E90D57B97296ABADF624A84F
6E0F7E370AF608D244C717C97AD57098BE5C5DFCB2A4F187197CC4FA64F117FA
340929501CB85F33991AE624A68A5B9DA7157324662F9BC6139AF725F217F657
77A5648B380161708567094B6C83DFDAF31746C863161717C2F39742CFE178EE
B5B0C659BA59B71FE992344FB3C5009683FA4954D14BA028E197A7060039C4E8
42A413C7DB5131937CF4285518494882452EDB6FE1C4C1954FA796BB10AE463C
5CEA9B0865FDA1E5339874EB4D5A0C4A837F7A1390FB13A1056BAA3C170DE1C7
2722EFEC6BBCDB14278731B396A28D702B69B4F2760B913BDA1023EAFAB18E90
A16F21BB6BAA188AA0DB25FAB1EC81FD8B86EBFBC82BDC64E320B28B460B6F49
38EEB859C6337B78C01ABA2ACCF9C8254E35E0BA2C94088B52986F451EBFEDC6
0AFDE6145C04667C310F2C632410DB58DF626504
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (Assignment2.dvi)
@start /Fa 240[34 15[{}1 58.1154 /CMSY7 rf /Fb 193[65
62[{}1 83.022 /CMMI10 rf /Fc 134[50 3[50 2[50 2[50 50
8[50 1[50 49[50 50 50 50 46[{ TeXBase1Encoding ReEncodeFont }11
83.022 /NimbusMonL-Regu rf /Fd 130[40 1[40 2[40 1[40
40 40 40 40 40 40 40 40 1[40 40 1[40 2[40 40 40 1[40
40 1[40 32[40 40 40 40 12[40 40 40 1[40 40 40 1[40 38[{
 TeXBase1Encoding ReEncodeFont }32 66.4176 /NimbusMonL-Regu
rf /Fe 136[40 40 40 40 40 40 2[40 2[40 40 1[40 40 1[40
40 40 40 40 40 97[{ TeXBase1Encoding ReEncodeFont }17
66.4176 /NimbusMonL-Bold rf /Ff 135[40 40 1[40 40 40
40 40 40 40 40 40 40 40 1[40 40 40 40 40 40 40 1[40 9[40
2[40 40 17[40 6[40 10[40 40 40 2[40 42[{ TeXBase1Encoding ReEncodeFont }
30 66.4176 /NimbusMonL-ReguObli rf /Fg 136[48 1[33 18
26 22 33 1[33 33 4[18 33 33 22 29 33 29 1[29 7[48 3[48
41 37 44 2[48 48 59 41 48 1[22 1[48 1[41 1[44 17[33 2[17
22 3[22 22 40[{ TeXBase1Encoding ReEncodeFont }35 66.4176
/NimbusRomNo9L-Regu rf /Fh 190[42 12[29 29 29 29 49[{
 TeXBase1Encoding ReEncodeFont }5 58.1154 /NimbusRomNo9L-Regu
rf /Fi 107[37 37 24[37 42 42 60 42 42 23 32 28 42 42
42 42 65 23 42 23 23 42 42 28 37 42 37 42 37 8[60 78
60 60 51 46 55 1[46 60 60 74 51 60 1[28 60 60 46 51 60
55 55 60 5[23 23 42 42 42 42 42 42 42 42 42 42 23 21
28 21 1[42 28 28 28 36[46 2[{ TeXBase1Encoding ReEncodeFont }71
83.022 /NimbusRomNo9L-Regu rf /Fj 133[37 42 1[60 42 46
28 32 37 1[46 42 46 69 23 46 1[23 46 42 28 37 46 37 46
42 9[83 3[46 3[65 1[78 55 2[32 65 65 1[55 60 1[55 60
1[42 4[28 4[42 3[42 42 23 1[28 21 44[{ TeXBase1Encoding ReEncodeFont }
43 83.022 /NimbusRomNo9L-Medi rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 0 1
TeXDict begin 0 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (CS 444 Assignment II: I/O Elevators)/Subject
(CS 444 Assignment 2)/Creator (LaTeX with hyperref package)/Author
(Group 11-05)/Keywords (cs444) /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -481 a
SDict begin H.S end
 -158 -481 a -158 -481 a
SDict begin H.R end
 -158 -481 a -158
-481 a
SDict begin [/View [/XYZ H.V]/Dest (page.0) cvn /DEST pdfmark end
 -158 -481 a Black 0 TeXcolorgray Black 0 TeXcolorgray
-150 -150 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -150 -150 a -150 -150 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -150 -150 a -150
-150 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -150 -150 a -150 -150 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -150 -150 a -150 -150
a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Kernel Assignment)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (section.2) cvn/Title (Concurrency Assignment)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (section.3) cvn/Title (Version Control Log)
/OUT pdfmark end
 -150
-150 a -150 -150 a
SDict begin [/Count -0/Dest (section.4) cvn/Title (Work Log) /OUT pdfmark
end
 -150 -150 a -150 -150 a
SDict begin [/PageMode /UseNone/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -150 -150
a -150 -150 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin H.S end
 -150 -150 a -150
-150 a
SDict begin 12 H.A end
 -150 -150 a -150 -150 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -150 -150 a -150 -150
a
SDict begin [ {Catalog} <</PageLabels<</Nums[0<</P(0)>>1<</S/D>>]>>>>
/PUT pdfmark end
 -150 -150 a 0 TeXcolorgray 0 TeXcolorgray 668 834 a
Fj(Gr)o(oup)30 b(11-05:)e(Daniel)j(Schr)o(oeder)-8 b(,)30
b(Brian)h(Ozar)o(o)o(wicz,)e(and)i(Luk)o(e)h(Morrison)1422
1051 y(Assignment)g(II:)f(I/O)g(Ele)o(v)o(ators)1447
1340 y Fi(CS)e(444)f(Operating)f(Systems)i(II)1742 1440
y(Spring)e(2017)1741 1539 y(4)i(May)f(2017)1796 1875
y Fj(Abstract)-126 2093 y Fi(This)h(document)d(is)k(a)f(summary)e(of)h
(Assignment)g(2)g(for)g(CS)i(444)d(Operating)g(Systems)i(II)f(at)h(Ore)
o(gon)e(State)i(Uni)n(v)o(ersity)f(Spring)f(2017.)-63
2192 y(This)h(document)f(includes)h(a)h(log)f(of)g(commands)f(used)h
(to)h(complete)e(the)i(k)o(ernel)e(assignment,)h(a)h(description)e(of)h
(the)g(concurrenc)o(y)70 2292 y(assignment)f(solution)h(from)f(Group)g
(11-05,)g(and)h(the)g(responses)g(to)h(the)f(concurrenc)o(y)e
(assignment)h(follo)n(w)h(up)g(questions.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 1 2
TeXDict begin 1 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -481 a
SDict begin H.S end
 -158 -481 a -158 -481 a
SDict begin H.R end
 -158 -481 a -158
-481 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -158 -481 a 0 TeXcolorgray 0 TeXcolorgray 4021
-373 a Fh(1)p 0 TeXcolorgray -150 -150 a
SDict begin H.S end
 -150 -150 a
-150 -150 a
SDict begin 12 H.A end
 -150 -150 a -150 -150 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -150 -150 a 1503
-50 a Fi(I)t(.)45 b(K)t Fg(E)t(R)t(N)t(E)t(L)24 b Fi(A)t
Fg(S)t(S)t(I)t(G)t(N)t(M)t(E)t(N)t(T)-67 175 y Fi(BLAH)29
b(BLAH)g(BLAH)g(ABOUT)g(KERNEL)g(ASSIGNMENT)-150 424
y
SDict begin H.S end
 -150 424 a -150 424 a
SDict begin 12 H.A end
 -150 424 a -150 424 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.1) cvn /DEST pdfmark
end
 -150 424
a 125 x Fg(Listing)24 b(1.)47 b(The)23 b(ne)n(w)i(sstf)p
509 558 34 5 v 33 w(add)p 637 558 V 34 w(request\(\))g(function)h(in)e
(sstf-iosched.c)p -115 646 4 75 v -95 646 V -67 623 a
SDict begin H.S end

-67 623 a -67 623 a
SDict begin 9 H.A end
 -67 623 a -67 623 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.1) cvn /DEST pdfmark
end
 -67 623 a 0.3 0 0.1
TeXcolorrgb Ff(//)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 40 w(This)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
39 w(is)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 39 w(the)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 40 w(original)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 38 w(function)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 39 w(from)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 39 w(noop)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb(-)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb(iosched)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb -1 w(.)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb -1 w(c)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb(:)p
0 TeXcolorgray -115 720 4 75 v -95 720 V -67 698 a
SDict begin H.S end
 -67
698 a -67 698 a
SDict begin 9 H.A end
 -67 698 a -67 698 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.2) cvn /DEST pdfmark
end
 -67 698 a 0 0.4 0
TeXcolorrgb Fe(static)p 0 TeXcolorgray 0 0.4 0 TeXcolorrgb
39 w(void)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 39 w Fd(noop_add_request)p
0 TeXcolorgray -2 w(\()p 0 0.4 0 TeXcolorrgb Fe(struct)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 39 w Fd(request_queue)p
0 TeXcolorgray 1926 710 a(*)p 0 0 1 TeXcolorrgb 1965
698 a(q)p 0 TeXcolorgray(,)p 0 0.4 0 TeXcolorrgb 40 w
Fe(struct)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 39 w Fd(request)p
0 TeXcolorgray 2683 710 a(*)p 0 0 1 TeXcolorrgb -12 x(rq)p
0 TeXcolorgray -1 w(\))p -115 795 4 75 v -95 795 V -67
773 a
SDict begin H.S end
 -67 773 a -67 773 a
SDict begin 9 H.A end
 -67 773 a -67 773 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.3) cvn /DEST pdfmark
end
 -67 773
a Fd({)p -115 870 4 75 v -95 870 V -67 848 a
SDict begin H.S end
 -67 848
a -67 848 a
SDict begin 9 H.A end
 -67 848 a -67 848 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.4) cvn /DEST pdfmark
end
 -67 848 a 0 0.4 0 TeXcolorrgb
159 w Fe(struct)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 39
w Fd(noop_data)p 0 TeXcolorgray 770 860 a(*)p 0 0 1 TeXcolorrgb
-12 x(nd)p 0 TeXcolorgray 39 w(=)p 0 0 1 TeXcolorrgb
40 w(q)p 0 TeXcolorgray(->)p 0 0 1 TeXcolorrgb(elevator)p
0 TeXcolorgray -2 w(->)p 0 0 1 TeXcolorrgb(elevator_data)p
0 TeXcolorgray -2 w(;)p -115 945 4 75 v -95 945 V -67
922 a
SDict begin H.S end
 -67 922 a -67 922 a
SDict begin 9 H.A end
 -67 922 a -67 922 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.5) cvn /DEST pdfmark
end
 -67 922
a -115 1019 4 75 v -95 1019 V -67 997 a
SDict begin H.S end
 -67 997 a -67
997 a
SDict begin 9 H.A end
 -67 997 a -67 997 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.6) cvn /DEST pdfmark
end
 -67 997 a 0 0 1 TeXcolorrgb
159 w Fd(list_add_tail)p 0 TeXcolorgray -2 w(\(&)p 0 0 1
TeXcolorrgb(rq)p 0 TeXcolorgray(->)p 0 0 1 TeXcolorrgb(queuelist)p
0 TeXcolorgray -2 w(,)40 b(&)p 0 0 1 TeXcolorrgb(nd)p
0 TeXcolorgray(->)p 0 0 1 TeXcolorrgb -1 w(queue)p 0
TeXcolorgray -1 w(\);)p -115 1094 4 75 v -95 1094 V -67
1072 a
SDict begin H.S end
 -67 1072 a -67 1072 a
SDict begin 9 H.A end
 -67 1072 a -67 1072 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.7) cvn /DEST pdfmark
end
 -67
1072 a Fd(})p -115 1169 4 75 v -95 1169 V -67 1146 a
SDict begin H.S end

-67 1146 a -67 1146 a
SDict begin 9 H.A end
 -67 1146 a -67 1146 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.8) cvn /DEST pdfmark
end
 -67 1146
a -115 1244 4 75 v -95 1244 V -67 1221 a
SDict begin H.S end
 -67 1221 a -67
1221 a
SDict begin 9 H.A end
 -67 1221 a -67 1221 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.9) cvn /DEST pdfmark
end
 -67 1221 a 0.3 0 0.1 TeXcolorrgb
Ff(//)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb(This)p 0
TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 39 w(is)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 40 w(the)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
39 w(new)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 39 w(function)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
39 w(in)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 40 w(sstf)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb -1 w(-)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb(iosched)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb -1 w(.)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb(c)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
-1 w(:)p 0 TeXcolorgray -115 1318 4 75 v -95 1318 V -67
1296 a
SDict begin H.S end
 -67 1296 a -67 1296 a
SDict begin 9 H.A end
 -67 1296 a -67 1296 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.10) cvn /DEST pdfmark
end
 -67
1296 a 0 0.4 0 TeXcolorrgb Fe(static)p 0 TeXcolorgray
0 0.4 0 TeXcolorrgb 39 w(void)p 0 TeXcolorgray 0 0 1
TeXcolorrgb 39 w Fd(sstf_add_request)p 0 TeXcolorgray
-2 w(\()p 0 0.4 0 TeXcolorrgb Fe(struct)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 39 w Fd(request_queue)p 0 TeXcolorgray
1926 1308 a(*)p 0 0 1 TeXcolorrgb 1965 1296 a(q)p 0 TeXcolorgray(,)p
0 0.4 0 TeXcolorrgb 40 w Fe(struct)p 0 TeXcolorgray 0 0 1
TeXcolorrgb 39 w Fd(request)p 0 TeXcolorgray 2683 1308
a(*)p 0 0 1 TeXcolorrgb -12 x(rq)p 0 TeXcolorgray -1
w(\))p -115 1393 4 75 v -95 1393 V -67 1371 a
SDict begin H.S end
 -67 1371
a -67 1371 a
SDict begin 9 H.A end
 -67 1371 a -67 1371 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.11) cvn /DEST pdfmark
end
 -67 1371 a Fd({)p
-115 1468 4 75 v -95 1468 V -67 1445 a
SDict begin H.S end
 -67 1445 a -67
1445 a
SDict begin 9 H.A end
 -67 1445 a -67 1445 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.12) cvn /DEST pdfmark
end
 -67 1445 a 0 0.4 0 TeXcolorrgb
159 w Fe(struct)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 39
w Fd(sstf_data)p 0 TeXcolorgray 770 1457 a(*)p 0 0 1
TeXcolorrgb -12 x(nd)p 0 TeXcolorgray 39 w(=)p 0 0 1
TeXcolorrgb 40 w(q)p 0 TeXcolorgray(->)p 0 0 1 TeXcolorrgb(elevator)p
0 TeXcolorgray -2 w(->)p 0 0 1 TeXcolorrgb(elevator_data)p
0 TeXcolorgray -2 w(;)p -115 1542 4 75 v -95 1542 V -67
1520 a
SDict begin H.S end
 -67 1520 a -67 1520 a
SDict begin 9 H.A end
 -67 1520 a -67 1520 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.13) cvn /DEST pdfmark
end
 -67
1520 a 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 159 w Ff(/)132 1532 y(*)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
212 1520 a(While)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 39 w(sector)p 0
TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 39 w(of)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 40 w(new)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
39 w(request)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0
TeXcolorgray 0.3 0 0.1 TeXcolorrgb 39 w(is)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
39 w(larger)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0
TeXcolorgray 0.3 0 0.1 TeXcolorrgb 39 w(than)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
40 w(current)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0
TeXcolorgray 0.3 0 0.1 TeXcolorrgb 38 w(sector)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
39 w(check)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 39 w(next)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 40 w(request)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 39 w(in)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 39 w(queue)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
3639 1532 a(*)3679 1520 y(/)p 0 TeXcolorgray -115 1617
4 75 v -95 1617 V -67 1595 a
SDict begin H.S end
 -67 1595 a -67 1595 a
SDict begin 9 H.A end
 -67
1595 a -67 1595 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.14) cvn /DEST pdfmark
end
 -67 1595 a 0 0.4 0 TeXcolorrgb 159
w Fe(while)p 0 TeXcolorgray 40 w Fd(\()p 0 0 1 TeXcolorrgb
-1 w(blk_rq_pos)p 0 TeXcolorgray -1 w(\()p 0 0 1 TeXcolorrgb(rq)p
0 TeXcolorgray -1 w(\))g(>)p 0 0 1 TeXcolorrgb 40 w(blk_rq_pos)p
0 TeXcolorgray -2 w(\(&)p 0 0 1 TeXcolorrgb(nd)p 0 TeXcolorgray(->)p
0 0 1 TeXcolorrgb -1 w(queue)p 0 TeXcolorgray(\)\))f({)p
-115 1692 4 75 v -95 1692 V -67 1669 a
SDict begin H.S end
 -67 1669 a -67
1669 a
SDict begin 9 H.A end
 -67 1669 a -67 1669 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.15) cvn /DEST pdfmark
end
 -67 1669 a 0 0 1 TeXcolorrgb
359 w Fd(nd)p 0 TeXcolorgray 39 w(=)p 0 0 1 TeXcolorrgb
40 w(nd)p 0 TeXcolorgray(->)p 0 0 1 TeXcolorrgb -1 w(queue)p
0 TeXcolorgray(.)p 0 0 1 TeXcolorrgb -1 w(next)p 0 TeXcolorgray(;)p
-115 1767 4 75 v -95 1767 V -67 1744 a
SDict begin H.S end
 -67 1744 a -67
1744 a
SDict begin 9 H.A end
 -67 1744 a -67 1744 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.16) cvn /DEST pdfmark
end
 -67 1744 a 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 359 w Ff(/)332 1756
y(*)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 411 1744 a(Stop)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
39 w(when)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 40 w(the)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 39 w(next)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 39 w(sector)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 39 w(is)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
40 w(larger)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0
TeXcolorgray 0.3 0 0.1 TeXcolorrgb 39 w(than)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
39 w(the)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 40 w(new)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 39 w(request)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 2683 1756 a(*)2723 1744 y(/)p 0 TeXcolorgray
-115 1841 4 75 v -95 1841 V -67 1819 a
SDict begin H.S end
 -67 1819 a -67
1819 a
SDict begin 9 H.A end
 -67 1819 a -67 1819 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.17) cvn /DEST pdfmark
end
 -67 1819 a 0 0.4 0 TeXcolorrgb
359 w Fe(if)p 0 TeXcolorgray 39 w Fd(\()p 0 0 1 TeXcolorrgb(blk_rq_pos)
p 0 TeXcolorgray -1 w(\(&)p 0 0 1 TeXcolorrgb -1 w(nd)p
0 TeXcolorgray(->)p 0 0 1 TeXcolorrgb(queue)p 0 TeXcolorgray
-1 w(\))h(<)p 0 0 1 TeXcolorrgb 39 w(blk_rq_pos)p 0 TeXcolorgray
-1 w(\()p 0 0 1 TeXcolorrgb(nd)p 0 TeXcolorgray -1 w(->)p
0 0 1 TeXcolorrgb(queue)p 0 TeXcolorgray -1 w(.)p 0 0 1
TeXcolorrgb(prev)p 0 TeXcolorgray(\))o(\))p -115 1916
4 75 v -95 1916 V -67 1894 a
SDict begin H.S end
 -67 1894 a -67 1894 a
SDict begin 9 H.A end
 -67
1894 a -67 1894 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.18) cvn /DEST pdfmark
end
 -67 1894 a 0 0.4 0 TeXcolorrgb 677
w Fe(break)p 0 TeXcolorgray Fd(;)p -115 1991 4 75 v -95
1991 V -67 1968 a
SDict begin H.S end
 -67 1968 a -67 1968 a
SDict begin 9 H.A end
 -67 1968 a -67
1968 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.19) cvn /DEST pdfmark
end
 -67 1968 a 159 w Fd(})p -115 2065 4 75 v -95 2065
V -67 2043 a
SDict begin H.S end
 -67 2043 a -67 2043 a
SDict begin 9 H.A end
 -67 2043 a -67 2043
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.20) cvn /DEST pdfmark
end
 -67 2043 a 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 159 w Ff(/)132 2055 y(*)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
212 2043 a(Add)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 39 w(new)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
40 w(request)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0
TeXcolorgray 0.3 0 0.1 TeXcolorrgb 39 w(after)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
39 w(the)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 39 w(last)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 39 w(smaller)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 39 w(sector)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 2045 2055 a(*)2085
2043 y(/)p 0 TeXcolorgray -115 2140 4 75 v -95 2140 V
-67 2118 a
SDict begin H.S end
 -67 2118 a -67 2118 a
SDict begin 9 H.A end
 -67 2118 a -67 2118
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.21) cvn /DEST pdfmark
end
 -67 2118 a 0 0 1 TeXcolorrgb 159 w Fd(list_add_tail)p
0 TeXcolorgray -2 w(\(&)p 0 0 1 TeXcolorrgb(rq)p 0 TeXcolorgray(->)p
0 0 1 TeXcolorrgb(queuelist)p 0 TeXcolorgray -2 w(,)g(&)p
0 0 1 TeXcolorrgb(nd)p 0 TeXcolorgray(->)p 0 0 1 TeXcolorrgb
-1 w(queue)p 0 TeXcolorgray -1 w(\);)p -115 2215 4 75
v -95 2215 V -67 2192 a
SDict begin H.S end
 -67 2192 a -67 2192 a
SDict begin 9 H.A end
 -67 2192
a -67 2192 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.1.22) cvn /DEST pdfmark
end
 -67 2192 a Fd(})p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 3
TeXDict begin 2 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -481 a
SDict begin H.S end
 -158 -481 a -158 -481 a
SDict begin H.R end
 -158 -481 a -158
-481 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -158 -481 a 0 TeXcolorgray 0 TeXcolorgray 4021
-373 a Fh(2)p 0 TeXcolorgray -150 -150 a
SDict begin H.S end
 -150 -150 a
-150 -150 a
SDict begin 12 H.A end
 -150 -150 a -150 -150 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 -150 -150 a 1357
-50 a Fi(I)t(I)t(.)45 b(C)t Fg(O)t(N)t(C)t(U)t(R)t(R)t(E)t(N)t(C)t(Y)27
b Fi(A)t Fg(S)t(S)t(I)t(G)t(N)t(M)t(E)t(N)t(T)-150 175
y Fj(Write-up)-150 374 y Fi(Our)18 b(concurrenc)o(y)e(solution)i
(implemented)f(pthreads)g(and)i(multithreading)d(to)j(solv)o(e)f(a)h
(producer/consumer)c(style)k(problem.)e(The)h(problem:)-150
474 y(with)26 b(a)g(b)n(uf)n(fer)f(of)h(size)g(32,)g(ha)n(v)o(e)f
(producers)f(add)h(items)h(\(structs)g(with)g(int)h(v)n(alue)e(number)f
(and)h(int)i(v)n(alue)e(w)o(ait)h(time\))g(to)g(the)g(b)n(uf)n(fer)-5
b(.)25 b(The)-150 574 y(producers)h(must)i(w)o(ait)g(a)h(random)d
(number)g(of)i(seconds)f(\(time)h(to)g(produce\))d(and)j(also)g(w)o
(ait)g(if)h(the)e(b)n(uf)n(fer)g(is)i(full.)e(The)h(consumers)f(tak)o
(e)-150 673 y(the)32 b(items)h(from)f(the)g(b)n(uf)n(fer)m(,)f
(sleeping)g(for)h(the)g(time)h(gi)n(v)o(en)e(in)i(the)f(b)n(uf)n(fer)f
(item)i(struct')-5 b(s)33 b(w)o(ait)g(v)n(alue,)e(and)h(blocking)e(if)j
(the)g(b)n(uf)n(fer)e(is)-150 773 y(empty)-5 b(.)27 b(T)-7
b(o)29 b(do)f(this)h(we)g(implemented)d(mute)o(x)o(es,)h(pthread)g
(conditions,)g(and)h(concurrent)e(programming.)-150 972
y(Our)i(producers,)f(once)h(the)h(thread)e(is)j(created,)e(get)h(a)g
(random)e(number)g(using)h(either)g(rdrand)f(from)h(x86)g(assembly)g
(instructions)g(or)h(the)-150 1072 y(implemented)g(mt19937)h(function)f
(and)i(sleep)g(for)g(that)h(amount)e(of)h(time)g(\(the)g(time)h(it)g
(tak)o(es)f(to)h(produce\).)d(When)i(done)f(sleeping)h(the)-150
1171 y(thread)24 b(will)h(lock)g(the)g(mute)o(x)e(which)i(gi)n(v)o(es)f
(it)i(e)o(xclusi)n(v)o(e)d(access)i(to)g(the)g(b)n(uf)n(fer)-5
b(.)24 b(It)h(then)f(enters)h(a)g(loop)f(to)h(see)h(if)f(there)f(are)h
(an)o(y)f(a)n(v)n(ailable)-150 1271 y(inde)o(x)o(es)h(in)i(the)g(b)n
(uf)n(fer)-5 b(.)26 b(If)g(the)h(b)n(uf)n(fer)e(is)j(full)e(the)h
(producer)e(thread)g(w)o(aits)j(for)e(a)h(consumer)e(to)i(thro)n(w)f
(the)h(pthread)e(condition)g(for)h(\224full\224)-150
1371 y(meaning)i(a)i(consumer)e(has)i(opened)e(up)h(a)h(space)f(on)h
(the)f(b)n(uf)n(fer)-5 b(.)29 b(Once)g(it)h(is)h(able)e(to)h(add)f(its)
h(item)g(to)g(the)f(b)n(uf)n(fer)g(it)h(thro)n(ws)f(a)h(pthread)-150
1470 y(condition)22 b(\224empty\224)g(to)i(signal)g(that)g(the)f(b)n
(uf)n(fer)g(is)h(no)g(longer)e(empty)-5 b(,)22 b(prints)i(out)f(the)h
(number)m(,)d(w)o(aits)k(the)f(time)f(for)h(the)f(item)h(it)h(is)f
(adding,)-150 1570 y(unlocks)j(the)i(mute)o(x,)e(and)h(e)o(xits.)-150
1769 y(Similarly)-5 b(,)24 b(our)g(consumer)f(threads)h(lock)g(the)h
(mute)o(x)f(and)g(enter)g(a)h(loop)f(checking)f(for)i(an)f(item)h(in)g
(the)g(b)n(uf)n(fer)e(to)i(consume.)f(If)g(the)h(b)n(uf)n(fer)-150
1869 y(is)32 b(empty)f(it)h(will)g(w)o(ait)g(for)e(a)i(producer)d
(thread)h(to)i(thro)n(w)e(a)i(pthread)e(condition)f(that)j(the)f(b)n
(uf)n(fer)f(is)i(no)f(longer)f(empty)-5 b(.)30 b(Once)h(there)g(is)-150
1968 y(an)c(a)n(v)n(ailable)g(item)g(in)g(the)g(b)n(uf)n(fer)f(the)h
(consumer)f(stores)h(its)h(number)d(and)i(w)o(ait)h(time)f(in)g(local)g
(v)n(ariables)g(and)f(sets)i(both)f(struct)g(\002elds)g(to)-150
2068 y(-1)i(\(implying)f(it)i(is)g(no)n(w)f(an)g(empty)g(space\))g(and)
f(unlocks)h(the)g(mute)o(x.)f(The)h(consumer)f(then)h(w)o(aits)h(the)f
(gi)n(v)o(en)f(amount)g(of)i(time,)f(prints)-150 2168
y(a)g(message)f(that)h(it)g(has)g(consumed)d(the)j(speci\002ed)f
(number)m(,)e(then)i(e)o(xits.)-150 2367 y(Our)33 b(main)g(function)f
(mallocs)i(enough)d(size)j(for)f(the)h(b)n(uf)n(fer)e(and)h(thread)g
(arrays,)g(checks)g(to)g(see)i(if)e(rdrand)f(is)j(a)n(v)n(ailable)e(to)
h(use,)f(and)-150 2466 y(initializes)f(the)f(mute)o(x)f(and)h(pthread)e
(conditions.)h(It)h(then)g(uses)h(for)e(loops)h(to)g(create)g(and)g
(pthread)p 2908 2477 42 5 v 39 w(join)g(all)h(the)f(threads)g(and)f(w)o
(ait)i(for)-150 2566 y(them)25 b(to)h(e)o(xit.)g(The)f(pthread)g
(condition)f(v)n(ariables)h(allo)n(w)g(the)h(threads)f(to)h
(synchronize)e(by)h(locking)g(and)g(unlocking)e(the)j(mute)o(x)f(until)
h(the)-150 2666 y(speci\002ed)i(condition)f(is)i(satis\002ed.)-150
2865 y(The)36 b(program)f(accepts)h(a)h(command)e(line)h(parameter)f
(as)i(the)g(number)e(of)h(threads)g(to)h(produce.)d(If)i(the)h(program)
d(is)k(e)o(x)o(ecuted)c(with)-150 2965 y Fc(./concurrency1)47
b(100)28 b Fi(it)g(will)h(create)e(100)g(producer)f(and)h(100)g
(consumer)f(threads.)h(On)h(our)f(o)n(wn)g(local)h(machines)e(this)j
(program)-150 3064 y(w)o(orks)f(for)g(N)h Fb(>)p Fi(1000)e(threads,)h
(b)n(ut)g(on)g(os-class)h(it)h(se)o(gf)o(aults)e(after)g(about)g(240)g
(threads,)f(which)h(we)h(assume)g(to)f(be)h(due)f(to)h(limitations)-150
3164 y(on)f(serv)o(er)g(permissions)f(to)i(mediate)f(the)h(amount)e(of)
h(threads)g(a)h(single)f(user)g(can)h(produce.)-150 3463
y Fj(What)h(do)h(y)n(ou)g(think)g(the)g(main)g(point)f(of)h(this)g
(assignment)g(is?)-150 3612 y Fi(The)k(main)g(point)g(of)g(the)h
(assignment)f(w)o(as)h(to)g(gain)e(more)h(e)o(xperience)e(with)j
(dealing)f(with)g(potential)g(race)g(conditions)f(and)h(ho)n(w)g(to)
-150 3712 y(allocate)f(processing)e(time)j(to)f(dif)n(ferent)e
(threads.)h(T)-7 b(o)34 b(deal)g(with)h(with)f(race)g(conditions,)e(we)
i(were)g(e)o(xpected)f(to)h(write)g(a)g(semaphore)-150
3811 y(implementation)28 b(or)i(to)g(use)h(mute)o(x)o(es)e(to)h(mak)o
(e)g(sure)g(critical)g(v)n(ariables)g(are)g(only)f(being)g(manipulated)
g(by)g(a)i(single)f(thread)f(at)i(a)g(time.)-150 3911
y(As)e(an)g(e)o(xtra,)f(this)h(assignment)f(w)o(as)h(also)g(about)f(gi)
n(ving)f(unique)g(information)f(to)j(dif)n(ferent)e(threads,)h(as)h
(each)f(had)g(to)h(be)g(a)o(w)o(are)f(which)-150 4011
y(fork)f(w)o(as)j(to)e(the)h(\223left\224)f(and)g(\223right\224)g(of)g
(each)g(thread.)-150 4260 y Fj(Ho)o(w)i(did)i(y)n(ou)e(personally)g
(appr)o(oach)g(the)g(pr)o(oblem?)-150 4409 y Fi(T)-7
b(o)28 b(k)o(eep)g(track)f(of)h(which)g(forks)f(were)h(being)f(used,)g
(we)i(simply)f(made)f(a)i(global)e(array)g(that)h(w)o(ould)f(hold)h(a)g
(boolean)f(v)n(alue)g(to)h(indicate)-150 4509 y(whether)c(the)g(fork)g
(w)o(as)h(in)g(use)g(or)g(not.)f(W)-7 b(e)26 b(also)f(created)f(a)h
(struct)f(for)g(each)h(thread)f(that)g(w)o(ould)g(contain)g(the)h(inde)
o(x)e(of)i(the)f(left)h(fork,)f(the)-150 4608 y(inde)o(x)k(of)i(the)f
(right)g(fork)g(and)g(the)g(name)g(\(ID\))g(of)g(the)h(thread.)e(This)i
(struct)g(w)o(as)g(passed)g(into)f(the)g(thread)g(starting)g(point)g
(when)g(calling)-150 4708 y(the)g(pthread)p 232 4719
V 39 w(create\(\))f(function.)-150 4808 y(When)c(the)g(thread)g
(starts,)h(it)g(generates)e(a)i(random)d(amount)h(of)h(thinking)f(time)
h(and)g(sleeps)h(for)f(that)g(amount)f(of)h(time.)g(Then,)f(it)j
(generates)-150 4957 y(a)k(random)e(eating)h(time)h(and)f(checks)g(if)h
(the)g(forks)f(adjacent)g(to)h(it)g(are)g(a)n(v)n(ailable)f(to)h(start)
g(eating.)f(If)h(not,)f(it)h(w)o(aits)h(until)f(the)o(y)f(are.)g(The)
-150 5057 y(thread)f(\224eats\224)g(for)g(the)h(amount)e(of)h(time)h
(speci\002ed)f(and)g(when)g(done,)f(it)i(releases)g(the)g(forks)e(for)h
(other)g(threads)g(to)g(use.)-150 5156 y(Each)i(time)g(the)h(forks)e
(array)h(is)h(about)e(to)i(e)o(xperience)d(a)j(read)f(or)g(write,)g(a)h
(global)e(mute)o(x)h(is)h(lock)o(ed)e(to)i(pre)n(v)o(ent)e(an)o(y)g
(race)h(conditions.)-150 5306 y(If)e(the)h(mute)o(x)e(is)j(already)d
(lock)o(ed,)g(then)h(the)h(thread)e(will)j(w)o(ait)f(until)f(a)n(v)n
(ailable)g(according)f(to)h(POSIX)h(implementation.)-150
5505 y Fj(Ho)o(w)h(did)i(y)n(ou)e(ensur)o(e)h(y)n(our)f(solution)h(was)
g(corr)o(ect?)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 3 4
TeXDict begin 3 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -481 a
SDict begin H.S end
 -158 -481 a -158 -481 a
SDict begin H.R end
 -158 -481 a -158
-481 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -158 -481 a 0 TeXcolorgray 0 TeXcolorgray 4021
-373 a Fh(3)p 0 TeXcolorgray -150 -50 a Fi(W)-7 b(e)29
b(ensured)e(that)g(our)g(implementation)f(w)o(as)j(correct)e(by)g
(printing)f(all)j(the)e(actions)h(of)g(each)f(thread)g(directly)g(to)h
(standard)e(output.)h(That)-150 49 y(w)o(ay)-5 b(,)36
b(we)h(can)g(clearly)f(see)h(who)g(is)g(thinking)f(or)g(eating)g(and)h
(for)f(ho)n(w)g(long.)g(Furthermore,)e(we)j(print)f(out)g(the)h(state)h
(of)e(each)h(fork)-150 149 y(\(a)n(v)n(ailable)28 b(or)g(in)h(use\).)f
(Finally)-5 b(,)27 b(we)i(also)g(print)f(thinking)f(times)i(and)f
(eating)g(times.)-150 494 y Fj(What)i(did)i(y)n(ou)e(lear)o(n?)-150
642 y Fi(During)g(this)i(assignment,)f(I)g(learned)g(ho)n(w)g(to)g
(properly)f(pass)i(v)n(ariables)e(when)h(creating)g(a)h(thread.)e
(Although)g(only)g(a)i(single)g(v)n(ariable)-150 741
y(of)g(type)g(\(v)n(oid)g(*\))g(can)h(be)f(passed,)g(a)h(structure)f
(can)g(be)h(created)e(and)h(typecasted)g(into)g(a)h(v)n(oid)f(pointer)f
(which)h(lets)i(us)f(pass)g(in)f(more)-150 841 y(ar)o(guments.)26
b(Furthermore,)g(the)j(ar)o(gument)d(and)i(return)f(type)h(of)g(the)h
(function)d(need)i(to)h(be)f(e)o(xplicitly)g(de\002ned)f(as)i(v)n(oid)f
(pointer)-5 b(.)-150 941 y(Another)32 b(thing)h(I)g(learned)g(is)h
(that)g(the)f(memset\(\))g(function)e(thro)n(ws)i(out)g(the)h(')l(v)n
(olatile')e(tag)i(if)f(being)g(used)g(on)g(a)h(v)n(olatile)f(v)n
(ariable.)f(I)-150 1040 y(k)o(ept)25 b(using)g(memset\(\))g(b)n(ut)g
(made)g(sure)g(the)h(compiler)e(optimizations)g(were)i(disabled)e
(\(just)i(in)g(case\))f(since)h(we)g(are)f(w)o(orking)f(with)i(a)g(fe)n
(w)-150 1140 y(global)i(v)n(ariables.)-150 1240 y(Finally)-5
b(,)23 b(I)g(learned)g(that)h(it)g(is)g(a)g(good)e(habit)h(to)h(also)g
(lock)f(mute)o(x)o(es)f(when)h(reading)f(a)i(shared)f(v)n(ariable,)f
(otherwise)h(you)g(might)g(be)g(reading)-150 1339 y(some)i(wrong)f
(information.)f(It')-5 b(s)26 b(hard)f(to)g(predict)g(when)g(the)g
(data)g(will)h(change,)e(and)h(it')-5 b(s)27 b(safer)e(to)g(freeze)g
(the)h(state)g(of)f(critical)g(v)n(ariables)-150 1439
y(when)j(reading)f(multiple)h(of)g(them)g(so)h(that)g(the)o(y)e(are)i
(in)f(the)h(same)g(\223time)f(state\224.)-150 1744 y
SDict begin H.S end

-150 1744 a -150 1744 a
SDict begin 12 H.A end
 -150 1744 a -150 1744 a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 -150
1744 a 1431 1843 a Fi(I)t(I)t(I)t(.)45 b(V)t Fg(E)t(R)t(S)t(I)t(O)t(N)
25 b Fi(C)t Fg(O)t(N)t(T)t(R)q(O)t(L)h Fi(L)t Fg(O)t(G)-100
2037 y Fj(Detail)177 b(A)l(uthor)432 b(Description)p
-150 2070 4450 4 v 0 TeXcolorgray -100 2141 a
SDict begin H.S end
 -100 2141
a 0 TeXcolorgray -1 x Fi(6fc0cad)p 0 TeXcolorgray 163
2083 a
SDict begin H.R end
 163 2083 a 163 2140 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/6fc0cad45a2a515f54c120fa6d411cbb62a0eed5)>>/Subtype
/Link H.B /ANN pdfmark end
 163 2140 a 0 TeXcolorgray
127 w Fi(DSchroederOSU)122 b(Initial)28 b(commit)p -150
2173 4450 4 v 0 TeXcolorgray -100 2244 a
SDict begin H.S end
 -100 2244 a
0 TeXcolorgray -1 x Fi(237aed0)p 0 TeXcolorgray 181 2186
a
SDict begin H.R end
 181 2186 a 181 2243 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/237aed09afe1e61e9421f419164f4d41387adddd)>>/Subtype
/Link H.B /ANN pdfmark end
 181 2243 a 0 TeXcolorgray 109
w Fi(DSchroederOSU)122 b(Added)27 b(assignment)h(1)g(folder)g(and)f
(starter)i(\002le)p -150 2276 4450 4 v 0 TeXcolorgray
-100 2347 a
SDict begin H.S end
 -100 2347 a 0 TeXcolorgray -1 x Fi(2c475d7)p
0 TeXcolorgray 186 2289 a
SDict begin H.R end
 186 2289 a 186 2346 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/2c475d7e15d1a54406c275a2a27c5df472c46ded)>>/Subtype
/Link H.B /ANN pdfmark end
 186 2346
a 0 TeXcolorgray 104 w Fi(DSchroederOSU)122 b(added)27
b(concurrenc)o(y)e(1)k(\002le)p -150 2379 4450 4 v 0
TeXcolorgray -100 2450 a
SDict begin H.S end
 -100 2450 a 0 TeXcolorgray -1
x Fi(4126204)p 0 TeXcolorgray 190 2392 a
SDict begin H.R end
 190 2392 a 190
2449 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/4126204c49cd2e10090eb4d6bd3183bc23c94648)>>/Subtype
/Link H.B /ANN pdfmark end
 190 2449 a 0 TeXcolorgray 100 w Fi(DSchroederOSU)122
b(w)o(orking)27 b(on)h(concurrenc)o(y1.c.)c(made)j(a)i(sk)o(eleton)f
(of)h(the)f(project)p -150 2482 4450 4 v 0 TeXcolorgray
-100 2553 a
SDict begin H.S end
 -100 2553 a 0 TeXcolorgray -1 x Fi(d862ede)p
0 TeXcolorgray 181 2495 a
SDict begin H.R end
 181 2495 a 181 2552 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/d862edec54dd0eb51bdde6e26337315a2675d434)>>/Subtype
/Link H.B /ANN pdfmark end
 181 2552
a 0 TeXcolorgray 109 w Fi(DSchroederOSU)122 b(progress,)27
b(got)h(rdrand)f(to)h(w)o(ork)p -150 2585 4450 4 v 0
TeXcolorgray -100 2656 a
SDict begin H.S end
 -100 2656 a 0 TeXcolorgray -1
x Fi(a134ada)p 0 TeXcolorgray 176 2598 a
SDict begin H.R end
 176 2598 a 176
2655 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/a134adaeeff0b0ebc7bc662d809edc973ab6f841)>>/Subtype
/Link H.B /ANN pdfmark end
 176 2655 a 0 TeXcolorgray 114 w Fi(DSchroederOSU)122
b(\002nished)28 b(concurrenc)o(y)d(logic)j(with)g(tw)o(o)h(threads)p
-150 2688 4450 4 v 0 TeXcolorgray -100 2760 a
SDict begin H.S end
 -100 2760
a 0 TeXcolorgray -2 x Fi(7096e2f)p 0 TeXcolorgray 172
2701 a
SDict begin H.R end
 172 2701 a 172 2758 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/7096e2f214d8f164dcf02c58d8924f903281e867)>>/Subtype
/Link H.B /ANN pdfmark end
 172 2758 a 0 TeXcolorgray
118 w Fi(DSchroederOSU)122 b(DONE)28 b(I)h(THINK)p -150
2791 4450 4 v 0 TeXcolorgray -100 2863 a
SDict begin H.S end
 -100 2863 a
0 TeXcolorgray -2 x Fi(29c5440)p 0 TeXcolorgray 186 2804
a
SDict begin H.R end
 186 2804 a 186 2861 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/29c5440b4d14c3656d11c907e8794f6f08d98897)>>/Subtype
/Link H.B /ANN pdfmark end
 186 2861 a 0 TeXcolorgray 104
w Fi(DSchroederOSU)122 b(This)28 b(w)o(orks)g(for)g(n)h(threads,)e
(there)h(w)o(as)i(a)f(b)n(ug)f(that)g(w)o(ould)g(not)g(clear)h(the)f(b)
n(uf)n(fer)f(space)i(once)e(consumed)p -150 2894 4450
4 v 0 TeXcolorgray -100 2965 a
SDict begin H.S end
 -100 2965 a 0 TeXcolorgray
-1 x Fi(c6ed2db)p 0 TeXcolorgray 181 2907 a
SDict begin H.R end
 181 2907
a 181 2964 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/c6ed2db4aab53f542abd8a00c05c9cf7953d9712)>>/Subtype
/Link H.B /ANN pdfmark end
 181 2964 a 0 TeXcolorgray 109 w Fi(ozaro)n(wib)378
b(recitation)27 b(program)p -150 2997 4450 4 v 0 TeXcolorgray
-100 3068 a
SDict begin H.S end
 -100 3068 a 0 TeXcolorgray -1 x Fi(ce1d4cd)p
0 TeXcolorgray 176 3010 a
SDict begin H.R end
 176 3010 a 176 3067 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/ce1d4cd2a712b1dfed27d304539fd552d15c4c6c)>>/Subtype
/Link H.B /ANN pdfmark end
 176 3067
a 0 TeXcolorgray 114 w Fi(DSchroederOSU)122 b(added)27
b(second)h(random)e(generator)p -150 3100 4450 4 v 0
TeXcolorgray -100 3170 a
SDict begin H.S end
 -100 3170 a 0 TeXcolorgray -1
x Fi(870a6cf)p 0 TeXcolorgray 167 3113 a
SDict begin H.R end
 167 3113 a 167
3169 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/870a6cf75e9cf205425b40b0fd90a21bece56299)>>/Subtype
/Link H.B /ANN pdfmark end
 167 3169 a 0 TeXcolorgray 123 w Fi(DSchroederOSU)122
b(Mer)o(ge)27 b(branch)g('master')g(of)i(https://github)m
(.com/DSchroederOSU/CS44)o(4-)o(Grou)o(p)p 3564 3180
42 5 v 35 w(11)p 3683 3180 V 41 w(05)p -150 3203 4450
4 v 0 TeXcolorgray -100 3273 a
SDict begin H.S end
 -100 3273 a 0 TeXcolorgray
-1 x Fi(17f)o(a4d7)p 0 TeXcolorgray 171 3216 a
SDict begin H.R end
 171 3216
a 171 3272 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/17fa4d7daa607f5a8466d4c854083fe763728c40)>>/Subtype
/Link H.B /ANN pdfmark end
 171 3272 a 0 TeXcolorgray 119 w Fi(Daniel)f(Schroeder)98
b(w)o(orks)28 b(on)g(os-class)p -150 3306 4450 4 v 0
TeXcolorgray -100 3376 a
SDict begin H.S end
 -100 3376 a 0 TeXcolorgray -1
x Fi(8efe181)p 0 TeXcolorgray 167 3319 a
SDict begin H.R end
 167 3319 a 167
3375 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/8efe18126d63f4c3156da70cb6e8d6f3bb95dcf6)>>/Subtype
/Link H.B /ANN pdfmark end
 167 3375 a 0 TeXcolorgray 123 w Fi(Daniel)g(Schroeder)98
b(test)p -150 3409 4450 4 v 0 TeXcolorgray -100 3479
a
SDict begin H.S end
 -100 3479 a 0 TeXcolorgray -1 x Fi(f860768)p 0 TeXcolorgray
177 3422 a
SDict begin H.R end
 177 3422 a 177 3478 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/f86076889a02b98fd55cc73c537e49ce93315ea4)>>/Subtype
/Link H.B /ANN pdfmark end
 177 3478 a 0 TeXcolorgray
113 w Fi(DSchroederOSU)122 b(\002x)o(ed)27 b(ar)o(gc)p
-150 3512 4450 4 v 0 TeXcolorgray -100 3582 a
SDict begin H.S end
 -100 3582
a 0 TeXcolorgray -1 x Fi(63f1ea3)p 0 TeXcolorgray 167
3525 a
SDict begin H.R end
 167 3525 a 167 3581 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/63f1ea3079fb2044a5fd16f4f60ed0afcecbca13)>>/Subtype
/Link H.B /ANN pdfmark end
 167 3581 a 0 TeXcolorgray
123 w Fi(Daniel)h(Schroeder)98 b(te)o(x)28 b(progress)p
-150 3614 4450 4 v 0 TeXcolorgray -100 3686 a
SDict begin H.S end
 -100 3686
a 0 TeXcolorgray -2 x Fi(e3916b0)p 0 TeXcolorgray 186
3628 a
SDict begin H.R end
 186 3628 a 186 3684 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/e3916b0f556dc4093d8689662850a7ac1a0a3e71)>>/Subtype
/Link H.B /ANN pdfmark end
 186 3684 a 0 TeXcolorgray
104 w Fi(Daniel)g(Schroeder)98 b(idk)p -150 3717 4450
4 v 0 TeXcolorgray -100 3788 a
SDict begin H.S end
 -100 3788 a 0 TeXcolorgray
-1 x Fi(bafbb73)p 0 TeXcolorgray 172 3731 a
SDict begin H.R end
 172 3731
a 172 3787 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/bafbb7390e8525a17d2ad32ccd003c800ed0b4f0)>>/Subtype
/Link H.B /ANN pdfmark end
 172 3787 a 0 TeXcolorgray 118 w Fi(Daniel)28
b(Schroeder)98 b(ahaha)p -150 3820 4450 4 v 0 TeXcolorgray
-100 3891 a
SDict begin H.S end
 -100 3891 a 0 TeXcolorgray -1 x Fi(d8ae437)p
0 TeXcolorgray 181 3833 a
SDict begin H.R end
 181 3833 a 181 3890 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/d8ae437d3f4dffe4287eab3471225d489f16af0a)>>/Subtype
/Link H.B /ANN pdfmark end
 181 3890
a 0 TeXcolorgray 109 w Fi(ozaro)n(wib)378 b(conformed)25
b(to)k(class)g(style)g(guide)p -150 3923 4450 4 v 0 TeXcolorgray
-100 3994 a
SDict begin H.S end
 -100 3994 a 0 TeXcolorgray -1 x Fi(c7bf34a)p
0 TeXcolorgray 167 3936 a
SDict begin H.R end
 167 3936 a 167 3993 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/c7bf34a5a0bdc36bfc9815bdf012847cb9b6b3da)>>/Subtype
/Link H.B /ANN pdfmark end
 167 3993
a 0 TeXcolorgray 123 w Fi(ozaro)n(wib)378 b(IEEEtran)27
b(w)o(orking,)f(updated)h(Mak)o(e\002le)p -150 4026 4450
4 v -150 4232 a
SDict begin H.S end
 -150 4232 a -150 4232 a
SDict begin 12 H.A end
 -150 4232 a -150
4232 a
SDict begin [/View [/XYZ H.V]/Dest (section.4) cvn /DEST pdfmark end
 -150 4232 a 1669 4331 a Fi(I)t(V)-7 b(.)46 b(W)s
Fg(O)t(R)t(K)26 b Fi(L)t Fg(O)t(G)p 0 TeXcolorgray -59
4554 a Fa(\017)p 0 TeXcolorgray 41 w Fi(Brian)j(and)f(Daniel)g(created)
g(group)e(directory)h(on)h(os-class)h(at)g(recitation)f(April)g(11th)g
(at)h(11:00am)p 0 TeXcolorgray -59 4653 a Fa(\017)p 0
TeXcolorgray 41 w Fi(Brian)g(ran)f(script)g(for)g(setting)h(folder)e
(permissions)h(on)g(Friday)f(April)i(14th)p 0 TeXcolorgray
-59 4753 a Fa(\017)p 0 TeXcolorgray 41 w Fi(Daniel)k(and)f(Brian)h(met)
g(in)g(OSU)g(Library)f(at)h(1:50)f(pm)g(on)h(Monday)e(April)i(17th.)e
(W)-7 b(ork)o(ed)33 b(until)f(3:30pm)f(on)i(initial)g(code)f(and)16
4853 y(write-up)27 b(document)p 0 TeXcolorgray -59 4952
a Fa(\017)p 0 TeXcolorgray 41 w Fi(Throughout)h(W)-7
b(ednesday)30 b(April)h(19th)f(Daniel)h(de)n(v)o(eloped)e(the)i
(initial)g(v)o(ersion)f(of)h(the)g(home)n(w)o(ork)e(concurrenc)o(y)f
(program)h(while)16 5052 y(Brian)37 b(wrote)f(the)g(delayed)f
(concurrenc)o(y)e(program)h(from)i(T)l(uesday')-5 b(s)36
b(recitation;)f(Brian)i(re)n(vie)n(wed)e(Daniel')-5 b(s)37
b(code)e(W)-7 b(ednesday)16 5151 y(e)n(v)o(ening)p 0
TeXcolorgray -59 5251 a Fa(\017)p 0 TeXcolorgray 41 w
Fi(Brian)31 b(and)f(Daniel)h(met)f(afternoon)f(of)h(Thursday)f(April)i
(20th)e(to)i(re)n(vie)n(w)f(and)g(complete)g(concurrenc)o(y1.c)c(code;)
31 b(found)e(compile)16 5351 y(errors)f(and)g(rdrand)e(error)i(when)g
(run)f(on)h(os-class)p 0 TeXcolorgray -59 5450 a Fa(\017)p
0 TeXcolorgray 41 w Fi(Daniel)f(and)g(Brian)g(implemented)e(mt19937)g
(function)h(into)h(concurrenc)o(y1.c)22 b(e)n(v)o(ening)k(of)h(April)g
(20th)f(so)h(random)f(numbers)g(could)16 5550 y(be)i(generated)f(on)h
(os-class)h(and)f(did)g(\002nal)h(deb)n(ugging)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 4 5
TeXDict begin 4 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -481 a
SDict begin H.S end
 -158 -481 a -158 -481 a
SDict begin H.R end
 -158 -481 a -158
-481 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -158 -481 a 0 TeXcolorgray 0 TeXcolorgray 4021
-373 a Fh(4)p 0 TeXcolorgray 0 TeXcolorgray -59 -50 a
Fa(\017)p 0 TeXcolorgray 41 w Fi(Throughout)25 b(Friday)j(April)g(21st)
h(Daniel)f(and)g(Brian)h(w)o(ork)o(ed)e(on)h(the)h(L)2208
-67 y Fh(A)2238 -50 y Fi(T)2275 -32 y(E)2314 -50 y(X)g(Mak)o(e\002le)g
(and)e(formatting)p 0 TeXcolorgray -59 49 a Fa(\017)p
0 TeXcolorgray 41 w Fi(Brian)i(and)f(Daniel)g(\002nished)g(the)g
(assignment)g(write-up)f(in)i(a)g(Google)e(Doc)p 0 TeXcolorgray
-59 149 a Fa(\017)p 0 TeXcolorgray 41 w Fi(Brian)i(re)n(vised)e(the)i
(concurrenc)o(y1.c)24 b(code)k(to)h(follo)n(w)e(the)i(class)g(style)g
(guidelines)p 0 TeXcolorgray -59 249 a Fa(\017)p 0 TeXcolorgray
41 w Fi(Brian)g(transferred)d(the)j(content)e(from)h(the)g(Google)g
(Doc)g(write-up)f(to)i(the)f(L)2339 232 y Fh(A)2369 249
y Fi(T)2406 267 y(E)2446 249 y(X)h(\002le)p 0 TeXcolorgray
-59 348 a Fa(\017)p 0 TeXcolorgray 41 w Fi(Brian)g(added)e
(IEEEtran.cls)g(\002le)i(to)g(directory)d(so)j(proper)e(formatting)g
(could)g(be)i(applied)p 0 TeXcolorgray -59 448 a Fa(\017)p
0 TeXcolorgray 41 w Fi(Daniel)f(and)g(Brian)h(pushed)e(\002nal)i
(changes)e(to)i(GitHub)f(and)g(prepared)e(tarball)j(for)f(submission)f
(on)h(TEA)m(CH)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

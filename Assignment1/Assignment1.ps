%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: Assignment1.dvi
%%CreationDate: Mon May  1 22:18:46 2017
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusRomNo9L-Regu NimbusRomNo9L-Medi NimbusMonL-Regu
%%+ CMSY7 CMMI10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter Assignment1.dvi -o
%+ Assignment1.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.05.01:2218
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 62 /greater put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D916672480464F7E22
CA6E431FE38D3FC019BDD229E064B72C545C61C6EA55984565CCA88ACB01F744
3B4593CC8953C83DFB6FF3C5F9113898F45B76D98F7F118FE4D1E6BE669545C3
92676FA583E3D3B272D5BFB24153AF62BF53BA0C81BF5AA2012FD33DD7640BDD
5CE8BA566FC85FC277B1EF69622D720569405B04D49FAA4C9FB2D4E3983D5C90
6B9A4327AB712D655D33EBE0C95E1325576B034525DC7BEE4BE00928DFD23FC7
42F317916B81D6B189FAD3045D66E40AED0B64F709989F419019BD5CAD255631
C91E48735BF1A70917B17928088769ECA64EA6FF215A445CBCB6D6D784022768
BAE9BE186FBC80269392EC8C86
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY7
%!PS-AdobeFont-1.0: CMSY7 003.002
%%Title: CMSY7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY7 known{/CMSY7 findfont dup/UniqueID known{dup
/UniqueID get 5096648 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY7 def
/FontBBox {-15 -951 1251 782 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY7.) readonly def
/FullName (CMSY7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D9DAFF1B3EA76067
C5493B69F73B89C8B61804A34FCEC826343337CCDFFCE17BF343EA8034BF95AA
14C56862C2C052569AFB236E1F1795F05150C8F28DFEF6BF4BCBACB678D00036
30EE84FEB44B1A8438185EB45654E6853C1159B073E54292D135F0961A64E8A5
AAE49C4BA9C44156C123426212120F99F3E8B7425752A5FE384AAEF755A8464B
51F015F9E2967477D57B22627D75CEF8AAAF0AEBD504EB46D0289DFC8D86C972
F042BD88A90A53613DD93D8A7A8460E63D85F6C15C000C0AAEE4BD5130B6E668
8C9B3F3FFD804745DA1D5EC0AB85C96E1724FA67F9324C59275415182AB48D57
9722DCF602396AD4B5C075A5A89A5D005C9FE11273E5FBDDD1800F11BBDF6AEC
6711C5633A73AC5DF038BA521AC492E138F7FFC7C5438FFD32FEAA1128C66E83
0D3AA40665F05E62D7EF00B1B0596162C402A34B6BAE6300D43F3DFCC84860F5
C0F0F1CE28FC60642BBFE9BC9102E80146774CDC88F9C250DE762D24A3484BCD
1D26B6D9FE981CA5AAB2A4BEDC528115043DC18D7105735D7528C2C5DD89A812
75B5D7B2E5A586FBB0C061E708F92C1552F64A296490BD0F20243986A4707FF9
8AB3C917B8DB92F19DCA6B9D4A1DB57515E51DD85D5C9D2CAF7A036AA3F9E9B1
5B5E099CC05A9126AB274C17D75CB4FAF78052366D2F21EDAADF84B22A2D645A
3E65C4BC0F540B5D9609D88DD0E4CBEEF87C16447D43A5F98528FD45ADD10DE6
41AEC411FD6929308F0E4F48A8D9C9EE386E920D41C1CC98A52073011DF5BD28
5683F280B5CF7F27DC50930C81D344FF5A8A9258A207D2531AC21A735B14155B
C22C752DD22AA33C52D6D4D053B3E46FD4C9129068DFF52695A3A9184D04E8EC
93696A3FEC3AEB3814D9015EC14C22EC3ABD5070E8C28A3B42F5596D948212B4
AFB9978A0A361135C9E18CBDC98E0D1E8BDC17E25DDB3D52E86127E5AAECC55D
FEE61693190E378978EF1BBD4D1AF005D511C7607CCFA4BCBD3EC427CAD82809
B725B25AE8A03EE88F80A7732A571A2317E0B6A0D072EE8CE2EB9E033CDCC899
B64CF4FA1C708A885442062F08D3D8DAF44C066EE278714D1486EB709D327865
A483F62709E89D08291F044325208EBA758DD459481334F5D9AE3BB61B3020F2
A4538CFC2C94BE84C920BE80806FDCEE394230730E049333A7E16509207514FD
695B5E0AEA9E4A9737311AA0B33B15F6769FF865D1ACB63DC6201C3F1062A3FD
1B446C1857460745917A36289DD57C94FE6240F4A40FBDFC10E91B91B79029D9
9F1B9C74E8E5AA011A0ECBEC660230AD5929F01D0325D15FDC0040406F124021
02AE176F4C98BAC1706F03C2B5B40F325A50CA4683B2BB4605E68E72D0CBDC2D
96B3BBCDD01201B650A7E7744D58D1E36D81FBF72E0A875FF29B4C109A1950FC
9621B18D58806392EEE9841794DFD39E3C4E20D45384FE07F9D445F143B922D1
AB350AA6DFC51FCF767B141A392D6A8B633AACBCEC9F56A0CF40AB08020EE63E
08CC0BE01B40E86388A65F5869F2F4D022DD4B912031CB8CEDEDFC2473772569
5B28F66AB74CD7902A0061AA3547D13C7F0C6EEEA7B0BD316694A94E4D672520
EA044AB28D8D01076C486CE456EDA1811F7ACA75D27473080D27D3E681E35FC6
447046120C6CC4C17674F0F051570A79DCA74848F3F300B58B19018430D99858
CA5504084D6BB74CFDB635B6866974A9AF05DF201C69352B2663B0623E7828B9
5EC5FFA8D8F10A7C28000F8C679B180067D5481D6315BF1C4194EB171C8F3CE2
4CE319975B9E948D907F9F7EEAF07089844391555F329E331D52FF114668B8A4
80704B3C6AC0CCAA2F5D043CE44E65EDA89A0CA854CFDCB11D549B7FA72EDB90
D35353C34A771B1FAF96F83FCA5258AAB65384BAFFCE448690C1432A1F749C20
5817205185F973FA098BA856584753E75EBEBF387FC155202885F5B67117DD7E
70D1CD887183C5573B6FB607D4F6CC9F8B94B09B3F3AEC2EF1E6A320CF6D0112
63046321941D1FB3F2140B59370AA9387E24D579D389A166A10C989497FE9549
34E1AC2E546CC06C5308460DBEF3E1AEEB6CBB0FFDAC458E61DE3391480CF5CD
34A647D4DE15B81131B7D1F9EED4C6837A32E89B0EAAD6A05F5F67518655E5DB
224D4833CEC60D5DBBDB8A03FB1A9730589BB4F0FF56191D17E73B9562E0C356
B188882B36F9505F6F42EB2644FEE125C2A7D12227ABC8ADB924E88B0A9E8DC2
79762523B0B88DBBE6AC7968A46BD9E9F0C3F03F5F64724CA07782195F01F130
30DBE895C212E0EE20162D863F46A674D85232FA0DEE69A8DF019794AF6873AD
9CC2A5EEEF9393313CA519BF95C08ADF7A75B6F53EDCDC39851D20E58B97CA57
A7523717AA1821DEA94C8A9F8B82346B16D92D15AEDC16F0011A45A44B09DE47
08CBA46E8511D0C5CC83F952EEFA4ACFA7F3D7FA5E113EF6B70E5ABA6F1AD3B1
E4D3B15AC6D5C3BC70A3946F411A7D965D6FA9D7B6C6ECE19B2C29A2FF476251
EBF0CF3BF658A1D896323706172746F58B2DE49F8B7E431E20304A42694CCF73
11C4E9E96260CC442E2938A1E27EE6744C7CAB01634C8210CE40488B9CBD757C
4277B5E3E43C7560291D945F9128AF1F85924003418F96458ADDC5BB8EC431D5
AC9093D20DEA69B92454613BC1A82DAD4FBF8E56084494D9D2FFABD82A7C9847
171FE36B265B546F3072B0923840E6C6BB12CA53E05A99F0E8FD4F5109782746
7CAB9B35B68050230736AE624B7862D1244C7D9BE4D1CAAE21B123D1E8372377
F1FEF269A9A2EDF02CE0CC8BF92FD7EF09556987B8A3BF6D8C0A663DB6B9742B
E9AC61A449106AF1EA7ACAD40AC6F59427CC51865E6A90CF2AEED8D6037BA70E
4ADDAF622CDE877C98C3B2006B4721FC9BA18E30F0752BD4ACE36221F5CD1497
8FEDA5D643BE2EE007970A68E53D85975116E6CC09F0039A09EBAF0CA4B0EED6
A485CC0B69E526033FD1C1190BC5686739CE13D1AE8EBCABC01FCFF26141867C
44ED291196E546369129B9F759FDD7DC21BAF0A528FC34BA9FA8937813953644
C539F9DA4E55E83DB3D6DA309C562DA1330B157957B18F7618544AB738E25F16
F0517CD13C1F11BB8EA056BDC575D77CDC526EF497639DD89C2098660C5C45B2
D7CF715AC5E76847E0D3178360DAC1BAF6ACAEE72453B845B9F86621C166857B
029CEF5AFE29D1EDB4CA3AD7D008B7550A779E0066D7312DD6C7AFE1C0BFFF25
7B062B0DF30032EA2A2FE3CC46C96A3A0BA1888D1D2B05424A59ABE3EE928ED8
B67F507EFA78AE128F58B54634C7F534B3D0F4AFC23E38FB56EB39CFA425FD37
848545EAD03EDC5A9E796CEFB345F527615C785963F536972EBD9CFC4A6A4A07
5A31A508CA147FBB762ADD198CE36DF86730FCE2B643D1E7DF0BDE800DE7AF89
44A36B04193E44231E08919EE91A8B559646DC4DFAFF0AD891890A0A88FFA8EF
B066BCB7AFCA409C51889E7FEB33F19A3CB1268BD0EA74AF29C1401BABD16F87
ACF7DD65A8513DA9995C5092C36A774BC4260113360D29AF7ADF5D22B5B58E7E
A9BEFC33B9A91D2C397B27A81087376CB623318A8362C3FA9CBE3026675723C2
E711910DDB328E0EE3FCE219F44FE528B70E58B8E6CDB4AAB48237DD933D9639
E9D4F9EADAA8D46537D964D75C27F210B0C2473CB60D65F61BBD91ADE01576BF
77C49E31936138B0FBA066BE910DE1B1F0E4FFB5E81038E8656ABFF08DFD923E
6BA2AFEDCE6998BBF7045393C34811501586A4846E5B942C8E99D4C481D3AE60
2796ADBB5242D59F1116EBB828014BD903EF58B223DFD18BFBAAE4D348876B06
CAC10B7AF0DC270E6702A3F75D4DCEF872F2CDB9470AC9A1DC1ABCB55636D26F
9CB6BF27A0DAEB1F62AFEC12F55F78C9B59AC6DA9DB4B45444B0C582DB4DB8A4
B31EF4AFB77988E92FC0B257374B4408406490D9AFCC495316D6C08BEC9A76C7
12371E14417711EF802FB7151B3F6A2580C97527C9C3A0FAAB8D62FD992AA18F
EBEB36F7910186CD5F70A55DFE932757C299D9D2289796769A00A0C6ABD18F82
E0D4E95D6477E67B4C012DBBD098FE20E2F15C412DD2AD5471A65EACE05B3A1A
0C9C430BAEF4887F2CCE668116B87FFD9DAB4B9B3605CD26E6B12488058AFA30
8843791A95BB322DF5C47387F3EC72343855D6B23D72144EB5EB5157B8B238FD
6C71DDDA64C9539F66A7DD569FFF43DBE4A8F0608A3CBD354DD9BAB5E3C756DD
92C3C1B3E169D86A2230299432488BC04A87E08A80809F9968676DF9157B1C91
27C664ABCCBA9997FAD8966F766B325086899D1FE44581FE07C97688B3E15B0C
234A22646C32BB965B9BFD2CD34854D1488AAF021E169BF9CA9665CF040E25A8
16156C80A2F47397CD370AAEDA731E0D14FBEE1E51A17DB972D96DBCCE33F937
5CDBF1A650BF1D3536BA4CB7A1CACFD5CB457E2368A660A62AC26E64A631B2BA
6B08EBE42E02D9B1B2E95BF9F0A6B59C96A122968FD46A4D17BA3D018CCBA0F9
80BA3C1E6C683111AFF79303CF64F1D2CCBD7571C6E09DD9B27B8E101BE219F0
E075880A0E367885AC94143E777DAE455B990383100EADF786300602C2CE28F2
4F44662FDF03BD39A5181912D8F1243C36FF88882CFC4B34C1D4EBBC01D96A7D
9CE5303042D1B21042E4FEAA455F22A01333FCAD7E4AACA5D3A5386331985F6B
9B247EC6310BB07507321BEF3E4ECFC3B915AAA6E029B3999644C987640863B0
5DCF58CE479497AFAD1208FEFD1796E74467E9F7867C313A3412E6923F4C9144
C69EFA17965056DF043DB465BF2F1E191706D3AAB47E6AD5C9767E4A73B29F2D
E2E579D0262237568F82B360ADB6D0219B7535EFD02DD0688CDD23D84FC4F308
5D2D0010B1A9F4F0321A00C154672D21708B66B91ADCF98BAC7A2F94848E9A4E
86CC82EDD0399BD9F13E43359E71F80086B9B0C3B6D08831D4479ED83E7892C4
90C477BD1F06DFEBBF60F26516EECDEFE4787EEA8683754F2B257D0BAA607DBA
35EC6D1618C2FDF3881827F92D793ECF152D761F2423A96210F582DC9B90120F
26A33025414716A5E6F56D712E31BABE5047EC4855B767AC63D793995C9E074B
6E35C7E5255FBF4C3F17E7AD7B2A6C5F7459794FC94306B581536910F244BF5A
3158E821CE75F4B0565EBE985DF24DAA92F9C1D848EEC6B88E21FB6C51125872
1752F7352291960E5BD36F78AABBCF6DAA4D07AF56E4B6058AAB13D41BCDAA14
C0D63C6807FCD0E2B4B9CC892F224843173A75DC53A8F0FA396959C2E2CFE3F5
9B1C8B62797F34E7A0BFCF0787C73FEF98442234A617CF161829498035D30B29
ADFEAABD0B496E8A2E764D22DB7737F950FC5982F1C5F4FD414C1B0202F40FBA
62C81B8F0E836CD73D79366FD62388B437B81FC673442EE34BF27454F72A08F3
389E60CE28A050601A42FB4491C60DC02EC008E6B9DD2495522BBEC7293E2923
120584E88412DA7137397B41A28706B1CC6BB0C80709A2A4BA79822D245757A4
3EE454198942ED2316FAEB981F7615E642167620EBDDC5B271E273216EB119C6
4F2F0412F0BA6E3BA396217597575C6739194E1F839232FF088FDDFD3695A5CB
9A0E220389938596D8BDB183138E1F73F64512E4FAB5E1328F9B42364E3113B8
004BE2CA0B074EE271BBE0260D31CE555D535C16EBB528747EBAFFF253E659DA
3A377CBE0B296276AACF0294CF90FDAADB4EAD5E2F600E5B2A018DEFB86FF61C
84296480A425687CCE37D671472537E897AFD4B8C6A6175E1ADDF9AD24DFC5C3
A73E18AC2D9B28BDA2F17D51DB3521945850DAF0EE48B0FAC271544C1B4F3B2D
53BFC8DE32BA366FB1FEC0DD6C0B1FEA374CBE2B96F5B235A1D83A240DB442C7
1460980A3E5B96AE3D5784DE2C2DFFA671E0A856DB2FF4130E5905F3D5338856
C11A468D867D0C6EC585F1AD3E7164B8598BB59973B9A952FAE819F052A6554D
EDC342BCCB0525905D1D27ECB9EE43847B69AE116F494CB2DBBAFB2773F1A3E1
C75FBDF8D66FA5AB4005757D631A0D9424FCDA91A1D2AC6FCE7CC7A23E84C65B
3E92BC684F23467DCF8521E0E27CF1441C487EC6E3BCA0AB54BB137E83776009
833D772FD225E88A8BD992FD69819B3BA90BAAD1DDF16E4326190CC4BF9C30F2
AF7CA1FB38E6387D9745FC5E176B248B1581BF7A4CA2FCA8E423DF340EAE29AA
7E07A25FF838F67378F9A6A9A0B404E01E86E64FEF71DD3D540D4711AEB1974D
E2E0D485DAFFC74BA6B8E9AFDA245BC8997BB39BB6BD52B496A09C68F7A8E900
8DB3007643416040FCEC85B407EA0A946827771FBBEE49A3DA5542CC5173A31A
0280AB8E922C23C1BDD88D70627EF124633C318E7C9ACBC14AE216BFD41C0B6B
3A0161757913CA1F7B6626963C09936A52E73DD9B3D86DEEE73C0293A646FCF1
21D4C33DFF1671DA7A53E77E20233EDE51571549AACB7968602CD03EE67ACACA
B231661CA9DA2BEC5795A83DFAF675E9B052C8BDD51490F7874C91EF5ED2E0A6
BE9CBABB98A950F7E55DDA3823036437C11F614E27DA5BB8BC6D955FFE54B825
0201275C2C49A3908BEF1DB3D87792DDFFED23DE7FD9CFC284F6255C77E54A39
C2FDBCD28F2938E4CC135829AC1867CAA5705674062C9639FEEFBE49D6108091
7C58585B80464F7E69966D7933C7019BF336B88B9E0E7073A85EAF297B71B303
31EEE9121347A482D28CCE942AF53E94F88A97EF2F1860A92CE29A14495D67B7
D37E207D42F3891E0423F5BCFFCAAC057FEC683696ED6FEEFA65C8FB6F1312C5
24A1130192B4179F3B08DA1C951D988894E7FE7CFC28C56992A1CA82BF8BDBDA
E021F16E630FF67201BA4DF5F3F4D6AA65B8347FC1575C142C6C1868E8472BD2
CF191137AE1B36F32FD84DCAD50644AD55EBA2694C93BDF984A5C9E7C92B73A0
26769F00831537266FD2E711AB3F8AFC5F3FDA3C9E6439FFC48C3D1B5527FC56
1FEDE991E66E8465C0E395EAD0A22A2FDC001E449AB9C5E0EF187A1DE9B74696
BEB6A525DBF3A60DA2FBF1579150DEE1C5D1B6F55FF2708CE23289803CE123BD
C81E25DB96551A13AD713D5C7BFDD3F2E1D5C12463A195442B51909CC1724E50
A1F6F4EADB3B7355908F36F88521F333C4E7C70B094209D1F883B961DFAC32BC
8C5A2CAF77CA5E6AAB714CC0AF2B42FFF6F73301FC71AFFA9B33A2153F55C2DB
C1C111874DEC37CB746BEC9A3A9A37A2DD098CE7C66B0FE38460ACD77A47D53C
1550F857FFB733B5A8D02FB56790A09190B29CCB4F4A3058B1C82F0CC5E1B2EB
2F8E06F2DE531E1EB81326A8EF0F82843A4AC59D267EEE45730895752820BA93
A129C22A78C1AB28BCF67AD5DF372FECC9EE6719A02E499FD5CA866688E86089
7EE8E5912087E0C4588DE38428114785E0CFEDB1E2EE24CC067D107DFDF1E2BD
B1C4F9C6B740F3DEA0BD315581004E851ED5A9F66C4F9E95DE97D355DB06F482
A43B565F1255A85710B15A281E2F034B1C23FEE6CDF3A043780CB6AB18A016F1
9EAFE545CA5A5B5AAE2459D69D2151E99D029FB5C1649B9DA784BFDF7D177385
4D8B16B9922D149FFF6B4F99311D52BEC9A9FC098E7192180DBB38767DA9B9C6
E8CFC98615219EF3AD4A8157D14C72BA3F91C8B78381383E0BCA1A5319749B8D
07C9A8BBB76C74F0F05157151B418C385F2ECADE863C977BC1D0592216FF2843
DC1BB8509D9BB8356D008D7449147F456517EDB169678E28B2C0EDBD271BEC30
6E181064988515BD2B3AACC6D45DADEBD4DECAD9AC58CA06A6C9014B780C53D4
67D0FE46560B44CA4FF989A4D77F1B8828BB42507B524B622F10AC8781B19CE8
AA275F9FEDFB3036079F4F10ADC8CA8FAF5F5DA7088996FB632CEBD691C1F29A
FD52CB18BD258ADFB0B4B8B80F857B543BC64BE31FC83D5ED0A4866444501B5C
C98E1CF0A452E886EF57A241A093B769BB09B19B125F334D9D374A9C1B6CFFD6
FFED42F77C7624F8094CA624F45801B960F6E145D9623ADCB90F36C0C273C5B0
6E0AA4E0C95CDA1561529F446FE5489523B6E793FFF58C9DE064BC47635CCA71
AA72328472FF6822BD62A82B7765A73CA0239A9E28179AE7740477196602ABF4
2EE916B80AAFB638D00C1FB2A1EAFDC4516C7EE3EE4F5D3039E70EF3B07915B8
7C9C128C2ED3C27FE48D27D39B41E1ECEC46CD2209D760D75E743AD13AF1E761
A8B7F996ABCAEA43645546F42C87F6909258CC74419B96A39D6DA3233834894C
C60B03F867B6ADAA2C18F60040A9D8E70BAB12221217095DFC57117CDEB536FD
A09E11787D4F7B448F88
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusMonL-Regu
%!PS-AdobeFont-1.0: NimbusMonL-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-12 -237 650 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B89290699B50C1BF1BAEFFE
1F57BE7B5EA025241A248A6D4CFA5067A1DA6EBA4CFC940599BA3F3C934D7248
B8E4AC5816F0D2CE8B3C4193CE39D19FFFDB75254573173CB51CCD83C2F2D06B
2483CF9B07B21EC6F502F028C273887BB06DAE2AFAC10E9FD3C7CF51BCA7B277
B706E425302DC78975AC0E43B87073257A5CD7424B6865FCA89D886E8F95C4F6
D457623DBBC0D16BAFEB4C649F5D72B09B18502EEAB687E915E9B536A361B4F1
44C3CD4CC683B5F05A4ECB4823A5EB5179BB7EEE8B76C21B2491A97808F6318B
585B0BAD98F42FB4A755BCB74CD354F794C8BEA5B90FB9681BD5849D45247E39
930C882490230E1662D39CCA875BFFEAC3E79A78DE6E1298ABE9817AE98675C4
16220AD0D3A36580EE2F2A17AAA1246C416D58A4C52FBB26AAF3B6F75833AF8E
3AA996218DAFA571FBC7CAD90ECE9C883C813D8F168C5E86BBFA0F0A5CB36E35
2DE4CAA0F8D3227F72C5056BFB5BCA6BF9C60E037A0E44670A8D3CBC9A19F379
CA8DB30B711F518A8C7569211AC70C46EED2AF62A37F238BD0BD12D60332E673
C6E784B3EBA3F2E71E9993B97E8A38F85048937E958F1CD8FC6E661048546135
56B810FA1FF611B96495081C04542DF7FEF085DEC619DC8C84CC57683D212813
9D14728AA32723E1D15F2AF8F03422CFAFDB75C4BBA5F472DCE1072D4D4BC870
4125BDB8485E39CC98CBF7840DEAB2CD93811DE4F0374833E2C4E3EC14C44814
7EA1144A970FD831641F48AEB0B2ABB1F875BE95385CFF06365DF060A4894A4D
9B431A471FEA922D0027DAD918A30005C31F1778163305AA0E74F6493292AEA4
D375BD8D36F3DE102A78417651AE4C0573F12D04798071551896F2BFDEDCFDC7
6E1E815A6D94820D0CB36EE86BE050E3371B1BC6AEB6EFB588E3559E2E7184A2
A793584498E8696BD72D26FB63C5C9CE69033550EAE16A28B415A8F7488B99C6
C48D05C85FC96027B4CA4A100A8F92EC8497798A967943B973C769B339E0A25D
789991A9D22B455C1C5807EE2DA4D174310A8627A5356470BDEA1C47094617BB
0EF98074CE6116ACEF6302E40AD3194A97EABB75E62FBF30074B701B39665F4B
F41F78CE95F86EB0E0B34512888B67CE482A44888ADBCB212FF2983C3FFA0E90
45AB023E047EAB43652643F7B208519979ED23271B6AF2288430995CF657C94C
20DF80DB1BF5E73B33A29B7B447820B08DFDE19DF3C7965E5E2A1303E1863D49
79A4D16E807CF8648E8E6D21C498D274ADC1D97A103530EFB969DD821155C08D
026D6D6CAB0A90A6891CC6A139CEBFDD92309A2AF053A2A7CDAD63A0DB6D5016
6C927D3D083E2F6FFBEA9914BB1EB4AD55DF687B4C7F124920F46186D0F5FFF3
E574A8B3C5BBEC36409B7C691225359FAE9F0E8CB234A10836AB34663A141DA6
9B46D41A04EDBA48E0B81970D0F14165FDEF1C660FD8960763ABD872DA411842
0E3BD641F7E6910BE9DE38D6007085FE7FAC9B2935E66E18A783F8733EA3C7B0
84B4B4CCA9DFAE27B27A17C510E809BFE3CA8970E194489B1FD064B240C74077
4C344EB7C7E31BAEC05ACDB2C02467E1085524D86D5A9C8C2C12E4E92B62B452
06CE2BA7B16E5964E5F0533D24BCD7866F22E5998E2B5677F02D79A8BDB0B7AA
7D04474E75C7241742D44AC5BABC7227197CB865FB042E6D67F58831114FC6E0
CFBAF4692BF336AAFA0B7A5AE74FFE69202355474BC1A2BCFC54BB196129821F
84B02AEC078CCEEB604BF5F39840266A3ECAF568F8AF8CFA76772D207D868306
6FD5D51EDEB31497CAE80D5FF538EB10A6199B33F3C1173535E17C888449FC38
91D50A7C1599E62D4F4ADDB7A212C67D5061DF33FC7DD9C1DE03F38108DBC43F
D670E760BC6F5B8E11C7467E8E22ECA3FECAC1191EEE5356E2B410294E400B4A
6977D602B4242B9D923B551D220CD89C0B8D4D3415222AEA94BBD8FE26A3E003
F3B3FBBFD4D5DFE22894F241E03BB44E5DEE0AD46BA721B280E0E5293D5C0BBC
BA1B4EE84283F189C5D23079E36E500ABCA483372889686866EA461DFF42BC0F
40DB11B05F9E92E64D229EC0C31E99B4087094F42A318A3F1E4086924B4D90DA
809AB7CB161EDB914698B07807CA831A6631BEF97CC2A399F11AFA8CC986D793
BD8CA98954123ECF3A49397E241F49FB97F33B3BA15D1CCCE5676F5FEC5AD00C
F74808248E7CA630483A18E29DAC5C515886FA6CA4A2DA5A44546025251CAD83
A0BDFEBF16ED33449F74C1407FB4E20EC3AB0A7F2A882184FAC1670551CB5E0D
692B3C9BDE4F85242D50D8BFAEDCE7792F6B9CE9F6CCDF3711DF5C6BB2FF4CEF
3DAE72D7C977A144002C9805EBDABF2D4D4312373C7168260F32987C3D9955BD
C9AFE3DDC4FB8F46BDFBB9240A55AF25666CCC33E935A0B2B63CE70FD86B4808
BA9B258DFB98B5A35FE8E588F2139893E4839107D2D33CBCF414F872BCEC9ED6
E492099DCFC6AD83B8BC1167B3769B36ABA5E5249F78D38A8DC2061C733DF384
9FE00BB8B65CA5665296BED4A93C65C3D953D33B66D3BB660C9981BE8BECF9CA
51EBC62FE1B71D644BF7FA2F7167C0C6835B614D9EFD5AD876C5604CBB12065D
60EF5EB0576C60290C6FDBD9A18C33F196FEB5C8F37F4CAF1DC6C3A6A9949654
705FADC1F6521925BD4FDAF12A9AD233DE4656E4CCC1AC1A5762BE48F5FA88A2
F7CD74640A44AC944737792B49EB984BAB5F5CEEEDB4AFCAB0F947E22EA79D2C
8FD7580E62427B192102D46B7D51822F5197946A19E5C7BBF8CDA83BFB71E7AB
E6EFEB2A92E4F65F7FA8A794C1BAB836A4F1B62A4FE970CD448F4260D594FFCB
B46E2287F1D06606B81999878C909687EA6047A86DA6E22200CBF7AC80DA2C46
885C3474BC892FE658314FB5D68D32DF5821477D1574C84816E816921A6C82C6
C58146C835CE2E3955087CC28AC122B16BF91328406C489E8376D464AC702220
F943FA47427127EDAFC2B031154B64F026E25F3508C48A7B53C6A58F29047055
DA91A7A44451F97B36C7CDFCAE5618028B76D67943FC203FE0E2AA86D7C708F7
7F62119F174FFA376489C1494D1CDDDE92824F009FCFA4B09E1CAEABD75B0B10
41C6C9FD4CF7CD127E92E69D23E9FD278CD5F26788A7E5D8476DE8E212DC6D47
8BDA6AC960A3C9C90D4A4CAFC467AC953F8300BCA6602047AD2F54ECD831D2C0
383F39389C5188EFD070455A98A239D58B84E5539D7C064FF85DE2C230EDF7CC
1F585F2FC54B5A110AA18EA85393993223325C409F07D677B351731F467910EC
9DB2C801269CC9E6CE22E0035D76546FE283B01534A8068EB431B068DA63A0AF
9F2FB620DF5BBE974E0F90DC948CED556A8109755BEA53AF142B227962CB472A
0BC5A477985FFC96CD896FA6C55B7C0F0BF79744EAE53BC3B9914781D897855C
B457E6A36537F6890BF500B80DFBB666710C206B78D6B9EB1AC2BF66A818A48D
75E74AD089DC451A3AB81FC61CFA1FB018C1AD5DC07343C220FB3E5C64D0306F
B027C57A5349E7CCE94227FF4DC3507F247A46825F500B2E3F12DB80911CB0B7
2A5EA63B235C8F39801362150C3524E59F45D4ED270861CBE8A9827B3FEEE3DB
80EF71144D235B7018B1FAC7ED84A2C57AEDCC21F3980E9FBF02B8C539FB20F0
71DEA9B4710FBC845449BCB2D3E73578C70DEAD099810A9F3FECCF14EE2FF044
3B9D563580611E141145B4468F2788A070DE85349EDB364009D3C4B746728E59
D6DE48D0E27137AAAD6C53D2BE3283F9720948FFA6EB38A446EE1C9680455343
FBB80ED5CB63BAD2E8344956C45ED5C910AC61D0F4335FB37D253F7830CDBF72
B1742447471549030D4139A05D78202A4BBF031D00B4BCB1F0B9791A61BADACA
E7151805B14A369721DA54DDA385E982EA1152E9E7E41671AD1C4A8E6CA316E4
1A76EF18F771FF97560A142AABD82A1AD145AA7F523FB8ABAF57828A8BD3076C
318B04F4C8218A5781DABB3BB5D9F27F890AE6E9307F3147D78D4FA40F5388B9
759429AEBC43AC58E8CBBCE530216B73DB0F2D11A1630CEF89659DAD4EEDFFA3
C5163BDF6F0BB192C8BB84303FC5FE13B044E5D336C31BA0F189C36F9D48CABE
B786FD8AA7D1E170C47AE4059FE85CABBB066949A02C4E373B0083FAC01F1A05
2E23200E94DCDA8807FC3021A1EE42C15DE5A8340318F907D7DB5591A708C83C
63D1E8A49DF107A7F4743E37FF5A790ED6B92B62F1651B8BC0AF8782C30F4FBC
D5010D94DDA30568C75286BF49C17DFFCE05DC54B842DD18327F9E0C9E9896C7
6153D2CC8C4AA2D7E81DC82DC430514579079507174D945852F816E6F8A47E0D
235514D21087D22EC91EC3850D0E8287EA387090CEA410275AEEC243C01B50D5
938FC166975ED6FB9DEE4585381F74DD1E8BE9F6E60371C2057CC38194BD297E
4FFF27C7AAC514A42B416757A103842D2F74816030BBC50B3E19BD4FDC2760AD
4B2922746601530E5DFF58D93870CA60CEC11FB51E437E9A4F1B00433B16163F
FBE3370949C1A552064B3E173C14293AF9FF9176529F88B19A64467D1FDFC8A8
1F5470082CA4564D9A9C689DF58EC2A8E8D927ECD3B5E042B0746F180AE40BCD
0A9CD1BD0F94149F950912EB633DA4CD8BF5E51BAE29833892FC4430B6D50872
5B6F2CB2EA0965C54F38A22F6C2DD748011BD76FF848996446926B19C08699AD
F426C9292A97B9D06CA2838E1C7E925DA9E45DAF1EC1952E10006DD594A5C8ED
FEAD9DDB0E57F34CE2536427210AC2F2AACB157513EB0A51A6DFE9C3EB5DF871
AFEC208B948FFB9F2F6A20DF307E9499F9F744A414929374F8F826C5C0C0DB91
B44AC3E6BA6E7FE54972A98AC23700FB50318237DB324115716DE8ED64951EC7
829BB33D8377AAB2DF1A89C14A6C083DE97C76C16514FEC7F8AF666913C95B13
9077B45D9EEC232E5A1E70301EA5201EEFAAEE178CD139704E58E7B65C8DEED5
4AB621BC3AD46EA86FA3C27642467B373760BC57A72FAA1CD068777D347A8B60
134AB18510916FB1C6590D4B83507C352E4D83A165DC6175AB87E1A511A61643
A607CDD14F0BF896E4F9F7DAD759BD39211540C0297FC1BD9FB9D2B58A91D701
47A4DFF91B1D7636794038D4BC5D6DABA9931AA4E4B8614AB4CAB58A065F5AF8
CAFE8E0BDCF4FD673717F331B7C82C17C2806104EF6C23FE114747EB3CFBF51F
39FDFB1A509696E0B6120F31B270AC3872FF0B2A4FCA274C572FFEC24BA30EF9
DB07054965BD220E13B9B29A54F4F4B2D472C74909CC47C1675DC6FB959A8D44
CE6AA5B6D92365D2EBD0B357D962770F37DE9FD532709F7A5DC180608370FEA2
F20521FBF91652DFAB38E1D71D781BD8282FD2969975CDB303737E030B67787A
5504E4DA6CC0CBDF65C3C2E6489465909C1D3D78B314429AF0C5F519C9B8A524
6C5C92475C2652AB0EA2134974BB52180BBC0BDC95ABFA65C91645DBBB7C7AFD
DABEBCBAEF35A8DF7CB22CD7BA3AE93E6570A58436A1454C15E3E1A73018D39B
C7C235C1221EA2764F43EAC9D577960535B8D215C39E8C191C98214D95F2934F
FCEC75D4BD2F33CF77206BF9594D6BFCBF45E28E22D50D0FCA7017641E79C00C
EEC1A76B42DB51053426DBC88866F25D010690658DAB23F43B460F57BF6F0A50
39FA32B67C16195DE9D59A0F447B8DB69CE8FD6E24D8C815CA35B7EFF8A25621
2E9EC4897DD4F12C791CEAE420FCBF1716BC831084180D01341A77F5F142BB17
48613F2CCD4C3DBC3E11E2A66FFF5A7248C382424E0DC69529AE51901825DB20
9B0E863AED1EE4CCB303CA937D4D9088779538B1D219F4903BA5D7EEBA073418
A97159A3193EC28271DF4F892BF6984A0E2A68646E958336E71F7ADB89D9F613
EA2E7B9CCAEBE234ADFC3C66EF1C56CD1A07BB6D2B7A875A05FD0E43A207F58F
97860B642222659DF4D1D6554B2A960C5B9422384911B9FE11CCAD6B5CE804B7
463204E94808E01F94874B998FFA6DDDA5C1BE85C389C7A91D2AF1C9C3A3DE83
78F0A57FB7BE09A430878AF3EDB4B411DF6940A1CEDA604A5DF076509DD11B4A
A5A691FA21E33011DC5AB9AA2E74ED0D56BB0AE7E1A55F738C9DC205CDEB1BE6
28729AE5345BFE86A6230A0A429263223B341A4F364D542521314697AE748275
1B8E0C9251DD4C68226F267C021CA4C0E99CA64CA31BC46F08EDABE22B162DA9
A78C234FA2E075B9FEEA51643A6D6B3FD434FDE1329B9FE0DC3BA8AA2A00FE29
A8B0BCAF6C6E111EDC9564B5724487BFAED952676CDC78D68E369F3CF90492C4
73F71CC5D5F63E97C5C40394BD230D05EE884401B3A8FB60936F745FBA1318A4
27F64D2193A3E09AF6E18B64DB64D5C1E55EC8834A434899001C03EAF721A1A7
68596604A49413FEB521E06B4A2ED8686EDB4B5C3DDA2A8BF0D9878CB87C82F9
B1263614FBB0409D79129C49E305763F08DAD9051A89F9471C63705F99ACD9BB
4E6F7E701C8E454D98E25393738816FA714C3F83DD53F4D15F2192E9F4E0D5D6
A9839B8D2C4DC1430945C60962CD51553F259F80EC5CD4284EB6B7D7B2A078E2
99BFD28D1EE7FC3C6F0018368E79712A5E8CD8D58EC1CE5C72512D196F8DE88E
3808F361F42A0AA7029DAF5D9210483C77B3D3584A62630F09BFC03B3C3C2CCF
CB4CD29F9D31791368CB957479AC25F37A4E4D1E413C61C44A7C5115AEA57B78
586215611966576BD6D95E1697C7FA461025D6D5C682EEBBBA30F9E4A3A1CBF9
202E22B72E8711BAD9F4F39481D14C61D65001EDC32332D3A8AF701433890B8A
5A3DF7673B0209E9474BE95674B794A91454A1F8A07C460AE78E0B3CCA13081C
E595CE64BA451E6143F0E95BA42902A6A329DFF1F7208E6278299C70FFC4B573
A5AA88FE102CD488C33E784A73D4E1834B8C36E7C8E6C735BC6E2F7D45FCAA09
2CE32C60102BE0378196A107DAD0FB7702D852E04BEE398F16E09681886CD627
610737CB42966EA3F29E61E588EE5E71772C8921D61D7E42C40C72D6A97F84F9
62397E32434667F089B2D99D43A3D5AAE1CCD2BBE06280AEC3E016232E72EFE3
38F783F53005D57CD2590C11790C42782F048703A18F2801953684FC7BA09C86
890A083EA044FD9427CFC0DF14AB47FFCF040E4FF38327EBE4A4D710780884FC
187DD9540B4376AF0BD305EAB31373A2C0B24482B7139B39BC8C210F53ED22B0
8843A8689313337164BF3AC0778C5BAD737B2A2D1B57A1B7554F94E973E95CD7
82E72FDF69413E53B130404F4E804773E47688F52328AB1D16683657171127A1
6E83FDD2A8E6D8F4568B579FF3F86A00F9E86AD201028A893A18EE663C319109
79151A669A38D0D8A20A0E61B11F209D0045BA4DBBA315D4E874490D4DEA5318
AE799F7D38AA12EF1954347C8824F6C5184C8616C595A6898819A4915D0637D5
6ED5DF8A5C920EDCF3487A94ABFDA5982A1BAD59F2D75E4043CD6971CFEB57B8
856E7EBB3BB157B5344744C6DE31902E6FAD82F91D9DB3FF204ADFC503082FAB
2C0A4D457AFFEE332A50829186CC2C2001BFA32B1C923A905EC84D12EF033280
71364B0B615BF357C65E46F471667E42B29343C3062E5A69B84F7746A269A587
593874C4B967C3529022835205F5FE1BA326F1A185DF5B3E6C1B1AC6E60B978D
6112794B8FB0F567FC0E9F1BF65B848F3AD0364C2261B316AB868E9A9EDEE2D8
2059AE203A144AAD36B6349FADA31D60EC8D2C8858E58DD524D173A2E79B98DB
9E6748C29ED84AF98A06DFE022C2C2F06CA4C4CD6B74309BB8687FDAC05E3F67
53451F75F38C98835C54EADF75C77F1B40783364857F34EB77FFC692F3DA1BC1
12FD5CE563E1DCCD57F09C029DFD240DD1E799D0A417E755B920FA58B61F2633
8A01224FCDF81E257E1DD864C7B580AD02B2FF6FE356C788905C77B3E40356E2
CE1B86C9059B159550C3C15B3D0268C87D2DDAF436984D1891AD5981414E10D3
0764F14DB87A3253F0F2B1B847EB4EFDF9B77628FD958F71DBCA60B8CE2CAC98
B4F567B91B7B91215723D2622C3A6DEE1F9AD49E12CBD98B60D7862549C45B6D
7BAAF617825376C975A5BB0E7701DA0D4DEDABCEEFBBE4D6C4760D271EA25952
851596C73B946A7BAF34835CAC308CA0055AC6937FD2F58EE35B446612D3D8EE
4CEF70E17683CA195EF6ED3B683775719473DAEB7C853A4B7B463ABC412A80B4
5F560293F2FD3FE3FC1DF1CFD26F72EFA0D1E1E6AE99BA99A20C3F1F5ED1777E
EE886D4CFAB7CABD9BD19C7CAAD852D73CF5EEA5657808A4FB7E762B179B038D
83C180D77452F414B1AC9A89810EA99F03FB57D26FA08F5A00B10F5DB3AF1F9B
1E9716FEA7DB5B68B59650C6283D9E4DFA32DE6B75CE2F0D9BCDC3099E557E2B
FB91FD6980FC8744EBBC320107B2FE829AE4F78C7FBC3D1825AD68AF63DE5E80
CDE412CB94EFF87E8CB56889A04F25DD7EBF54283CB474A2AD990438993D3DF9
52A9E17B2AC04873E35383DF372A9740F81DA139CE5CE7DBBC98C84F8A6CE6AC
A9C1ADBBA2C5927A393899BF4E0D7DDADADF2DDE489282664140CBF68AC34DF2
4C21AFCB966CEFE95ADDA7E6AB203018C0E90D352A3152DE4411A7B57CBA0184
8C3A8AA81A0A3B30152236D3FB21BABA09D5377A5AE683E6417F2609A9DF7178
D1CF77A703341F4D5879BBB40D1BF07A5CF34A17BA8BB8EEC8A085B265271969
9ECC299CBF5B28BAE3E6D4040A1FB53DB77129560FAC2BC019A171E57B4C06D9
D45F54A42C21C1B9793B002151C02D86BF325CECA4EAF772EA9DB19FA945E664
5180D693FF725A89AF342BF155FE403D4E3121BF6C1CBD19432541FDD3E13201
9A48AC12EE6F93B1F3B26667D0C1BE62EE26714A4CC8923A963CA379A3173034
79632E105CB5843A4A8E47B2EC72B4AAB2B29314BFC6A128924CA44A75424F0C
36BDE4DD07CF596356F0E2C866CCF822BE16C502A84064C7EF83F727F043158D
817544842A457D7D25D524DB65B89292B07EB7F38F40F731EB9B2A120FF02FF5
4C1FC6BF41200B6ACF3DD244C32A9EC6EAE8345E511B1562D30D996CC2560F46
68E7A15860CFCED8C63258A3D4214C13F3D7E8410B0894FA58A3C5EDCA467A63
8D369A0D5EE2D326682C554535FC140B79526B2235CA1CAD8041E7627DF7B60E
DF711AFCB4706F5455B617519BCC4B9B5896F00F1B5C5EE74B920F73B19243E5
B3018C4FFC6F6EA840C7E5D360853B0A9C58A75C33B08BF0A9108CBCD7AB1104
D3977C2C3BE054EC0AAC8B981AE8C749B22773A3CAD9B657C53F197F6F663C9B
CDC2DA26BCF2A5DF59B6564A7756113A8C71032B4B61C682AFF95BAC04904D88
79148259FA2E81EEE17D9E304F52A3255230F85917BB4E7A4EA11A7A5BDBB309
2983315F0C4EEEB273630C5CCDDAC0C497BDD942C775C0064965F8EB77332860
C584F24F30D2EFDA2EE455AA5F6BA5C3CEC3C0912C6AE6D98D73F63A84B3A0D4
6E24E33033611298A48661795F50DD498ADEC778C063AF8E094F8C35DB597288
13926BE55321AB2882F63A17F273F6E673ECE89BB37D187731F3286DFF87AF82
D8258EF285B57F495EC8CB092BB2C6287682473D031D7834AC3F5EC064480F20
64CC78A46C87919314FFE4C5A2BE081636D15B7D7AAF4BCD2A1C84EB42214016
9D47A4B57B145FD60706705E64A21FCF574F4D0C31E7D7CAF7A1FEF5AAB9F195
A0F1C4E9B98A6A32983B505372701FFC741679197360213A13F981309FDD48CA
5BD371F2E48C4871AEA9BFC9104CC4E4591F43453F1C43B45594AD68EE45EAD1
B7ADF02156FD03F4C387BA3079BB903B512B7EFFB49139050308D863D4C05F09
11FFE7AFE68360563FDBEA582F8B40138139E5EB0D7A8E69524BAEB5750B210A
1BD8857EC3B6125D2BA4221BFCAB0BC0438C5F9AB0ED01BA4702AE33FC1536C9
6D575370E81DBE46014A352D48A9AD72B5EFF3BECE695865AE89EB89A1147C0B
418D95085D6E1D9AEB29B4A22D9E9AD133AB9189855633152F1EE78072533F3B
91D35E9CCB9CD52E43079580059E99636DA18AB799F22F2E9AF8FDB69CB3D0BF
A99AA610EE6DF07695B4D16A1ABB7BCB4FC0F66EB7D6137844CA9DFBE72AA45D
D237B619A53B007A814E6488EE8D5ABDA179B3935324ED08089395693E73F8CA
BE9E9247F0AE3904220FDF4E193113AC0F625F0A9FF7EE3E877F9A32E3C7AC47
32AA82113C698D1C638FF9E9DF2F58B87BA040EBD9F240B8532A9122B098C4C2
78C920263221254213129D577BD8E0D6A709ECE4A4CCFF81E8B58F2F29E19F7D
715AD567F556BF4964D2191B8839074F73F9FD6188C4727BD199CDC8B4D05DED
C37546805C3CFC1CFC7241A40EB7EEF7896CBA737CFD7CC1EE9EB90AA437D14E
A2377CFD4893E36CE80CB6FAE9A7F8F5B59726D99E2108E0FFB4CB01CF7EB210
5D44BFB889F83B3CAD005996A6309A63BEBA0FE32D73F1A4ABAD8BDF3E922245
BAA2CF9289D68DEF6706FF9EFC1E3353CD23FAC7E2B86EEE2936DCFD6F053915
8D3303CD6BAC9DE0C6E6C80B24CBA35366945769918BA18CC3EC95929653513B
C23A2AEBEAE056BB36132D39A445B8A268ECC0CC7A3DAAA2650AFF078F3F5D67
D9ACBAB99AA0B8D23F7C9C77D990FECD8CFA96EB61F4441226125D4C5832075C
B13E7FDADF31737F3614E907DECA0186A51FD12ACB834856A2A46D83CC900DFF
2B519493C9EC09883C4E497D1E90E7A0F10941DE0F2AC2D901074A7F28F34369
64A2CE587608555325EF6A28B6113BFC66D513BB1EE0B17A5F655AB092B604A8
E7683C5AD462F825F1D330DE59CD9C230641835394D552D01A318468CD1111CD
36C456FBCAF9D5F43363CF415EC112471112BE2497112690E1F687BD571450A3
A00C518659EF18C2C9AEDDF9F3D989708892F18EEB24E9269F261486BEC243F5
BB15F7AA1469B0C3DBE7668ECC1BF27D654FA8C6FAE137AB7AB9134BFD3754FB
7B02F0BF002C38F848DD91D3564D2044E9B8D7EE9F1255ECECDE57FB0FA418C6
042DF1E0F8C5A2A454034F48FFBA3D725C3565B2ED2E163B04E233ACB043B9F3
95508FF98EB4E3E894FE4EAF44A610E40D89B3AD5DC994C4B96D4043E6413BBB
666D0EB6C3A88D10A1DE780E51B623489E955898AE6CDABC883206CDFD767C33
2A2A6ECD6224F253AE766D9514EF86B45458F95FE4352676DD613C27057C650C
9DF6F2278479E7168F2FCED8C99D41D9F874BB4A9D213F6D12A487150309184A
BEC0D139E31BACFB965E9611DC0A844750895D512F4B21683DCA0E38C634A6EE
A3BF53B6B365824F530A6DFB4F38706B838B23AB5A20D6A658564327C33834D5
0387CCC8C9F3FB3FA4127E06B9D56C8E913EE027C4A7E18767C6B062B2CB84F0
125A9C76D8DC0E5850F9C7257D03BB9C70694B4B35884FF9A965BC0D4C87B70D
A8456A60BBBE93752CAEAD97CF9C7D3CF25164866EEDE38E863BBEFC23C72C05
6651553A7098DD6AD9D9A767CEEA68CD3C3011BD199CC74C43983B32EA77F71C
E514D77041F132E0F8FB3A667E98293007EC2EF19A42C1E43A2FB584A3016729
F725C3FF53ACCB292A860EDEBC8FFACE5FD341E175DE2A9CD87878CD89425AC6
A929ADC3656A586612F712022E25F8AD487F394FD126AD1303E7177706DF7151
A34D8ECD2F289B9CB031C0CE45189BD8A3B135FE80F9427FCA67008DC804A405
445B0E082A6C475171289E0B45237EF685C83B9F74A6B21D04D3CD64670909B2
C3408539BBC658E556B9652F42B9E5E56D810DC760E0FC8F5B9A516ACA5FB0D2
B642B0FF573615E0CF7D71980C9059C0BA128C4CDCE304F2498F905D1D87B467
D1DF242CD7878181FFAC079A4ADB487B3CE44746CC429FD2D2BFB9BBCE1163F0
E5ABD9E21FEFD2A58DA28E29C04FAFAA990BF42BB08FC5DE5224FE992AE7CB66
C69DBE7886D7ED3F24B01900237552934829824046E10E39028ACCCCB0D006C8
BCE2FC17A612E450339C0F66574E0328C2E864DE851EBEBE4AF7B655ED791539
5A1A52DDD8F6C69AD737780BA75C10C35A95B63056A0ED3DDED1C8764477F632
8EF64C8274594181BB8AD7FDB6C541B3D526D321A3B251A04B0C578D5760BF6A
389251D6969B8AF3AD360A8CC0D00D1FD30CB05C0AAC0D6FD8486C034DF78B77
05482A9E0884385CF7C56DB4A483D83D7CDB2BA248A366D5E12F084F8017BB4F
F779B615A46518B256B2C43B27E28870985B54BACEA3DF2351DCA1E61076C4A9
F159622E779BA957B9D3F253C0B613BA6CC471EC6A39E42738595A9D057FC200
5556F28D9299A0814867B2BC065A56AB29F977DC764120DE9195E8559ACAAFAE
29ED0328497726812E7674480EB8A7B855B77C81889061E668BB29FD6AA42C76
4E0B6B9844987D482475B36E95103A85BE1CCE0A13E754ED78EFC009FA2DDDFA
D79A498B180B24D8518117AD200063FD0F22CB28314035BF61D1D9DB45CE3DC1
4DFB09403B1F3FFCF0F7E1305F72A9F2B1BFE7E5DAE3EF79026F34399E36F6FA
9F0B7956D598BCC5A9FDFD4D13610C26BA3C6E683997CE491CAA40E1F6250388
35ACF528695334AD0A6C035BB7BD81CFEAE19AA0D75663AF5C728DA5C6E69C7C
21394575BDC629CDB2BE5F50EB1ED9AAC414F307488A9BB84EB705599B0AF0F8
218E81C4FBE962BBCE986F95F4AEABE62D8E1E884D88710CB6136F798FBDDA08
E307FC6443EFA18B7C69E4D2300A7B3E985855FE939FA8BCB23F7435493E2E9E
CBF8FF05591B82A913F3695477B7BB307553103E23E42F0A3924C175AD8CE9A6
2AC7188F5CEB83ADD19E252396699193771CB9BB14A22281B7E46C4A5855F775
A26421DADDFC8962530A98376B6FFC4D85C9FE2D2C45D98022A9D034A1F71F5E
84CB2C69496F57C21467F20E23AE927327F3BDBAB16DF44727FDF2D09CE70D05
9DF3DA423C82A9EF28772772E7FC2AE5BF1047054E4B454D3FD67F70D9A06938
21CB7994D1A6D85F811413B16CE97AD89AA5E9614DB0422D770A1058A226AACC
83841CBBAF35F71A036BD0404B9365E39333A89525A4BF352E3C7A51E79EC00A
7BF2AFC2640D867C7B31D961386F3C0BEB0BD69FF62EC4C4955F65400BFA1915
C1771F843CEA21AEC6875DC89259D8D748F591E095F60139AE91B93DC8FD6228
C5A38DED911021F7B70DA35A7E310B82A0B365229E57806EE796A8A667488769
1ECBE52DBD811682A3BD990D22CD3C4620F984E5938FF53026EE53614093288A
CFC9E65B80622426AA04AF753C644434BED09DFB94C3316642B3CC46491824EB
8F1D0B54C0CDA7453F3FB9A00EB2A9399ED5DD9E0DEDC8710BF5AB5DB4C0F0B9
4A5AC9430AEC1AD2A0C38F7EE853C344936DADBC3FCCD250C4CD013DF9AA0CEF
472D5A66CE82B1DD87CE07FE26F336D8D832DCF61C3A963D6A0508F7C936129C
F29640EC794E1F55D4C87BE66D0A5B3E6C4532ACB9D21C5AE58CBE93BC22CB00
9CC5468657184893DAA77F4088A7E40A7F421077FE7DC3807891D039517D21D7
343488078E31E5353B86CCF6F6B65CE43AE4D4356790720C1D377D8C63A3AACF
58AD6FD13EF564F105A252AF14D6123039A36D25A09D7A523FE6A96424BF9432
4926B2858051A9AD3727928A5E7A8DC3E4C0D1ECCED590C1C0DA8C0CD2FA0244
11495F0D17C504653978822D6123E09D658DA687C37AD9DF767F53047B54AB8F
5A9F16630E5ECE68D5B7643C87DD94CA2BB1440CBD81042611B2709227746025
9EDFA62CCC21DCC06EFD45DF5577981AC9E00396B80FC8AAF1053BC00F226964
B04A23E56E213AB49148768BD024EB194B2BF16EA42AECC1C4DC37839F327A1A
8EE41F8B65ACD1C269DDE285C3B537F7963B47370F91C82BF9DA8D26843D39BF
AB1B4DCE69A1B3DA876EE19467C743439D49DBF6D5243BC1B5F47A1C8ABEA1E3
0EAD0013AC9A95A1E170132DB8F70BF2C9BD9178814E95953CA634E29A3A076C
508C612A8168BFAE862CE98F5529487A198EAF8153C5965689BAFD789A47875E
037632AC94DC563C6C836956E267FFAC832BD129AA72AEF47A53A0A31E59C59D
AEB1552AC5EE0CD947467CCBC0BE41C39335F19EEF81BF687C0A658B5B4250F0
9A4776F934211F8DA404D2787EFE425CE537AC1B2A2320118E3DC6C11B83563C
6F90C6E43BD6F77B2A4385750B1B6C7A024E8EC3CE7EA008AC1CB57398BE57F1
1C2EC2A689FDACFE99BF6BDFBD55B7A7A9D4D353207A3F8E3083322BC4A68349
082E25CD420C425B2C8E2CDE95A7DD1CDC8178A9B72E21A1FDD6CBBD73DF5EDE
585C2E158DACD4D9005B59749E32DEB5A2C64E3F4106258790F88675AF753EFC
9BC6A71F2ABFF02BFD57C79EF585406E004D6DD111116F9F303EE27D1C44CFDE
D8CCD075BCEAF3987102F054181EB9B0B765C0A6DF2465AAA1AF0C0560FD86CA
5BB9238DFB38447568D1D81CD0BD705DA1D1661904810EA2BB692CE0273D5F4B
8266476E80C6744559BB69DB245EAC5EA604F19BCA32B28F1670FD204F99D2B0
F870B506461669A71E06150442EE651E446E2CD93A9BD3EE7F23DCE38286D8B3
BB497F9FB81B6C5D546E817C54EDB26329EA13DCD561A3EAA2C6127245CADF08
A2B8B8CF5141BF74583A427D3411AC3C9B7D6089DAEF9404431449CB34136687
AD19BD943604BEB7CAC97057A387EDA7FC3FFE5005737046E1A8D17D94DF57AE
3A4492672AF00BA2F8E2F9211E6F5ED1D318C75205DF328A7405D1EE0C1E9FA1
E349FE9785A43F73D59061EDAF4194A0130F5246B37843B55B797232778F9FBF
DF25D6779971BA086ED8B5C38C0B1CAF8090221134B28E7EFCAEDCFC1D271B13
C6651687F7C15C6108A5D9677CEA96E0487E0D718DC08D2E543A145ED16831E2
6DDF3F00B67654031280CE84A1009B810A1AC0D5237F3464A32451250753994C
7372D8C29ED23DB3C19449BA4570DF55A2BC284580BEA7FB7A6666E95904D8BB
F9EA17CB868619447F2102347FD8E8F5182CB9927B7E9AB05511312C37092B84
9A9160A47900A0C3E62544D1C8BA503CB7EBD2AA8DF79D972674AE7237F67B31
3D5D0A2912C032F490254A963E66014247B98517435F96693949E727C522034A
5B34A3002DDBB32DBCE3091C6F704E895563B6DB8707D59D04A0CC49DCDA4653
568DB54AF4E8E0832E19760DA1DE3078078768BFDE742F45F70FC146E752D8F1
4EC83356C0AC66D064D03D81C694AFE2763ED2D3A74525CE51E8D4B42A825FDD
3A80701029AEF683FF75B267271479C958AD0ED86D42E42A3586896B6925DBA4
6732794353F41256FABFAF00329BB92A4E5379626C5514BD7020A7B3E5B67F7E
D481903F26C3D463F771C39D323E094610F2665B75A3D10C728600C9418FB6AE
7E2C342016D1C381E121A60F35D4E921659F5894DE2AEA4190219517D62B1ABF
D253D5B8C597A7E175B509944B0188806D6A32D955F9BE1135A85020D558FC6B
FCB523B7CAB5F7FC17664E454D139ACC6DAD26A95EE3247B4F45C162459C4997
6B039B663EDF0EDA6D00C75B7EE1CA003E0A34FC7655CA228123532E8216ABC4
63832CDA5588FE50C0DF4908C363ACDC461EC78B7F3FE0663FD3C623BEBFAA18
41989CB886B4DA11096D77D3CFFB34BA5D843566A824DF8B1AE55C11D7BB746D
E5E1910D07E833FE9875ECC330A9CC45B962A67731C7C8B2ECD5D7471E16989C
E3B1D25F86895014008D0DBDA2DD92317E85ADAFB524598262BC86159E655E40
B7CE08C7F003FCA4EDB972B6E9A69816A4E7FC2E7F0B0CF9A27B6A862F6713AE
2E98D81AB39A74D0B552F44CA6AF7DD80DBBCCC37DCFE6D7603EA8C7CC9D00CA
5635F86502C65CE45CD74F91C9239CF4C1D9492BE68DF415F2EC03A3DF381DA3
8EBC5D28E6331F5FCAED840526140ADB286AEF3E45C045A8C95707754C926184
07A600DA29D0E3B7AE80C6E9532FEF5352B9EE170AC241D04C742A3A83E8C757
C931585D030DA74967168F052DC295C4EFBD16BA87C0CAA60F720C2E93D10A7C
A9C9AC751EE2AAAE39329A6A5F6A44A9E7FE0FA300D0F82DCF75CC460E36FC31
8C7102A21DBA3D359F89825A9993569225EA30EB7B692029268F08472B699FE8
FFD2C670CB0B25488B087B8ED3F5DC6F7800CCEC42A194B9D99348D5983E04DA
B9961E7FE4061EC5EC1E73C7E860AA8BC18DA00A94CCADA197A4C58E4D054AA3
8BC5095FCE76FCC53F8AC2C7E7A1D950517A307F48DE42CC1ACACCF205EA6804
927BBCFB4BCC75F4A41D21FE03A5D65613A2E3973E3585B64649E86479B97385
97CC7565426DAD6D18D9ED4D5A8AA4664B842644ED9A2E1AA63AAE54082CFD33
813965D88B1D61EB2C27371DC9A13466291987786EE2931E42778256A8181626
62118B3CB40B8766EDEDE495E491B9079E59F2F1F1052356D76A2218BEB930C7
E3BA2F7FBEE1F81A67BE115D1FDEDAA67B018148CFA1F634ECEF0342AE87E318
EECDF681605C62E023CFD13D1EC9A7079FD6849A93AA66929BE9C94683D2CBF1
1DA8FE1D29AAFCE5128630B69BA329F6A6D89A706608F906E6C8C2A26EF93A3D
69C04BD4208B93BEFC9DE5B7319B916230D607DB88234F0FE728BD25D7E83455
1C2D0AA17C92E8C78E35725B06D79CFA21B16D37572EFBCD88E012D4F987A45E
CAA50AD20AE38E93CF08B7A28BA5DBDDBB48BFF6FDFF25F76C3020B0E63BEA7A
3BF2CCE1A42735EF2A938E9736B2F7B09BF4E49330A1602A8C6ADCCFBA2B1FF6
A37DF9372A245519564F20EF9E9DCA2E230712AA593D89722F8AC0AA7365466B
44DC57BB64D766FB00A032465003A5310EFBC1B47C37E2699B82481CA6292B1C
6BFB3C0E4B7CA18DE93403BF01791D28E99FF8A6D876DC3FA3A64B50094BF537
1D23C97E225D51D46D05650136F29478C6551E3345BA4FA6B55B3581D7EA5377
58F5A9F23E5CC6DE5476800356B471B6CF97D338DA3B6C460CD6C0CEA4FE9A3D
FFCF2B71058CCD9776DB713C2BAB4237DF10E0C65B42B72BF29DAD3CDED6A01F
5294A6276F17014D0576FF2AE3B3E03A551B67DCC0AFD8D53000CE54AB6B8F3B
6065A48C56BCE0917C053CA2B0832EF22267BEE045139047669A1BFF666AA241
85B86235AD777B3DCB54D79EAD153A5F886B81CCDBA4D7F1BCC8024FDF31359A
275CE7412C3087034A466C6CD994E796B4EB2426CDB858F34D4A59E363A1B068
C0F8C8238C252275CCCE5BC6F75919D90C74E5D2D669885C2BD600E10B287A6B
3EAA98BBC26AF6852B81A4A930F0DD4454856CC0E0CC8FE79E4648D607E72104
3515BD61CB922A50D1CC5CC2D65A9306AC9E3237C4250E35414925C99A73FA51
BA7E0ED91587CC21373853599CFAC96533F84C20EFE28694A685E13268F8CEE0
3828DC1461392CDE3194CD42096251564278671FE03AEB7DF71C1F55C6C59211
95D506ED422905C26DFA4721707ACC1E45E42AC114CA88A1205033F299BA6E0D
A1194C8299DCF83B01ECE5EB41CD74AB0C5CA18C2C34E1CC9BE0FAA2877B9982
048B307A0958558FC50B3D7926AFF4D4ECD7BB41FC7337C0F7358F81CE984E29
B0936E1CC6A68CE383068B9F6C929ADFFC2F1CAC8CB77C86745DECF095E3604B
23DBEF38C230D040AC12E14EDA7C3E530F25D0FACA323A5BE47D8916CF421D55
E8257B4FB4122F15D981620F248171E8FBBAF72F4900FE0375327D3B229C1FE4
7F501FDB38FBFFF37764B954FDA78F7970D12063125C5F73A653F7DE8B1FE919
1704E8138FA28D751AAB78E37978F888506A4863E731D9D787C63058EF950634
15FADBC0BB50C66F010483BCEE8D26503D40C5871C8FD2C130218A36813CC4DA
7FBA8813A0BEA63B366D9599EFCA841E10031A1E6445E2A6D9990D5C2569A59D
F500268A0F0E306A305E16E9E64A79B35FC6BC6A9DDEAE05C2B5825C25B32D65
6F6711FA08D1AFE638AA3DFCC218F95BBED375B2E6DAAB22398C6842928D8510
E1A37CD842CE81A38EC3A8ACBFD07BBBB22921B497F0D7AB7B47E9AD413AD9AF
260C3F5E360F70DAD2E61A400BDCD15EAD42D068BF4A27AFB31FC17584095C4C
04A157BAB1B5C252CB22ABEE68CAC350CEB0A163589A2A7E54D68151B9435B08
26E480CD066D10196CF991BC860129338884B25E55A6F752A206C5D6E6654D2E
729313400546F197253AD427248861E1F51FFEB59211E1999E6F331723FCEA97
B3F8F71FBC0BD81262AB566921497AB39FBB1B0DE10BC18E2DA0C544168426B7
74167EE3CB0CF25B56E720C86BF1BDD5ED8DF0D8760336B84FA7BB9462B4EA25
794B711DFD8A69DDA5B6D9962B42FF4EAA879756DFFC008CCA410655766BC865
2EA51D62423A52A2A131CCA25F99BEEDD641FE33A1DDDCA8E7549597BD7BE2BA
0A52ADB506F29198248DFFC39593AE46075F747680503DD1DD87D6A1B65BE4CA
1C359295C7D296A91FE5744E484237924D93A0D42943C2F95A190A4BE73FDA79
C1D44635079373306155EB3E1F6570F8F3870843CD005AF05DAA6860D7950B82
F1DE12E117234F10D45134EB4BB43DB5EC5513B11DDBF9F3C9999DFD38AAD204
D04C1BE4686690B0DE46B4BA51FC590E96633D68DE1B6C6C810F47C344DC8889
16C0CC31002DEDFF86BB13021AADC9950E9BA9B4796444F3150D8BC8DCC1A4F9
0625D935A1CC0D417905A73266F8711CF5979D7B10DBC2E25701068CD69ABC23
A40C6612A6D812823258EEA823B85BD4FAAC6E549E12A98475C0A110B5522C47
FA0C00E4AAD69CFCD0E8A6224BFAFFE7BF5DBEB4E66FF1BEF7086FCC233968B2
72841DE338FB4C26B32F91556363CAB5A31FB018412D7BC13BB0D3F91FD08A54
CA0AD3158FF38BBBD60145A06BD8BE7D6FB72AA3FDAEBFD3332C535ADE68CC7F
21CFFB6F5432FC2410628E64A759EB67A21B3B627190A2211055
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BEB1EA95978DDE87C9
7B2188A293F30F2A10533A8BE1080729D8EAE95ADB3A4D0F20E59D2F3C54A4DD
511EAFC0FA382333B1C402C5557EB7C6E0B4804786463832323BD46651670EFE
6732E74ED7E06DFF1AB96261AF3E8D1343D48EC3EC1406810B1D9FFF19C08628
185D92C9EACFE140395CDC48DBB13D76989FE524540312950E283ABA1C8E09BF
2FC683DAA0E0C003FD3A0CACC3D34172433CC65265D255B58659028E5C21D8F3
D03AAA5E8B2F4426B5D9646999159AECF93DFAE4AC0F299DBCEFBE5504C063BF
B75B155FA9D39FD28D9B705F2C66A6D8DE1B20F63BCCF95FC104F14A4A4A82F1
006597FCE38EAA2936CBBADD4689E2AC12AB631C60CF670FB3550E5683AFBEEC
84B992D45A2680BAC63497C593C90728B1298DAFB7983BF339540A8D8280F357
6CDCD4F21401CE192B694582DBC021CFE1217CF272748BB9CD7D9B82A625B0F2
987083E1BEC613BCCB763A23259D1B1D635CECB8442177468B4A69E269481F40
D0047EB381B2482372B2C20ED895E24A946B868F9AB139E7A3DC6D9AF57EA283
EE09BBD61FC4AF42608C6E01E638D15E1346BBE8940C2F9BE4BDDA2E4322C052
851172A6CFB6830C394E62423A0D22D51EF24DCBE949D7FD3E6E525E86E041A6
DED9B721BDD6E2223145BB57CC550922E73CFFBE4201AD7462760440A2317E38
B52F9C8A8FA9E7F90D27E38DA7BAE33901AF57C7DB93E83798EB43CAD793E287
BF3CAD7E8CAE1E9BB5F52711E8AAD526A9235C76FC3010FAC7862BD1E82954CC
66443E935D5742BE83214D53F341AA179DD5E38602001C8FF4DE3EF8EBFB939F
CA5B687860661AE03A70A517BC0DBDD77436674EC0B5CF1EBF38ACB1712CFBEF
557025317C9DE7AA31B409CDE311A0015DF3886B5F8F21E9EDC89C881FE6517A
6AEE665C466AE3647224115664D41478844318FE1FBB1FE05ED0CB8A0A2ED995
9B1D314987445FD5597B7E6B04B22D908E0F2BFB2C8381E13CB69A288CFB8408
890ECB590F117DE4740393BC3AA13298B34CF3F826AE285A95E9DDFC6B1173D2
4F0B4A8233C65CE92DC26694B87FE408D52A3CF2556CCE1D3F2825F638F4B4D5
281B2336D1EDBE356E1CA3FB548EF7BA79257C6496F591A7B7A4E7997732FC30
88BBC9313FCA5A42CB96345F361D3A225C15188ACE4CFC939AA16B569C7A8172
571CCC2507BDA4A9851AB97693859EBC1460D4A46429B2B5BE591A4A68015A3E
FDCB45BCBBA34BFA0767E7CDA545B5C62B02C9A12AC7D40A41A5A5B6F1D3BC06
8F722B15FBF9C92D3242A7758E9119BE94501C451998E75A052B1EF89D82F8E1
65FC046C29813BECE213084C7B3EE43D5E4635A852EAA5FD1936F01FB42F07FE
2D569E4BE206AE81F9E89D124AACC86C3A2495B3D53FDF438D8C6CA58290D557
AFA640809654C5333161728E0A1BE754949F622316AE5A5FE7E43DCC5A1A5D90
94F9034F190675B4FC4856B76F4723BB02264CCEC67963AD3772159ACAF896F8
432848DDF1F795B507F4E5CD0814D6E10BFBC3F2EF1551F2B9368142FCB34668
58D436DA78F526008A58712EC23F052D59A75A32CCF1C42F022F7092DE6A0CE7
50DCF113D63F2E741418E749A89DB45856130FE45EEA73BEE24CA1C120B0028B
0221E1F21F4E1626B79E309983ABFF0C3C85500D948D8A01AF0DA3F6C8E87BB3
E39ED23183D59F03EBD478E5946F057C2564C339E1256D98ED4C5C0A27623578
9523BB1BADC966829374E4CA55CC716EECC4D9965FD79D8348CE3C1F8B633847
DE60058E64505F4500034AA77677BC93550072532FA9414052ACC1DD456307C6
D09A5EA0969D2207BDDCAAB4CFC394F99B4B249611BEAEE18054093A33E70784
7D4FD71F29FBE931767DEA22E54C541B3D044998327CA596E4A6C44892047A61
244F865ACC7CDA4BC88FC143EEDD0CC38EFDD46C6EF95678D513BF0962253E00
DE461324B5B5E0EE18F32F431D02B94387059E03E5AB5113CA76947D17C39DF5
16C5E2722E5B01714E21F9BE5CC81F6AA3059C8BE169C5D0B120605838C0C289
9042585D01A59AAA201B4F06C7E883267C9A7B4EB42742E34C5E8D965A578825
77628ACCCB8AC93EDDDCB2118915B8E4D01CE5BC860A6674522C415EC5B10F60
6E09ECF53ABF513983E9B940C07B8AFA3CF06F5D90110AA67B57EBF0361C3A26
2D2C478F77D738F2AA374FD16BC51653FAA26857C0B02A187152CB34A3694752
862DFFA5E2893A1005125709EA16B2A6A5D0BC7DB6DBA4D20B11E908D9C619DD
775FBB51E49C9E078073E90FBC96876C74310EAFB312986143729BFA94CC8C83
1C532467FAFCA0326224E3ABE0D565BD000C1F8359A11DDD797F8A327A4BD893
9B3CCC54F48EB69FF3B13411E15B050F15B6EE68168E59195B5E4BF57383FB16
5D1C387E9B6E545BA21BF1FF2586F35BF8239A0359F85DC90ADA29DA8FBB1176
563A830F188973E2BCC93E5C257AA69EF3D840B66E2A469C54C116DCF63631E2
C3E19E1531279F61DA43B1A2A5CF91105E58DF43B5D000D1B64C7C2FFA658BB2
1E8FAC70D8E3823E35871844131EF7CEACF4063F1B86C7D5C49C840257BC6918
117EEBC71B33F0B065EBCC731CB2F06F856541DAF49217EE1BF9F05DF95A2C2F
45CE722D9E1C8D4B202B95445C44FD9AAE7E228A0221319CE786D1E24A8B87C7
1B268300CF5311083B89C86D81AF27BDCBDABC57543D39DBD0C5CEA4CF1BDE5E
6F73EC07B3E7DE00EDEF8DCAA1BF17BBFA4E9D98849E6AB20FAEFA93C3F0A2A9
24680FAE5B3A0649BB26ECFCA2F44C620BFDB72A44F5356EC92FA9101102BAEE
AE5C1875DBE42C23E1224ED29CFC03F5FF651B72D3E5B70D2836DFE33E782090
B8245254972A9E4781FCBAA506BD9D7CE361FEA3F25169B17C27CC63FE88712F
554B62FF88E616236803FDFBEB8BA8A8D7E0423553EB24AD6BF4739C52CE623D
B3DC17E5BA3907257B07761EDD4E519CC8145033156C4B9AEC2DA6D2B22E1B14
1B304E3316ED185FD2C7E4052B07EC4E797157C4FD919A4F43A3B4E51068BDB4
3B3F764DA518F5ADAFBC8B1C2013C0F57357F4F5AECD3FDBF39392D2B600644B
C8A7D7AA5AA2FA892F5A080B3AE5DF4C3C2241276730ADA37CCE71A5FF48035B
DC18637C83C0DC8667B410F92E60996C54CD2C993653FA183F21C769A5850E36
7D2795251414F40A13F764FCE484084D942E9912AD243894FDA1AC8B1568B5AF
EB6756F3826812AB9606859F8B88CEBF2609ACB01D758D8C8838F4D494848C43
DC9560E46BE38BFCEB0FDA3EE2B1EAA643739F20CA3AF2491CCFE7D42ADC53F6
7BB3284BB8D40548A9CC009B87404941B1C18BF3AC52BD2CD285F229119A2752
AA2AD62BA6AB975E71220D5E3D24946368C9556F3F88B809C282A76AD6F3347B
27755A5F89704F30E19C52DCA1388C7F6E8A1BCD23DE64137B630E8CD6A2E4D1
3A42A534EC7EC672D7560AD5C4FDB892DECBE1E9CF7F118F554E5688D5246D21
E1C7C519EFAAB524A94577EF320491A3FA8CB2D7302939368A71165BB0A4495F
535D7219EBC418C19973471FDE9DD9923B040CE6D2310290D437363B03516A6E
EA22D2EA651CA6280E2B40A2B9C8B191A79094539A9D39B41E36C19D3EEC06A1
F30C2E005213489EA266DC48CF6C7AB7BCACF89B2AF7B422187988654BF8FB8E
7C64F914AE5803D70D4F243943EDBCABD856702F29974CBB94D7AFA1619CB1A5
C14C87F12C56A6BA3EA5C8ED8031C438D14D755824F2C1A27414F73FEA8CE745
56CB092C04DE93141C46CFD6FEA733B2C7499584D5F9E40B1EB21C17907806F3
83DB5EE6F4988E3783EB7A14CDDAA677BA309E6A7FA09B5EAC361E177ABAA680
CAF22F18E2421FE6A57B30D116529D9F7781D553BD3C52CF438314BBA7D6D5E6
B388FADCEAD979BA7BFDEC4160EF3F6E157210A3A46A4A30114F032BA029D820
7CCA992DC1754A51C9E754A7516E6BB43756CE0D57AE56129F62A20129AE3E4B
A05DEB2A78E15F4FBEA19E05A9DB9B12A5D759909821BB1FAA64201B5D90923B
C21F29DE30634367C7088C98974F8A50EEE33F12CBD0F9BFF7C22433634B804E
051583F49A74CF39D366B66FECFB33D497038A1F42082A5AED5538D460D3D529
70129929360F17F612A62DB1068594DC152E58880F6851E4CE7E0420FEC748DC
D88046CD4A643BCD512A44D0F969B43B0F361FDADC54CD1A8B717A6973FF0D94
C94D9627E275FC30DD9DFF1BFE1921F975BFFBA081EA02D73836DCDBA574C86F
881A94578C408CE11A114334CBF42718BFC37F4346B36438B94D02F56870108A
5969895654C00A5F30A5F801DB4597333713CEF812AD00A931626533380BECD9
A77158110E3D1E9549A614B3A72AA8FF7ABCAF66A87D91E95AF7AEE465621BE5
473F0C657F7655A60284E9D9BBEEED134772AA09BFFA3CA29E638C195493C3D7
10BC0C3E25D648B22F5D205351C3307621196DB8DC60C6BAE887554951EEED83
3C700705825655067B4348E00845E0C5C8BF648A54169BB1BCB5948754AD8C44
B6A0FD558F23F29407179F1623BCE256B7E28470245FF444ED9D58C77E8AC995
3A357841A0CA879BEC6B48A9C86443BE43A659829BCD60A9997D9C9E707655F6
AA4830E3C33572B341E1175347ED6D1174CC7D3D57BE846410DE76E57E0A60E1
ED9E8B508C32086009CCED55D4BE6E5F4BB17FE1E4F307C058B8250DFF711E3A
A6BF99216652ACBDCD74B2298117ED21DB43BD1CD8283B24139719DF644BDCE5
A62CB22208D4150295CF1029220E9E602F88BCCDEFCF5B4F2714C841FDDE4A31
E52E9BD29A22F2AD24D97834F2E2C7D8B77B2D1AF1F2D42BA94BF37DF2B52798
3AC8BC8C18E6B08E33AC9755D1C877FD748C94A28A9D48FB4DC714D6D083282F
D3AE11BD52FC2907FC7D7B2D7B37514E8E77CFBA5654A9BD3C7CAC80E222B09C
97FF67B09F4BD9445BC7D8932B1982794BABD4D8814B25B08BA0E30E1C2F3C21
D4155248C2F863BB5A305D6BA35C98C10A9B7550B239E888F67D433CC91AA9C3
54D01651A8AE1A6C8D317033539D9ADD60341A4BCF9F93E48C53D094F9ABC275
612199A1A566EE361854A914F0BC069FA2C297B10C6127B56E9586A448B0607E
30054173F11052C8734CD2013DA5D3C1C644D773DF1959595A4219C8A097C1FE
B8776D7F800C040270B499862D6716DE9EE4D198D07A473BCBE4830AB5AA395B
47146943845412C109FA7F552936D2289DEA4470CE48473C02DB8C42B82D5337
263F407DA72E999E17D5FCC3C051E9741445E93555250A462DA7BE19CEF3F02E
3B8751E078A163D0BB6525DF4EEEEF01416DCBB93CFF6D48E8541338F418E6B6
22443A1BE7A48482302CB66A287D2BA92A6C963EC4CE87137BE636684C970D8D
E6A461A6AF68E2540408A717B13199F7340492CA1038FEA46B69BE91DA032A2C
0C81EDC4191ABB0D9DB94B3977AEB2967338BB1AA2D997A47476AB81A3D6CC3E
039B2CF0328788DCCDC3267569124A8D3180970D9D966044DD3CCC315B1ADE22
57F6F06D080D7BBABCC5A0DF4DF02D94548BFEEE0C3EA97FFC8448F7870488F6
CCA87C7E1B6122BB89F3C8081C6BD16E9A529F51C79ACA33F78D3C8E43BE792F
616DEAF4C5F65F46AECC2C9179A371A02FE280F40982F566B574ADA918D13ECB
14E1059D4A97ADA8A9650A8496119D13EFCB9F72D73D0CA0F87F1C4471E715A4
5F5DE377738FCCE7C76B66B4079880E9BDAB246A8CC2D0EBC89553B0275AEDF7
6C008E60EE006FE3B0299DAD017E0CC8F526A15C6E7B0DF9BE92EB789398ADBD
EEF4B6C6CE67B69D7028F36BDB89270A7C1DB4712258B8A1B9AABCBA35244FC1
C48152CB31E6A8B9AF90B8D4563F32399F3897C9144800C3756DB044E20D4915
2A88334556AA31CD8DF52F3E70B7458FC09E29911CE7E04BA2E2FADFCD3DCAE9
C0A1A2574BF892347DEE0EB7A88FB68BFD76F023290112E43E43F6E03946F2C6
9F983AD7FC406ACCF9757949E3CE2AE5B71F9E635E7471C9081427F1AE46B1B1
A9603F71F47BD753188083AAF5C982DDD34813F7315679AB27219743616DDFB8
6A6693CC2CB67D108D299A8DF24DC95BE0C2504D98CB6ED76B2AFB5EE9C9F516
587211566EEBBACC2730FBD6314A66AFA8E447D0A6090EFC043F80FC4371370D
2195B0745F3BC57964845B51ADB5595B333A06381D12FC328363978A4E6CAC7C
11480B9FFCF1F1847CB02D33DBEAA9344195EA36626340AEACFC4B41CC1FB34F
96248E24AF23E39A3CFE6BEF11993E47DA18537855960C1DB4B958373E0A4C14
C77BE750475A4B65AFDBB1237B82A60A70BE7DDEA5147B370AB75716744F695B
27CCE77DEABEE9DD01F33FB1912A1A4087B40585873286EE1E98244920558089
423AEAA1A37775E35BA59FE2D80E8333DE71316462C6B8077A368F9D8B0B3A3D
8AC4C6BFD8848C10974EF82BC474E338E629C9F3766200DF109D427A6F84EF0D
2EDC9D64B01996EB508C6FF220247C012BD70D082774EA23C62ED0271D1B34FB
DE196D72A97C06E0FB54801097C1DE55B85A057C777552B56A295964903BF4F1
5A3CD54B48E499E1856F1E949E48C9DA6B47B9AECFF5E45DB3FF454B2C31CB7B
54A129A70E6048839CC8803E49B6071266BB183D58E24FCA43C0A00C038B430D
0BB059F637924642A99DCF1C9F6311551D0F31D214004B45F485F51585DED6C8
AE0EE45AFFBCC1C9BFCE8A1FD96CACA5011C2561D0BE35FC46907AD17CC5E97C
FC4E61A269C678D5823CAE9DB4A7C51C0CE462EDC1C58A7696168BFA193ED3C0
940C768540A8BB14D3E66B17552B1EFBE2E5BDD633A99A666ADD027CDF5266E6
8C307950295FB564B8FD5D5C6FC9EB362190F78578D56A1C0CBC2B3E3430D9A6
3A73502916C2288ABFC14C1497C8A1001368560AAF71FB061942618BE4047668
17CD0F4B29D2244CB0E5779B87326294E05113C1911B475D9CA178EE40037385
10B6293951D618AF4914D1ACCA97DA190201EABA6DBBC876AB933A2B7C49FDAA
19247CD3FFE0B72FFCCC3C2E34609B04176ACC96E3AF25260F2E92C7807C74EF
ED2B132A2915E0454FB434CCD345102C54FE2208132979EF8740F922F120A85E
85668AFDAEABB44123F0FAC8CDB12BD6CAA0B052AAFB1FE9D1B92AB7DB7BF6EE
43CFD08C950DBB99DF8B9FBFDF25D677997166E0410789B7A900019374547223
A106C736E67B902309CAED8C605EAD4AFD77579D3BA8BDE03C90914677773FF1
F8B32927F7C68F9950D0F5F275A2326B8E53AC667727F89E870D702EC4F947C1
DA4B8B85E4E08182D1373E44286EDFBD4BBD8B5221FD97BA1C2674E716F4AB5B
4A253DB6F33F92783D576D6550E71D6AEA607C3F2BAD81C2318433CA27115FFF
018B9790210993A437080246E63229F311FFC9566723698234387F8EF6D2E9AD
AFBC9176D2E877C9D142D383854921A3292C63AE760CF742D0BC7C8C46940555
529127B8E9F6BC1DA5ABE45A29A082C9890C43719727AEDCB9E39CC073C9A13A
681FE8784305404EE5490A5E87DEBDB4ADC2FB65086F81DF212CDC222270C487
8DA5AAE0CA8043AE7764E3AF0BCD697DE057E449120F6DD1E69981BFD404B308
869368C3936F497D11B4D51BE2BC4B846E6770F5532BECB2D9197B434AFA1C9A
B3185043A04BE41F18B2CD19AAC871DF4CCABC332ED5E31981258E0B7CA284D2
D5316999D9BB1FDBB75BC2AAD9C3A77C5DF78B6F2C46B77A7D279AA2B48CE751
8ED697642ECDB860B1B84DB9BE580C0680E850509FB6DDE73913603440D7A484
B99E757C563A99574F793EA306D59F7C05E59FB06FB392C02AFA84C916670346
64325B5327D5E7D74F67A1F0AEF60BC18A1356D1F3E208CC53350BF2C5920C97
B1584B7E0051107EE778B10EC2C521A35549B3FD81E9DE850E1F7EF7C9BFD0A3
20D5F807D76FF70CE8D8389F3BF0C6649012FDD32A50EEB85ACEC1E68773D9D0
3FE5E8114B519D887086C39FA8007917ADC79389980FABDC96A3C98F54C211A1
6A5CC51DE02D3A48AAF5EB21ECA39914D215E023A3D5084A8988628B0D4853DD
20B5BEAEC52A8C25E743027443F6A88EC8912E48253717FA9AFEC4A554417C5E
D158170D35B744F6652D9F24C05D6D4F1D26C8C441094655049C19F94698A83E
2D85088DD620CDCC241A0ABEAAB45A9BA77C4347E35DAA94412FD0F947832221
5E9F59E69396C35AC4097C4C147F98241577CDBF8AA7BB7B1925AC2931C2D359
85FF8D6B92487DC47818C92555B5FA22B8E2D726EBDC077CC8FA0737BABC8E13
28AB11B432CDDE1BF3F0DBE4C9F61E215C958C053897ABA5BB7950FDC9E0867C
F4C02FFD6548A80BB2611AD6460F73243DB763DEDBF476F351650B29B9ED56F1
50AD56000D24ECFC77CD8BBF484BC0F18A5834BA7CD57325B5A34CC3F984018D
C9653649786482239A0C81E94A8380D89096E480D7B112A801A369534C7DFE05
31799FD9C1D86BA3B9C0205FC2580EF426E989312CC447E1F488FCC359CCF3BB
3CED29E0E66FF175ED2ED573C7357DF3C02C1D7F1DCD52E200F6B71D871C67F7
F885CFCEFCC8A29770DE40C1316698F13E788A3464EAD10C6F0DDF513A630E01
33FEC808630E4B3E61A14B722CB0A11F3967BFAC1FBE8B11523BF84124C0D02D
3C71B5E645C82E92F057EB5F859BEE23DAA95C55D76C6B6F759FDB452EFA0029
231EE1E3133136F8BEEDFD7C71FA95D3514F04CA9AB516FEA662832F3B2704F6
F88BC4EDE0996427EDA0CAE0F19C2B1D5B917C508E2AE27576B9D9EADFA0D510
77ACDE9DA732031E629837AADBC09F5B3A390C7084BA4E6E0D78AFDB692AB573
303EC4E149A8A38EC38515582AE2C5AE270F31A408D748734E479F700980BA6F
10E8B532CD0D4E6630A68D7D5EB572F8A7A25AEB6318033565C0190A4757B631
1BD322C73D39C53B4DC365CBC412E9C56D7549ED6EFCBB887B28439A99F998AE
7D06DE000B4293F4FCF1D78EFDE07218DF93FE7FB1065F435BE8A39EB454D88F
5BC45BA81B0A8F08215E85023D0B7359E0EBB5F06D010E6BF1D35B1D5692B363
F7868151FE610227A6926E2123BE874F7DA1CF4F797DD77D914D1CA90A891506
E015F46C9431229FC1435B9B3591DD4C29841719CF1A22E43C53574733F9A3A7
87D4918F7BE9FCAB710D6DC08AD6C0732337440073CC4C3320653402A526E679
936C6CE7EDBF6F372CA6B772E8A98104FF42681812C8844FAAE0006EF6348240
101B14394072F5156299495491634253D2A8F8B69774AB6AC34E2B878B0432F8
03492754E806D0771C5AC3670D82BABFED7BE63038EAD07481630EC31290725E
82C62CFBA3F7E7D47E30E9FCFBC87CA4AF693F96C204054B3D7DDACCB85D2E7B
C1D29F88AEE951C24558EE21FF06B8C37AC3058A1177E55F94C9302F0411B5AB
F766234CF170AB31F8140BF306B6DBBC892D5FFAB14EC72EEC16494778514188
31490AE7372F54B764A8DEC933DF96581A70E88BF65ABB396A4A1D65189A94A6
4967FDBDE22F32BD1B883F76C6FBC44FFAAC5290381463C174108602BEEAEEEB
033229E3646B97042C0403FA6A5597CB2D559E0F0BA59CCCFB9D76F547735EE0
F40D261B2F9F2AC31EE36F887D0CF61A575444B3118085017210C6857CDEB23E
CBA603CE654F0B4CB297E3AA3E9EF09356EC8F847B7220B071C881940D1006E3
B598E3BC4FD8426B8FBED344CB30F555634425B334011FBBC2A5CA7EFCDE8F3A
7F53DB8790493D8EC144A3C3B1586B501DC987370E5B4B5B858609A41C02D363
7C5EFA4885FC8B1E13631A523D4FCCF54A0886B36BE8F6E9775A927F2EE5C423
502EEA90204B4D372CA1B7455D51E1ED8E082C5FC8C49C82A50E6C6440387049
A0C359218F5268C9A28B07581F7CF09A046115D45493F7A67587727B64D2D567
A294911FF9F693D459C15D45B4A02609393B950AAAF4BB7387691ED180DD93E6
5C3E4A2F30930C2AB7113EBB3E1D15E83D18817B3CAD46646300ABC90A568A8D
9E0D6DC660E6609DA559E0BC54632E70F5A484A9C99F97078D6FF74A68D04C38
C598D8626BFED7CB672F132E06593DF5C15409EBDC8373B81B6643420F1ED861
9221907BF5794ADF9D2843FC809A040B9287F0C71D93F7C2B32733315448D09F
8AE5C4472A15B636F7BCECEA17F062BC484899A66A432D5FA8044190358D9A42
B02D8D79081A5320CB1D32CBF502628B110ABC798069F2B5CE2BDD86C6D7DE61
A9A57011C0B40E1F48AEBD5ACDB5DFCA4FBD0B39C09BE3CBACE7032FA494C240
ACBD6FAAB7F7E1824EE37BE2AF933CAAD62190D61C3F336C8E68585AB5F5A6EF
DC4424A80831F30E75FBACF46117163E07E33179DCD2C4833DB43341AA37BFE2
058C59E1203EBA3B15A48E01F806450B5A5009B2665279C0670FB3550E5683AB
54C136C3CA5680F622117252D1D72A6D9D057A413F75BDD75FB886582579C4C7
9A9FA5263AD720200C8B457F1200E596E8403631869981BFEE1D0526B20FB55F
BF170D43AAFC582CE3D91F40AC5876B209A2D6857D7C042F58E7864340658026
2393B6EFDE47A627A74C109CAE8820AF92B5070F3917D2ED3931D6F95AE20BFA
B93FFEDBBE64F97DF290EC4592F10FF738CD962D2DD61FDFB0AC2294A0FA7365
3FD98700B41FFCD55C10FB83D7B0EB9D514BAE5B1B6306DD0F38F1DF71486A47
C2C9D3FBFEB93043F3ED792CFC424B5B78B22BCA26B7F1143735C7AF12B247F0
1E74EDB803F299EC1C19CF4A8F2E31726963CDC854E5F7E59750F3513A89A4DF
0505C07E64B2D4C0BD3E22D58FBE826B47970FAD625C99BFAC2E5D0540E0DC26
FF4CFFB4C707287E63026AA470E2EC6B4A4A83B4D1345982552FAF1416320496
D6CC71C9C13C5E5EDD14CBC71B1386716314A8508D89F70DD9E81AC229B15970
1C4814FA02D96BCCF5171DEE42D35612E7B5F1FE53E2FEE4B464660A4A590113
19DF3584204B5157B67AF8EAA1B1B4784F7E1722EE8749B46003D0F15C99AE27
E0F38D0CD25683BEF2918FC60843D1751D6B447D4E99F8D7E58F9B92EB852D91
02C0680482D27D1BEE88240C4AC5FDA2F02F18BCABF109D2C743DC30FB7B92B5
D4C5D550691149DDAF517FBDA6646CB508D98E9D83D093872D6190BB161EB26C
254F71270D13D0398092F1006A7A0BAAB0E469581D4D0D3F56B0228A92EE0CFC
434ADABD309417193A054E2660F17332707B82AD5328752344AE575E09085A9B
841D92C2DF83318D34CBEDA3251E14914F50090D608793DCFCB1A08EFD5845D5
824049DEA9416A459F6C54A58AEA1E468713C9F80912DDF839D4EA5E2C460915
84E9CF77CCC7022FE2C441E668AF7D0F300ED8C607BECCC707F71D8D14CFF9D6
0B39A670C837704F3D05D30B45945B2DC4FC22137F432A98196C07A2831CA5AB
2DC3AC26DA1C12899628A7B22348E9204546DB67723577FF80F87FE19C7DB3A8
4D4267211579F617A624BD75B63813E2D70F3BCC3B0600EAE1397D797C53D14F
468CFD99BFE2AEFF4475ADBA7C79A84548378733E35AFBA0ED58CC28E58ECD4B
96CC1B3AEEF7F57BC58432C12D1F1758E2776A4E482353518B880A0D328502A4
FF99B15C1F12F733DE98DE557B7FF3AECDA8C07DA98DCF0367BFAC7A2928A83F
5951B47BA831C098BFAD49753FCDB22AEB49D90F399644C03649AA797F5173C8
814EA063D60D1088242F021678AA3F22EBE9197D0CF8B7BB8C9F96C780E5165D
4E477CFD837B96E6E8231EA06BED1A4988081326CA871078EA4B50F5CA2E6142
8E6D592AEE1AEB5CFCFC42635C64522C96058D5FB62D08ABD450487A6238DB35
6D2DC160C12420FC8658C14BC5404ACC5591E9EAAE52F61C2703BE1E0EFC3D8F
BE8D4CCE1D43BD98BD73F6036E88EF24C8C059AE646C5D2DC43A8B722C2527A5
445D69B8B01F332120A9BF68BB09CFADB9B867629E6118B4C71AB0DE8C65D94C
165F96CCABCEE221C5BDC78A94914D33E14AF912DDEA454E8303E958AB1EDDE1
148B4DC37BA971B44B0DD49118E33903553469CEAC6285CACFA16CF1778EAF60
8B8BE6C1B0E464239532966D06FBF761C277871511117DF631806DFE226A7F3F
E390001BCFA264F5CC4EAA13CB6EC6F6AAA82480BCCA56A05FF5B8A875957B66
B969A2E62C79FF4EA38BE9D3CEA02593520E59A60B4B53139B20A2ACFAD93D0A
D82DC7CB644B784DE8EF0B3784E5152A1CD1108E7EB378943D1C0031418797BC
EE8BCEA220586B4E4A8557A057EB5CDD37CAAFF868A4EF7DC3AD0A39364BFE3D
1CF3F9B3E16847C89A31056EC063CE5F1342472897685BF59ABBF4DDF1AC8F44
B3085405B19943AE5D0AAD5511D8B171E9E2F01E28499677DF13E151B8573862
C751AE41B3079F8BEAB72E5F64989104AE30EB43430F38379785738B789B1E5B
F2F2E6C4A938FF605AA5FD70CE749C83BEDAB386C9B1AD8D8B9A7B8B576E48A1
33ECFCCE67B293ACA775D861906AF013A8F3AFB0405BBF08F710BC4AAC7E7C1E
E493B5F41952800C652CEE76F5B39419DFD8685DF6ACD741AA1A128F1DD8CC4C
6FA11141BF210192123532B68BC48CC3E1019BA3A7C7127908CA894B83666492
C7FE699E4F2FC2F7CAE09EDEFE2D565111ACCE7FB96E9DEF3EAEC6D515931E73
A70C92168E41D5B38A140BBFAA038C4BD3C81751E3D30B195E00D832C05D4461
C547D757B3DD4025E7CD9C29E136B224BFDEF65689AD8F1CDE8B1D5754195EB3
F5444D92D11C68F050A2EC05580EFE00A883A9A6E104BE2B0EEE7D4918918842
B6072B19F2373EC50DE580AA99890075102787E0E4C7E6E2FE9425A5FB6F1318
FC1366D23202D3EEBDFFC4F7A1676463674BE589E76A8F12D5AAC30423881401
C23852D728A6C84ACED9E02D9ED6B6173A8A8077D5D6F2435C24FAAC9FABBDD1
808CB1CC5B9FC4B0A48E83AAA572EB36DC7E045C4D5C5C936CFB0AC7F21063FA
FFDE023586243AA0B9C4D1A97E77B6227F2291095E8EB14BBB0191947663763B
77565D07EF31BB1B5F97875F80BB20F9C7637AE0556E537462AB0B27E20C37A8
86CDF3C244C01067096942BBECF9C533E7EDA52FE7A84F891DF034AAA2F2BE55
CAC55717BA41A6FDE5E4863A772718AB4FC0B7DC402793F7CBB7FFC71FC82F1D
57F96EF307C106CAEB9446203AC974F1377E14E3AE925DEC62D5A13FB9B5B0F5
CF20B7CABE8B0541BBB4717FF2FA667AC7A55C2138BC4BEC517E02098CD4D009
C8F09A6E815C298FF460CEB7EEB4CF300527A5F27739FB3DA04BBE0B8AF8B91B
D23AE1736FE25F8641CB5D10E4AA013F98200B377A0D94DF964E1FC6521BF119
3D802CEDAADEF174EAF08A79537950BD016201F81CD121FE72E0960DC2A4AC64
943D02BA66572E83CFD97A78DAE413C210F0898047CD1F05C57CB7FC0BBA33E8
D79129EE5E17E17FB14575987A0546E34F8BF6335D5292739285D543903667EC
48A465F243616DF71953D030D0A3DEBA0D947D0A0E4757F679A37F3EBE2CB1D5
F9A07814663EEA258EA6A3B4BFDC09081469223AA0B473C3BA7D3AB396B3BEC3
EC08668D37E8DBC4F58531C259CB4A420BAE562C3623C2364597FF1CB8B41D13
136EDBAA2D6199B761A2D1731F85FCA0E405DF649C493524F45B83CCD1CEFBF7
07E6B7E4C37D25BFE1055CE025E620CA0CA61A75F205E98EBE130C4F962AEC37
0CBA24207152C06C069305468DD1BE396C9C108B1F9A114911CB4FF1461E0E84
FE20C6AF5DA367D91685CC398A73937DBD4FF567B2AD0E99AFB95A0401C8D933
CDDB280F057BEE9D4A904C709B45FF9878274255C181B21ACFD632AA93B55381
43D4332C4EF2860D825ADE2E21F6B06C3E4A0B9A63000E6BEEE8DF2AF2DF1182
8308177E897F68E6BEC08D62D2A4F490BA3184B1C6569AD070D9EEF905335BC1
E0CF8671F385A519D788312FF236D5218474C85026342785B602D342CA38A699
4D2593B76335451F57AF404815C45893B6CCCB5B7071AF4C727990DEB7A7A2F3
B4A63A6CCFFC30819DD17063BA7328921C26B257A31F1D13612B44E25ED672D6
384641288A4EAFBB2D1C91F9CB9E537FFB0AD38F91AC7628608B20164F31CFC2
0D7FE6C5895D6B3828A816D17D063361FC8053D67A75C660AB126277EFF34CAC
F590210A54F7FEED459A906FBBDA6D1B1BC888192C47D93A312FC7EA4497AADD
2CA97CECED40EEB2D79F138A63D5B73EA0E28DC38D746FF899E8997453130331
861D4BD2A93760DFE25CA3E6F2739B062276BE4CA37EEED8C3B14B4B9EF7D2AA
0284BAB6E9D08C74EA7698BC167E584DA5AAEF36F27223DEF17BAD93120886C7
721700DF6181C5DB82D0ECB1252372450D9ED802AB0D5325460E55027C4685C5
FD6588E1A4ADBF9DA0AAA4644FA922FC56B0B9ADD324D342D3D103CF44FEE1F7
A9705B65F8F0DCB4362428B752D0E745B92D3A3FF93A7C0DB6FCE53C42987EFE
CE10422C2BB3E8C6985663FD66DCE7257AF3D1EE9FF12920188D72F160C16082
68511968CAC2296D078039DC7A3FE1489D6664AF67887241E313FC2803A24268
44AA39B6FA95D8F17D48B862BA6AAE7E6332827CC36C34A1BFFE6EB21FA0FD25
65D137EBD60A1ACF375BEF56C30D0006ED58D9745D1A39CED9EB5B577A79E34D
FC1410A65E211DDC0CACB6955A97EFA39EA232AB367D94A51BB90D4754ADC59E
824F0D585D8F464A9927947A9E31107565B7F54888112F459FC33048594BD1E9
E902DA7CB570F76414A9D6F85B79E5F3E15B36D484C16D4E87EDE2F21DBBBE1C
D57D676D76F4507EE35F2E3D693F074E58FFB1B0775453122D26B351E44161D3
7D4F92CA8CD1C9CDCFD55578A1025408D192AFD8CB2D05A61C067C0A087BC86E
BF9453B2F632E39606B5F2F380C9B8AE182284B25E327399322F64AF1DA34148
5B4DA6D3DDF08A4541DF41F60968A2BE0FDF97F5BB699BBBD1602B0B87FFB1B7
5DBD245205241C3CACF3E4966C13D1F127034441D057B72CB17B1315E4C7ECBF
578FBF1BCD0A66256953AADF0BC916E3AEB92A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585E9EEC4FBBE9CE6AE8532B2CD4
101F1E68B19CC8756AD1987CCFF2302525BA8389489E8AD29C974C5A18DA8F05
5671EBB8954C3A90EE42B2AFCC9D2F52165A0DF06D6A365FB88544455AA87281
8C323EC616CEC04738328542CDE8B0B5BF7C93F1B7E133F3A0518EF8DE086451
334163D1D60B17DA2A733E28DB0DFF1CC06FCE2B0B6A6F13323FAE6EAAC2E140
289A9902475E6CE9C732FFD0344F1C8772BE74E0705D0904CE66DDE2A0FBDFFA
E7A5D02207DB3B8714CCD8900F91C87934A7E178004DDA6D91FC094A714F4A8B
27AB4787F38B78A41FDB756A5F2415403C8F7A99A825C8A6F37CE009152A0248
5C3A78D7E3649E597C9A8068828C2B964EB7976BDB0BA9541C3D806BFA4FB77C
5EBDD889F9D80B15A0764CB951D16524B621E0A4FA9D6F6F4C619646B14A25BB
40D57C2B958845B8788B60E408B6BD71BFC42CC17B0608329D093E1F9990481A
E419883FF01BB562BF7A8CD1C6CD40BBB35A568667C04C5536562FFF26C1CB5F
D8E91869E0A83A55638A573D81F89504703150AD673C8CF43B1D23ED27CD5E59
41D6326BFD00F8E2C46B4C975ACACB7A8A5A254A978CA100066CDE17ED245D82
EBD6D8A0E6E054359B579CD2E0064E5832E860F937F033783A442321927A1A8C
787CD363A398058AD4ED21814D5132E07D93C5A9B27F2B44615B72C93110F533
73C50E14657ED09FB27A350233112B0A339366B7373CE058456E0E1786B34190
AC06A6ED10305E09ADDC767335712B4542DA438A8FBC0A878608407B9211298D
B6C4B86449F9B3FA083CB2173152213DF47E7D07C329EF198E85BA6F03702324
345F9FAC6FA427A9DBF37C658288DD57DFF41A774A876ADAD1BD31E35F8B6C2E
FB81CA292E7C5BA6FB7CDDDA4209003976BE52A03A79C34EBF5CB4B9CEB57DEF
5C10691790826E35AB391A694D529730BAA8F75C5FDA4DBABD057D3F46466673
C2C816A836D1E36B99D07D17819B9F91B8D7347DA871E40063D57C1CAA5CFD90
04575AA9F1AB91191B962D64D82CD86F6AF3F1381F095C0379AF1AECE95D2547
CB2DD44ED0CFD23B1E1537ED3C83D34C8902ECE3FA1653EC33E4D50EE9329A8A
AF407145849ADD29773753BB577FEC7C1760D468320A79C6A1C23A69A87B4E59
3E92607A46259CE64EF5F3106A9747916C0BC2C46B83F574F370790FF793AC7D
7C48D9037EF31940A9C87DC01D4A88DE2D7515B5B6390EFA31A44589BE79A66E
6C292CFDE3ED8833DB255B8FF933A3F8EDEACADDE0FDB24B9AF2504EEFF2FBAA
DB48EF0D4FBBD2A0B5F8D89AAB7B971CC89C5334AD9996D31DF10C07AD641F24
AB4E8D98CA9421505EA0116A0876149EE60107620A89C9A3C8D1BEE4113428DE
0D55B98FA88D7CC258386B3D492717B438C0C74ACBC372F470DF8F35D6E5763B
312979604965F45E22266F569977FA7D7C2E62D9318B033223A9BC848420D62E
3111B09675FE9EC168A340DFDEDBADC1EA404EFAAF8B6194BBAFA142922EB643
DDEDEEF71A8C3865120E0C94D45E979D8392C29DD551188112A6AE98DB8CC966
2BEA42B9B6B8BD5ACAA54BD90BBD4607A2EFE01AF44913B89B791C0705FBF788
CC8A140549F78FC39DDD5FDD4700A56CE71FAACA472DD4C414087CAC63717C03
A3BD2215FE1427DE6E2BD8CF609735E847BAA0635F39A4BBC987172D1787E014
981A78A952644F5EBCC01A305C08EA4625C11416445E836DA7A3DE9A5C9CDE1B
9D487602DA79C4E845D5BE3CA6FDC088B462575052983010A2EC593B475F94A0
EC13432AD104E1E588A434ED028A2F301EC9B98B537DA47285A073A818373257
7DE94ADB70CEB5E6713AB137AD851808FA65D21C48BD9202CE0D5356AF6C40EA
820653A500302F0411B5ABF7644D03E17F39733E90B60F0DB14DC64C38FB8A97
C0BD6AB5AE1B5FAF5BEFB6A168497DD3E1C0933826D1472CCA9CAC4FA61042BF
B953C5AA0EA645772F1E38F523455AD0219F22C6E5E6975D49BABDB8EC50A3D0
6D3366B8A9C7D5BBCD5ACBD7B86D7E1BC311C99F108D54FCBE543CF02200BB9E
6F1B1B21FF80E30DCEA5F40F504468056D96AE7E0191A21742CFA51BC826BE28
4AD55D76AAB3B0B477436A6CE794BFF0ED77A7847F7CF4256ED2C90961ABCB4F
B89BE2D0D207C80CFC47E1922206029590608C6420183612DA9CC6598BAAC380
D6BB40A876D2BB649A5C2137F736756DED63CDAF5D281C0B5F2BE9E890D51816
AC91DE8D6D8F93A35D8AA2145E0598557707267CB6E58F6D9CA6F5B88EF3EE14
0C0F8E398980C7C6DCED448D1588FD8922A47AD1FA0D16BC17BE4D1495247B1E
C6579E3121725DEB36EC7B4A482E97B68B3C6F7239B54D7AD1F0AAB6C7A4A269
4669C901D7E46F00277891B9231F2831C19E73CF8E1EF3F81C1626E392D4B1DE
9A318360B9CB06F8F917B354F1D0ED0616289C27C1517263C2C8A901335B7753
AB510E74E9A2E37BCFACBA21221DA50567A45EF2E120FE3A811ECA081A3D0478
D3420B503563CCED8163121C1F672C14EE66ECFF5B219E8BE1598540175EAA76
406A0BB4DD3905C314C9262D553D7CB133CACA87F1535FEE6EEBC67F90818206
B95ADD734EB952C3415855EAFBEF4701909913270E0060FE23E1DA9A96CC481C
F1E7447E0D7936A4FFEE97317843F64743D9961F5F0B5A7C984B6BB390F2D2B7
A4A7376D231490C6836957FDA9D7799E5ADB6844A46FE598D19AC35D7FA92073
5CE37D8AC7115190CBAFE8841364D8DCD31B3D5122C8661BE65734E463102B69
B470A6190039BD94F2EE7972D0B24694AE042C8C9046F1ADBC7E9F64BA5B13B2
D3DC8707A8D556B16A79371932FE7BB7FF36389A0D65C454BAF07720ADCDBEBE
DE2B2275FB0BFD30DF0755C050400A2697EA21C97B9DAC9C231977BE978EEE0B
7A3704245DDBD08FCC0DED7F3E886E0206CB52BA639FC293CBDF7584CA269DEE
1C97A0F984F440B9BB7815A53B725661B27F5EB9C425CC1D2FD1DC099F780350
93ECCD7AE138C5AE0FB4F043144C9903478B4BB53E4EA9CE571B9871E0986884
51E3C31189183A62A2EC5CC2E6A672FE540904D7FFF20A101683BBFB391A8FF4
70C147C6813785426E50436F7CBED5E49046AF839C10ACC0ED47355D0FAAB8D2
509FD9478CC52C35F034F126393B7E62A21938D2166FDF363FBE20932DE23964
3456C3A198505449439794DAACFC09D88CFBA928D5D432170FBCB19B4C29CE1A
3D849EE85A0DA71350E6329ECFF1C904A94473322298534D5CDC3EE499B35288
A3D966999F260EBB2C2B7FAB368FF1A3266389B0907B8562DD08AA56021CBDF3
DE1C1F8645DA03EA729468D2EAE72FB04C6D2B4416E3E215FAD05624386895A9
7EA28B1791D94239667DB145DF8595130A44E89C39D2DFC5D3BCD8274E2503A2
D9FB123767F732E7BC40839603AF3DE5A65A1FFB5B46F4DD795C6AF904EF2DB9
9A4D2FF56D5D797C5209469456CDA0E8BFF82F12FE318DB9E65DC2F3E2A632CE
F071032FF667B3A1F62328B34FAED0F5B9722DB2D6F514E8C4C4BF3333DC0A7D
33341F627AA355682C977185591ED2237DF1592D73E3B8C51099724F9157C136
735CDB7DFD57D62B513FC5B63D113F7F0D00B0C41F93C548AFC465F5E37BB0BE
7571DF990F78D69354F116E92586DF8E30B2976991A3B77251DC0F15B0A7E82B
523AD187A3AE44D93FB7A0D5F3674C2359AD152CAC44BEFD881CFA38F31499DB
2BBE8FCC2556BFAD8971BAD3E036F15442EBD1557B0BBD97F0024189BD08ED10
558604C17FBE7FCF01EF9FF989CCA3DD4237244CFDACF1D190103A64E569EAB1
1EF3D3C7E4EE38308D20B6D91423D4F417B38E66572D9109520A371D9C501408
F9B9D1A30E09A7EB286EF0378A1D9E27F29C68624E863B28B2E7B4C3C38BF32C
CDDCD4CA025070AA646DAE4B889B575E8F4FFDC234D726EEDC3E7131A3049A89
BAAC98C00DE2278E989D877D2C7F808C2D7974C2E43250664A4D429A915D9F14
DC9577AD31EA98A51A1DB9CB0EC09492777B3810FCF8471354D04CDC1F08BDA8
FB63097109E771AB92E0198C9495D378DDF5E3879446BFA1B4F06E2C329AE0BA
4601D3607DB7466631822AF1BAEFB301E6900AC2B65CBC26BD9497A3B908EBE9
A2B47EEEE8018439FD1AEEE194EC060ED2476275D5384C43C08BF69E4CA44F7E
2A7780F6C88E1BE994C9B91DF4FA10FFB4FF1570574EAC8975B14588128A4F2F
6DC7A1758B036F6C2E48AC5C1E930346F7CCDD0AEF1705407B94B24819D3B17E
F3799178AA4E926A15A00063146618C8D2F36115E1867B79B61186AA832CA1BE
709523407F265666D7579BB8933FBF8C116E6294B75F3E3F9C620B59788EB9B9
FC1432C6903DE4B39EC952DF960918D17891CF1B76A76C2C64A87D5D014E189B
B9EB0D1DFF54A93A8DC14BE07A433D04CFD43A54A673FD23ED95145803260D08
7647FF55993A6C45E87431AC3549F382409883B823CE9FF4464500697CEC5C83
1BF140BB33970339EA0DB212ED3410AB183C2EDAF173F0DC106177F0F23A123E
4C539DF69555C9B7126C35A129D8B88307327F79156D6C685EB8A77528DF8313
1F02C5028D0F35B01F0810749D7DD98100BED879F02A81987A68453D1452EFEE
1B97A023938F8BC45C2E6ECEA957F5A825925463C653802571B320DF9DFE3589
993997CE0F1D799465DBFE4009BE6FE861BD920A19FEA255531A6A62C379993B
DB9178BAE43920E3AD73ED8D6A74D2789379B0297207C811514599AA82119E8E
EFA304677858F156E9EAC6EC03872BFA8D9CB1975BB9026B56FC3F24FE6E6EC3
01C670028FEF178AE85EEF9167CBA7AE6E3F2757EC5A6B046DCE9DB8F8CB66CC
775773A60B53D4B46DC4CE9B9FF1A7480F80EC4A1788BFF001DE4C2236D33C44
7ED04ACA9DBA348076F8E2E61CF29780690190D2E829323F3BA9F7ED7D399CE7
35A6A51764CF5E131CE693731B0C499FCB8CD67A6E7F7A04BC64ED1C8DB6CAFE
561E8A2FC628B5FB42044DEF0D0FCA179322EC30767616DAFAC22A2B3DDB4912
607C200780375606E7B763D701554DB8626A77E47739C769CBBFC9865A54F234
66508FEDA251C87F1111C25F2F8EB6DAE7A19255CD29401777494930135A961F
58F8714232A115392384B5A41CA2A7CE42BBBE661B4B40F59E4D372461555B0F
22DB7DAB1895D9C7E6D3297326D6AB654464E3E70ACA1D593C2CBB0CF1386B59
B3EA31C285E803A4466B47E2F3918C4365A348A02DA99C006C44777716388AA9
87B2665C366918880C3DA0E469D3509EF0118A4E98E17F6D7F9217151E8415E6
2819174A53C38A25519EB9A98EBBA5BD31877A487B252B5C832E109DBB9FDE2D
D6A4C645923DC29F384171A48660EA36DCB2D93694EB75EEC0AFF68345B17B82
9686C23D1E397FCDC2BD63B0A24FF7C52E96937FEABC99DD65CF6852F09F53B0
87A3E5283AB296939AF66086E18860B42C4645616799872263B1C363FB283C38
F0AA2A2004B7567780B795D46FB19165E0119C4359B471668282B84A6E6BCBF2
83C414E8AD6781F12B0F797290F0F4E5C03F4C05E63F7C7FE280E34E28E46B44
89C40D4C896445B96E7BED0BB864DA6469A9F85E1E59A84A6DF6B2EB858CA450
0976BBD5D5EAA001677BD081DF18650EF53A232A8C5013F4D50967B5140E02F9
E0CEFFCB4367B05CCBE5D82778636F411B2B72CF35172587C13265E7A78843F8
0CD719C44633862B102690C1545ED87773C6B3A8ABC8ABB13ECC3B249F1878A8
FBB90B6401B507B92E99DFF7DB2A6AFC77F1D7F6CF658032F8672E0E0600DEB3
8A0C2618A58148687C5C9DD69AE2932074325629DBE7BF3642EC9C7BBDFFC7AA
A6EC16C797B31B0006D964EE87B70841BBB0011D86ADCF5D118DE26D1A1F383A
2E3003317B192D35E8984EACCEE49E15DCFC537A774E8F036EA3BD1FB35B49AA
A6F5A4F21347549C1150C47407D2FBA6F34AFEEE271FE7E2B6FD928FF7E51CBB
67E70B290AC88D73F9CEF3648B20C687D77FF83C5898C718A1E73AA063486F3F
CD61CF880F6B9A1B6B68F3CCF0B1836A57B850BB9A806FB807693E837663D92A
3DF30AF50B62E4ECED90147C5AB8EBC973CD8D3946E50D5357E57CD8FF42D742
F39A7AA01C8B3074060D1A0C716B559A93FA16FFFF44DE8B99D6205FECE23D72
A9F61619E09C929FDAE02B4CF803672EF0AC1A4F76C8B2A035BFA7760362413D
7C9BCC3D58D6FB6BD665CA0D2C509270C53B5EA63F6D10265DC205CD8FFD81E9
0B3540C81049C819D1050A62F195A3051CAFF0C8404B65167DFE633C28A2F142
B856E17A6EC6EE510C1F0AB90A2297A6FA436B5116D10C6BCEFEE8139030E52C
13DD6B11A36BD9E98190CCA9EEFD8E5446EADB4DBF704DD1B3E7306BE84705CB
003C7EBA17035392BF285968C0DB6DDCC48590B40E808537744BDC081F40E027
E9A5005DF162A28E497C231A0B0AACA7779C204DFED7A30C3CEE434832D290AA
AFB6CA80087E8426C618F35939407E71E8A81EDC28658BCAC46B290DFC519741
D3858AE267B7F82277403C5DCEFC2A5038C96B8A9FBFDF25D6779971EC4E026D
010AEE32EB6A06C29075FF2BE551E14CCB2C3DED39E4BB878CF4D26D572D5973
33903328DEFCBFC939D820A970BB481EB62B5A8444D44E87D275D7FAFB371C31
D79FE5B5ED27C47B7BC864D52276BB967CF618433020670592121CF4DF75E6E7
F636E36678B8EB2B2CC99B33FC7A8B194070BA732D56CE2E449918CFA0BD6F36
15B632568E0EA67288F7AF12B053A535DF12D2DFA60982CBC90F930688C94329
B65E14F0617A0877BCCCE963F89BA1451FB3CA19D27633943967D45F730CFE0C
2768667D461CA559EEC7A15DC14530341A1CAF938F8592C6DFD756C0D6DDA4B6
82C5ACBF9965D25203E5BEA71FF2B972E2D21177409B07626EE46B039C4EDE4B
3BAE81FE47D86AD37AE081C6C5FFD28AB6F49B1FDBEC0F569031CDC00A227099
1367C2B10DE344349E457FFA665A46AD11556A9F47AD5CAE8B56AAB796E5C554
F4EA2AE2FF56014216ABBC37A0AD2B5A7187A04AAF44FDF04B0CFB2F24C24ECC
B0E3A458B6A64C4E94251295465B2D3A111E4AE90D46F1A6FE3EAEDC5E222FFA
572AD30B951B641FA734C987AA6C783F03CFD0BD479303CF3CAB8A7CA381AB5A
0384449C60F3766E1D58388B137C7C2A920797DD4157CD823FA597447627009A
E64A758320AC65513B3D4B0F757008B6FB506B0231114A3E5673BC1C22A00A03
EEAF96BFD849C4EDB9EA18273257E27877CA428C7C71FCE5AAF915AB48BE911F
483064B47FCD855A8966B52C3A19A15CB67C3D3C14C0F06528F9391CB4A43666
D0E8A4C13B56002A2DD5A5FE0134C4BB9A4D361FCB02C3BF7AA116B5539455B4
D778F3CF4A6AB36D20EF6457685570194FFF3E82C7FBDB6F4DD8BC56EF152CEF
5EB66D79C82CEBC1108C19CDE0D7F03EAF49BE166BA3DB1BF765EF0305CF3243
403EC4C62D25B1ED563C248ECE78A971F4AC9975138B38579FE7E7B9A29DF26B
7CCBDC5680292E5A05F03A121970E8F1633C58C6C2778DB1347BC022D0E2FA10
D86AB5C6B4B481ADE2A8040297C80939840A16E3A746BF5FE620C9DB575D318F
025FC523B81E16B50581C1E023B5E02F4BDAE14C5B2C6B6ADAB369C4ADA9783B
28C54C4E177CEFE4C58D836493698C04C678D81AF9A46AD130B06112C4CC70E3
B233AF175A96EB0567959BB1E236626AAEBB939F70CB09CA40A21CE46D1EE38D
60996CDC72A0FBC24A7050ED3E7841D6F2A77C4632EAAFA8525DA026DC1EA8EF
D2C30BB9D744B202965DC3D620232885045EFCA1034DAF2DB898D8A086290E45
115C8DE9877BD43699D908CC3F1B8384E661A40036AF14D1CB2B4066039D0F87
5F6F3C8137FD175C468DBB7DD83111643F79DDBDB350A2A18E0FD974135FB2AB
53B5B4648FDE13AC7920214B34B58A549D32519C5D9178BEF49F6185CED1820B
C8C8BAD838907339BF36DBDB4FC0910DE4D3C078FC13D552DD8708B0DBDDB463
75F63FCF1F58F13400D2BFB8296CAC6F1B2A465EC90AA64C6BD5C4A03C09921D
3F83DAD86DAD66D3EC9333D1DE46382E841BBF95A07528C8343292E178983EAD
8652B985D89C0E713F556814E051C6CEFE7E83C2F379B88C0A1693BB33D44602
2A4F9B9A418954A645AA0F6D4DA8F880E5C6524D974981091CF787CE9CE51D48
4F7E4976C4BA1C110F70D776BB12E71B9D621511E0FDB61D6BE0D43D699D9DD7
408F16BA69DD6FEAAD3CB6807D13251534DE1386509692C2E2161370940BA53D
FA02A07351BCD8C95F89E653EA5D589F257F3B177FCD274F8F6B6D7AD5E16EC1
039ED26273E79E39FF03C8DA1A4DF6C8B7B0EA9E611C05709D9CCE9EE283F4DF
B79975EAD0E341B382DE4540CE5E663A6F3DE864CFD51444738A0D95D1808AE4
ACAAC618F3F16299CA96CDD55426B07E0D6E591ABD90B651E24464F80309EA07
DD04E74AC5D873DD414B29138A74919652BDD053FFE1204E7588D287FEE615C0
61EB1B3984BAE5B41853C84DAB15C962534AC5130E87700E6D1522A7972805C6
C1CD07055847BE61B9B904F2F2DB5537B2139A0D8791BB855BBF53783482EB6F
8264278EE8DEEC7FC662CE4F3167F38C3D106535534A9ACD6582F3273B6FCE97
86BCC3586CA953EF480D4620739410A5F61035B90981181192DC54032651E305
8576517BAE6EAB9429FD359809D95A11B3A26B88CE0DF9B0779B4235F7B5C9D2
A113A8B6A59568307D70C25A090D4AEC9A71563EDA990CE3481E7E574106E677
1F4A5F8ADA324165EFB0EF200E16BA13E4A36F92147E38CD271718777AE53034
5C43C74E88A8A1E527B0E77BAE62868382DA75973AEBB7236B120EF5502844E7
50853317185E95A7C250D459945ACDCC8DA70D5339C919D9954FE91E079DCFEA
12E1BE6D51D46599D8C2DDFE94A2105FC2D898DF5FA1E5A94867E63CC03ED3A5
C17C70BBC9515DBB6667A7B772523155BB827311033820B0380F65B3AA4F3E83
7B5A92ECB4DD4B8C7DBE9B8A3BD00614A35B7BD9E4187F68C8AF448E45B09267
39D960D4920A692FD967358CAFF45613A1812AE6DB4A62146B0400F245DFF3D8
C391A5FDDFA9D9A4100198251715AE46CBCC7DF2F9BE6691B79CE6967EBEA655
522246AA9E837F39F1999BC08418A54A12B62049509032903840182F35ECB419
561B2C36D43E3102CEC57B8A58E46532BC2C3F5CE609519BAE4A852A3DB40FFC
B37C172B66792ADA50A6FA842125BB44C446B18804A42B5407B67605F58001E8
F77D69BF9D01BA23B36EE11CFB793B195BD4BB9ECC11DFC3B04B9EB22FAD6B16
E17D0AFC5974B91E196B6DF5324DFDD018BC44188E63C0A55D28789356455621
75EDC8F14CA5E94176E82B20CEF9DF0D0AF356487ABF0B563299A7E86BD65251
28EA76A0D7779A5031AB41EA07059ECC2C13AFAFA8AEE419D43C4429E93D9208
05E96332290E522C15C1AE0CEEB687AEAF0618554EEF9AFB7A50AB184C4D6646
7BE1397F82EB7A85DFF7FEF08D762E63E465FD2B17BD2BED7CFE5F7B103347F7
19C0848A1EA0EC028B2A574578CF69EB3451FA40ED22C16F1B8DFE03EDD38AD6
A57D3251B528C31379673FB1529A9AF9791A4C424A2874C0D00EF8F4EF7C972C
1D2FA4728E5977AA2B693A1D4A0EBCAFEDF511A461E4A4865CA1CA04C0E671E6
57EDD876C2E70E8841364D9C8E8A7E042A23833D25AC141FF1F6B705CA7C0B29
FD60C8D9E163ADE6A55284AD768E7F1F0F0D46CA4E95316497F6FC73DB94CB0B
79AE05AB671E84B03B82D688E3D95DEC15C86DD8D10F5DA77AFEF7EBE3185845
084731E3A0890C4632D8F9D8196B6AD43E15F3322E36FEFA77D26C34ED3323DA
25776CB7B9A33B04D6AC47E4501C0E3AB6F8F05E218AE28AFCCCDE87BF0D1726
0A4BCED8D3532340A46A1177A2269AE20BF8CBFD7E517982F9CF0D4F9458F982
8A664B3986F774A8E53E8EE1BE623EDD5DAC3727821536472D2381DEA09B8BB1
F73E691434A50D33DCA5593B6AB680AE19B2231D557EA18780968331DEEC1ACB
0FB8A3AF9DC4FED3912AD23C76C97F952DC8AE60D2EC08F0C85E2D35E33B794F
D8B021734F471C65A0A2FFEE1BDED30D4765A1F0230730155D0AAA52A966CCC0
0D3DDEB150C344328CD04AD0D8083E0BE447672358DB7D34B50BF2230C7ECF54
90C1D4AAC519D0313E2B371F7131209281701D60001C69A1FFF5732BC1E0076B
11804BCE07854589C4BE84B31A81F2784FE0D5F242F5ED8508E1CF87641178AF
DAADDBCB87A95E0EB45F47522BD93AD903B2EEC8D3C188F08FF2AA1C7D960281
98DFD7488D907A49A5C52892ED6171B0E25FC76AE99EAE915AE520DF86C1A46B
EDA4208F9A039FC53E8D60AA215BE167083176AA2E3A947DC40E7CDE4E907567
9A5CFCEDF130FBD2BD67D4FAA2F3929DFE0F24C3A0EE301101D63EE838986E89
EC302D38D6AF6612BB83188C479E48F8091E557FCC0849DED89E335BF17474BA
AE04CA1905B3762624A568CC911A30F214ECB87D0193BA0B6F67302D4801A736
D187122C5D1112E84725B12C2B93AF43FAABC38C498A1E33FD5EDC497CE81BA4
91CCE1B2F223FF6AA3E2CE0B28C3575F8374B2AF87E99A2DADA3728C9E3E0893
C478B3F7443D9A332101D6E98E963E32C1C000CA13E1A1CF2080943CA932CF05
5E41018138EB66FB67C22587FC14898051C4FDE207F018664693954B4833509E
1FD137D8B823953AA248937D59F2D6177CF5F25AAB7D45791021199BE22D8994
0BD35FDE81EB8BAC342210D5B0ED5550C4B54109A1B5D3696116BEF7A56B29B7
FA10CA7213829FCEAC430A54AAB1C77B24734D53B271D6B57F53D5F6B85D40FA
4E5913528BA06352384BB5EDE175FC7E481EF74C90360755DFBF7D9F9FAB94F4
AB4F1298FFDD276633AE882A540B806AB247982B2064115FCC2C0B048E62B50B
F64A9A860C3B953BA836E3E7313AE910CF60A7C2E6C17347900DDC598E1A8BC2
5C0F1007C1522522D8B549791B596E5804B7F90577F737DE057751F66170EB54
C1D730D4C7599D652F2DFC322AA7F265EEDEFA3B5BA9987C43E34B7A21AAFDEB
8EEF347B1DE9CD834797E610DB536D76C9184F8DAC563B375A47797E0F0C40C1
59093A6C73919A888BBD53BF4899A3D67428A633DF53752834D0B8998C31887D
0A4C231FE009050FC2D29D0327D95FE84E9776C18A1366EC96004C09C4DB5790
7457AB1FFE65DCCA47FBB39347DBC337F777DBEBAF006462A565364BD1C64F9C
1F11103391785005ACFA3D838E3DCAE83730B4ADC061318FB738328A4FA165EF
C4B59C3BBD5111001519A846BB83001640943EB2E9CF8202D34672B6E55B3C54
5DC01F32A7E2A199E9F45B099DD8A7DEBE298B7883E0DA25554FC82FE4E94B90
0DFAB7D97CC0F998B96AB3E3E182E29B819FD861E52B04E00AA389893E477F54
3893AC88C956283FF7B7628DEDC302E0E830C90E221969257543026AEDC02C1C
B17CAF8D1D1E869F0A3EDA5BBEBF135FBDDE4099314E3452D1C3006B69E562A1
62AE5CFF0CDDA4763AAFF2692126B4FADC3C4BFD139E015E0D1D3591BE5930C3
56E6B8C1A4F0AB29B1EAA43FE53F100DE329F2992ED2DD8BE4396C900A787F72
8B417168EE9C32721CF77B0BB8F785CB0FDA4BC3E04966334402F76388AD6AB9
DB661A04037C111998C73DD8F3EDCF0B1F51A01691E505DA03AB3799AC2758F5
630E00CE29C4EFA9548CB450E12BC8B4BEE5E7F224860A47751DFC2986440D71
6CFD5D2E9A57D84846762E7C7940B91077B03D7B7109D7E208791B387A55FE59
88405433B58091194908791602C3A6572740D8E84B479A9CA5FDB4685C29D7AB
3515C06C70450C9B1085CA881F4162D5EBF5239C62338F7EB882C2D4CE53D9F7
ED759091062E1DDCABCE4371C20311C018E4CB5C55AD278CA8D5550ED65F03AD
74393AB3183B6CFF11BA62324EC334B969B3FFBA35EDADA4AA78CB9659AF92E9
606476F8F8475D52E2350677895DC6E3EE8EBFA01DAED85125E5FAEE33B56AF2
6E3552AF8A5CD10A347EC239B465BE0416FE1EE4BDA71618D70740BBB31824F9
36E80F0F7F0D395E15943D0A90F2B930C579EDF743F2C4307989BBE10C6B0BF0
A640F2DAAC77D9AE654BD6E4359A140F0845EA7DE0DB3C13B8C18440DA54557D
A4B62DD372DB1D4D77D17EAA35BD7DEF5A54D050720CEB18CF86A3D98D4D0B88
323556BC8C21388AA2B223E95401B4A1A3DC32DE58928B59A875DAD61C76F5CD
D4EC5A431AE3F97BEFD291A0DBA52EDFD3A216173C3E69F47405B956E7F91E0B
F038CFAC465E3F5A9BAD0ED4572921C8A758DCFF0990ACDAAFB55D94C91EF75C
46CD9EF07F9D957AB2A2DDDF1E29A315D0C14B6EBF8A741D6182E270D23A9037
3A232F85471EF05D091824EA3E015C7CA599298F00B4BE7E8128F94782928B73
E32595B2F9E156D2B163144E113AC272E689267F146C347548D2DC4D9FC1AB57
55892A6126B8BC8E30EC6D6E505DB3163C5E135D18B4693417BC7BCBA9B9B3CA
C716FD7A8B2F7B9B62EE1105F37A99A308E7DA80A3018D0AAEC613DECC7E8ECD
80C062933B377DAD8F4CF2248363BDC157691AD5BAB068DFDEA684B3FBB7DF2A
7921D5760334AA91B723A3FA7790B2A93DF324554A3E1026FFFB8F58BEB06237
B3DB1ACF955AA10F59FA62C5DA5A3BC1FA0DFAAB319D080F4B3138D713933F67
669ABC9EF16FDF69E65809B7A1A509DCA9FE68F412B44A1CEB9470BDE4DBF293
6E063A86DF51F88A4A14DB003C5D21197F835B183FDC1269D70A0CDE6B62EFCA
1E621ED2A65D66DFDB2098887BC845E63C35E4185C378E7C7961340E39855117
7A7D13B2A9214A70E461A239212F05BA154584A312D0DC1C199035B90E8F7447
DE1DBB43878E3EF52717811B1078CDB36CFA51989CA4A1A08266ECB80F3956DF
84FA5B7F11E4344AB9FD5320046666AD30B65C11C377B8756144A925E5C17D7B
3C0A3FA070003AAB80E1A3A0DAEB44ED7329F584047744C14EDA3CF5F68629AA
8BD94DC0BFDA6BA503A1C87CE054A286AE91352C3989F94CD805A3644644F435
247DB0D87B92E5191324DAFB379AF908C3087047829757FE0A24012013B8858D
1DBACD7A3D7D91ECD8B020F33738785C500FB51C2376EEA4F7AE7586A60DBB86
582579C4C79A9F32E36574038573238C2D7CED0101822EE40F52E642A0412317
0170AB8B00A902CA5CE3E32555861A3A0E0A74460867A54FFE3B3BAF15A20C16
AFDC9F57BA24FC6BBEB321B5F58743BDB742E6F57114538466F9D6CD8C0AF002
80FA810D5097940C06BCB92A997FB864387D2A03B775A2016FCE92D0D818F7A8
32CBC217D906BD7F73311D38135CDF7857436F8D3358B525C6CDC4D42822E3D7
DF98122039354F1C28F54D6E74E97AB7E412C86CCEA9E1212FA82C590D12F190
D59689CCE17FD6ACF2BB3BEBAF10FDD4B4F646EF9964D7550EB2803D2029D240
38251FED60272A584DA46767545505FEC85AC96C3665FBF0BE9D277B1F1AB440
84D4C00635E70B1D8CAA970C4EA6F91F259E6C7468ED4CF408AD2EAB9ED12076
3E4669F0AF1818DFF9151100B0769B9A4C77801AD86690279FC8F52C9F969EE7
F97917F97ED9AA8FC313D23DED8972C18C39512A0C1715824135D36F379579BB
0A74BE8777C2BA99106CC7030427235CC430364A15C756152864129963925DF5
778E7BD922C9AD0144E5EC02D7AE8927F826AAB6848B6FE78D3B7F2C58B181FE
4AE0F5ADA908A40BDEADB8F544DE7116FBEAA9B05AF7C10731B799FF43DDA214
D11E1F0F4B11C51E91F57A29F383AADDD99597B0A16C3FDB2EE4AD6B9F764E26
8D0F9743AC8A28C5912CD320ED956A8F73065E245A4C48F620CFB17DF00BE31C
2FC84AACFDA83AF63BCD4FF1D100E6159F828738D929C43CD22281CB62D090FD
96C549F9880F9D5EDB33EFB6805F6E2923C510F4ABC28CD1F6A2E3188556580B
1467C12FF29DBD7F4E9001D200104F5D0FC029CAE4D0BD7D6E3495E91EC7A242
83670C95C71B56654DC09523D9DA10BF7753B5583F089317341FC1CB3185F9C1
9AD29034A7AEFC933B0B913A11481FF3F7E0CB583C20251E09FC1DF100B1971D
91E4F7EF81DAAE6FB2481D41A6FCD1E20CAC60260CB65DA2AB8735FD70056610
D3A758647CCD8D3894FFA362D83933ACA7B132E8B5D4C81DC574E9A6B14B74D7
9E86A28DDCE2F760AE20B110F0CFC80A39FD875397529E09FBF043C6F0D85248
2017635E396DBC2FC671AAC158C34231D67F79680F3EED1BFB0C8FCEFAB8E914
F2533A833E055B7F2FF0FB1EE5DC4F08B3DD34C32F0AE7D426D72DA9A49B57B5
2D77B1EA0DD008436130DE01EC2CD56D6FBFE6D5431809F175C7CA16EE35A7D1
5AB9C500F19F741A536F1E13985C4A856731D2B3347F51E8244362711B583A9C
4AF81DC841E63D974CB610AFC506793FA88EE3DB77886BC4DE23C0D85729F2CC
7E5E69F68C0169CD1815743B9B45015E9EC2EBA9E58D9384C2D5F1FBAA4CA156
A7A1E2B20C2D71519A4D46B7DB0158E372A4E560B9A1942E42C66657C77ECCAE
82BC1EBF104B6B6BF1C65D8DA73DF5B07710021D6DAAB95478784922B5D45D09
1D903DCF0C457D3D4AD193D61D1EB12ACA03EBD8E354E786B335586279A264AB
6ED7544438857A0768969D048128AD890A643C8AFFA53FDE72F11E6B590D156B
618B7E28E59040977D489AFFDCADC6121DB5B97C465EE008B3D2CCCB780DB5EB
8830924EDB243524E185E89B5361BDB9CAE9F3B4147B50D8302E323AD14B0B8D
F0DFFD6689C0BDF701F67FB902A57633911195978E5A881AA7A21A63786F7AF0
9373C8DAD4E79E0E70D90CF2F74BDFF74A523563F5EA326D57911A738874B1FD
01553A248CA65BB4EFD5865774BA49A06D597D3E2EE3135486D49FD91DB80F57
CE2D4677AA83EB093F5E47ECE9D5F7FC87FB9EA372B96ECAE88DF621AC211B5F
1E7C994D1D49ECEC34B39B997ED886D2E2558FB92F5C4A7324C4DC8C7FB2F7C2
2433634B804E924E3DF4AA3478393815CAAEDF2B35D00D78A2266549A201EED8
B4E96B5C8BB835B7F672C5A03F08DDC2FECC87464A5E3363C1C6977AFBC3EA80
75D441D2B4BD76CED86E1105A8F9721B7EC19660942B704BC4D4D239A6787F6A
A9222919F90BC5D579A47B6B8D50ED8DBD2C73CC1294DDF2A256A7A9C5DAF241
882C40F87111539B2E5EE447AA9D722384D6CA53F405FDFEC62628AEBD5028BB
8C6A40326912934B8893A0B3EC5DC8CE6E7A12FAF69318771318F23BF8524138
ED2D6432279CEEBCD53A77D471B5BF64D82BEE01A0492F8D350644A6B823AFEB
74E57372DE2F816AB0CA2312671847B79DF589B2B304A0B9EC6E5B8F0FE7A730
EEC27D18B1F82903089FD4926D178F4F570C6DBE511A20870E025A2D2239FC61
9AF24E634A3E7B474ADBBCD001F5070F58DC99156B45DFD54AE32C2948242A15
432BB2B94AE124CFEB543DDF47C71C20FBB6C8E55DB7F537DD5986D8BD853C2C
A07170F0C02A9CDBA960A1E70DE5A22C9AD379E5BC58A0CB4AF6A925ED1B58D6
58AEF260ECADD24CB5F752B64A374AD1E9238056D59E063A4E0B534A10214171
DAA06344927298977342329EE9587986AEBDAF2B99961F3C274444FD6D2F06CC
73C49EF5971985ABDFE87669FB816C95718DF21548CAD72710751EFE17DE1BBB
D2B931CF04E09CF4207B1A3440DA1D9A10C81F09A349AFB0F9AB36D1BE77DFC8
A0D066EB0C6E8A51DF3738EE77001753FBE7DF7F6855E1C70E553FE1CD712EC3
B46EE2C00C1A2612447142FD370303C73DBC8637019825227FD74DBAAA886235
C2E578DDCACEEBD9D9EF52194C052003F4E002F576583BF8FFB0B5E17013394B
04269AC68CF9FC39A85E6AF3A1B9665CC4D5B25FA514BAB9F71403F06D027C06
867FAAFD6DB60B0E3E413F07B260E087F2D12F5FF057712416B660717352CF87
D3251705AB1EE33D381A2D3C59590F1661146C767AF8926606394061F5FBD1F8
3A790C285B2322993E388CC806C0F2F511647B6134338F078668182AB4399764
B328E0BA7BE876B8054B4BC5728D086800286C69375E9E0BB703CC1305358DD7
6EBF1DCBC3EC9FC94986C9D4322F38FBB0DA256678EE073EE396796B773FFBAA
3F1C96B595A0D6644DB1AA8489002DD280D695BA2685278FDFD792BF0141BE34
A5BD5A97976027570D7BE10EA789CABBD4CD13C76FCA1D7B41BD7045CF7C5FDA
6A6ED60670F5E195C687B4CD7D7654FD0E33DC4C4B2D18B87412C390E66EFCD7
76E79FF3BAC133744A6C7CA347C3D712F5D2907E538E2B08B52FB4A52CF4C5C3
0FF7F91B0A41EBD0CC6D71A274FB5A06C655C3B5B89C4D5AEBA4EA84AF6633AF
A7D7D629C92D79316B851E6CF90C35C6DCAC6E8BDA2F5CA118838379257FAC5D
157697206810F876C2AFAE055E1B02DD28B11690F9D20A3509E12A599CD9C54A
1070224CC1CEDC159BBA768B8B5013F9E3A38FE462C7C96A39110FCA4FBDCEEA
651F745346D48CFD2E30464D95A6B4014617474B194DF1D96A3CC6E8EA470B16
E471838B38EDD97EE3986FCECF42CCF2D143D3A64CCCF447194AF9A96707EC42
AC1579F604A5E1402F3A2CDC1FD54365CCCC283206DF8E3737823723E6CB15BF
CFDAF0252ECC824C299C77B81DF091F6248146019FD4F6D38C59FF507E3BA0D0
F7DDBE4E9C90DE5196C3A1653390D9457249E2C400076065CE8F974C1646F45E
A63BA74E227856DE286D2DEC2506040D6E58D5FE5159FDB4D0BC932827C6787E
B8B9099598CD5B87E7C5062822514634A60F897480AED626A6DA279683BA62A5
132CF5D986181BE5B75F82A340F08D9A0AEF587896149B48DE9F8AB9EAE4AE99
FED66EDF62805ECFFD0C835430386DFA45DCF779C8E43AFBED694AC49F20E63B
A42E34DCE9E43AB1C1A3C4079939C7362C71D4C928B0C6004C7C4E4C25A367BC
43D0D37F7FA93FD9319B7377CA8002B1E40D2FE1B2AD2C29A90E509F0AFA0B8E
61D5050074942432EB76229F403F3395C2E4659A5B7138997880A10621825C10
0C5F3E2F58EED855647164ABFE752C31B06453A22F1745A6DD4AE3F8B4010AEB
30A68C966D355AF05F1D63C002DE9C5B6A9ED2534924D289816E7EF0A41439A8
EA5E8F3C024046DCF0A537C6A3A9CE03FD8D793681D57369498A2F49E53A9E8A
51BCF566E490148952DB04D7E0E10AC009677247434BD811EEBB93A904B0B803
F40050340DF54F0318892F4FCA544E32FAE418E1E34EDDC0543661E840367DE5
9E2016FEE51F244D4E90C04B7AC801ABDE164C28B2EA486656757CB27C6742C1
3EC364192706DC662E3164504F60BF3F0ED5B8BCDFB93887FD5C807ECB000194
366EDFA3D2C9A9FA6130400827F44C540FBF28D5D48C576289F26769AF4C084A
C34FBD179B2BF2CFEF1969D0645E1FAB9FBBE250F5A6E1679DC45CA1DF23A127
323C69DDC61DC480509A9C6F1BAC248819E9269ECD6F61DCFD95208300350950
9940ED93401B60A04CEDBFCA29FB613A454E2AC1D8C74D5D4E3A1D592575EB92
FF7A98BA171655F7940D9DB532307E3EAD66D1E0A78A976D436AC70C8FF2F328
91242C70535DA4C6E0B513008C2AED8CB9A8A11A7978E061EAD5C13967E12D1B
29BBB98764AB55B6790DED0B87A8D3282CE989801CFEDF7B160C755A72E4CFB7
DFE4BD3DDF2E81CB2B89C25231EE8ADC93B91AFE312B2A3462006F9B8EE5C383
F7061684CB2CBAC7CDF6A6A089FA6AEDDD0D891DF1D61FC726DA12BAE1DE768D
FF8B223B009A9D59F5A474C9B7F279032A8129E3B779D23B5173F30269F057F4
632CD06419A2DBAC6DFFA20748F95FDD5DDC421277859BD1A8CA89838661043E
247060ABAD9CF7DF83939586AC66F972E7911FFAA6E72FF931CE39DD189C2C7C
646311804DB59FE81CFF5C1E02F9210EEBA7F02F348986914E5A5D8A913192D9
8A89F2F4B79FA08E4DE5348105F28A639DAAADD16B0CD861C3A10468BEF26D31
11714FC2E6D68F83BF1E4AF89319F6B01E553C70D4ECFEAC12A0FF0E8158881C
1B6FACA00D25F219AFC69181F22111F26842EE7B0ECBFB6328182CFF16061189
94E1E623C7BC0B290D5F888E5F193FCFDC680F8FB4058718B1886A1933FE2995
809D1C92B73CB3594EBFB59EDB716ED4C6F2052A01D539F794C2C665530588BB
B50F6DA46B42D1C87A35B1FCC8284864BECEA89FA3C25702AB52B2B6071D6298
0D5E0032677A49E8F11F39CE36CCBEF665CCBE5511E43A09C55D0C8E98FCC861
CBB2860F032E844EAC0EB5D4299348FF9E3A7ECB9926CF109616F01A7AD6F032
0C79FCA8C95425588FE0660C6582D8339DA21396A88CA22093FD8B637767D5D0
EACC1B7D2E3BA6D22097B49A85B780647C6915744B965B661D52F06B966BC647
8E8DA62112BCD897F2F99F0BC192E27A7E4C5CA230261ABB01B425101E28D2ED
9046D9677AFDA9C0AC6514E6BE7E5FF8F98A30915CC9919F66568AD1BBF06EFF
229E7ED70D0C6439494DA10A45109C60B7C733688F8E2C75D7460CE1A7CE2B52
86FB20C30BB0AD2F2BD72C65531C1534A0F2B3ED1D6D5E001B17A8D8E8990E03
DA88BC1A4EA12E97B7D0BF82E9BD7115A57601E7B4D6FE33CBFBEB8307FAD754
50D96AF11EE8A26983F914841830D52E9EE1962B89182B2640ED7F74F1DFF505
26CCCDD25604170F3094684C591BAE23EA00036D633EE614DE9FD20E790BC6C3
170A81A609661A4B7B375D618CC0790CDBDCFABD86F369229EDD3CBCD8FB511B
045CE78B2DC4F21FE392EF7DBF5FA49B19A3ACD2CB54C486B27D482173260440
A478B5161C638AFAD2A0B7E3ECC22D3638CEAF88B3FF13A194A051E5D5A45E10
70B9EEDF4FB243CA4AB8950BA9DB36B5EAEBB16F7B5FCC2A6A7684F30988657C
17162BA1092BF6067356E2405F9AE6B78B5666C68F9C66A6F92CAFF782286FFB
3D645E11146BE7A828AEB11F3AAD8E24A681747E461EA351DA0330BB376A0F23
FA7BC4FD7FF093A50E84B6D59419E45B7ED9261170FA4B54749B1A68B02DD619
0462F89D977664FAE65173E2EED9C3AE9E45B73049DCF076562744B8472A5698
92C9F818A3E52BA69810B21E6EB97CAE97FC334E54BF4FB344BA8999EB9E73EB
14E33B86270BCA57A9E37CE1ABA8AFB9D48592234D7A04485E358879C011FAD0
DF6E67497802DBB58C663109E3161F13F92A306D1A7DD500EBE02AC27CE4940D
0EDF6C5945454BD7A3A15CD42ADC1E5F3C612DB939AE54B175E3DA8C1C301B33
30041CC55365455748763E30DABF224CC7621AC57A11382222CEDA70E7A6A218
1A94658FF8F3BE527AB6F527DDF7FDF5DC63B37D88E3CDC050E3F02A9636E83C
D6440E2DD3B629D6D5D55ABCCCEC192314CE36556918326B107411F289B251FF
3A5923D094E064743918886D5824FA596A605A25636E7EF5610498D05B0062B5
A034C051ADF303EE821EF856D8353C757948F1BB2C43155A4A4FAF0C8890EB80
A342DB0F962E02F507FB6A8D80AAA943677452F9260264A8916A03D58D2EE6E4
1A54CA6A7FD695BC6C755CB0BFDD497025D35BE2CBB73D1F3F24D4B80E1842D1
048D7C61826B5D9143475ABC572EC23EA439077AEB525076D292AA7B46821F4D
4790AF19C25D1537124B2472FDE7294AD596FB88896D220B5CE7A78BADBFE13C
CA6056854ED451604831C239AA2FEE63C0385F48D44D8B649A82D7BD5B9C3C34
B763902E5F235BC1B5D4FDA79E4A53D9985F7493E0C044EC3B1F9F297FD96502
91D816D3012B1C1CDC21A05F709602EDFF6DD1C6D9D2A5A0FF2859F1EA8FE4E4
D6579BA219D2AB73D4ED4E4B6B621CAA684A37D537107BFC2A6A91927A1A6AD5
FB517281E1F4BBC8F11C94BA4DCA76BAC5B918BF84885F1F8D97B985F772CA0B
626D0A5CB1189A104506712A341F9F83D8F781CCFC78912C4570DEC81E9643CC
ED3A47A0E28948C79FAACACB8EF1B36F0D163C097596A6AA48EACE37F4A285E1
93DC4B9841DA2FD4AC6DD16B900957ABA514552A6038DEB928D5CB1356BED0AF
86E17BA68ED92E75ACFF8427845191B458CEA199A4925A89F065DC9EAD3064EF
248077C6D269AF8F10D46DEDD807C097AC3E191380516F28979BA5E0313BE509
548C2A4EB333ED33E3318AA76D53D642D968C4FB791613283BF0B4C37438FC29
ED2FC51490DBA05D1C2F319C4732C4F7B5EEEBBC3C5948FE835DB363958AF270
60AE12FC7E2C5E04FB93CB4773347B8B41B2BE0FD50AD651C7BFF6E144E558EF
38BE393FD713AA16CD63CA3DA3C83480BEAD644C9DF5252FD5413DD8DC69C640
A3180E795E06D01FA7EF11D3FB185E41F8C63625AA59E4237AE74EC9B2E8D941
E01FA909901045E08A2F422F448E45B1E120A42B52C4A5085F7E02807AE469D3
360A8F7C40BA7A0349B19A9DD41A997A38B52EDDAEFD14FB9E03BD6D068B59DB
BC842D7A09276646FEF58C41C462C8DCE7F8B34881D56D9DF932A9FDA2884B6C
BA4F31098A1F07EBFFCAAFD14D29EDCDC29FC8019641CA2EB7F34001886623EB
916B2DBEC3DE259982D243E51075E77948F25433049D86F4ECA14858BA47D921
5B535BCC84DEC3C90A946CD000643C2B43CFDC96024AEFC675CAF26631A3F944
31F77442A586279902B6AA721A1171BC93F001A9B8FBB3E88E5FB5775F4A5698
780E4A60BEC4D47ED6947610216EBEBC250B04CA414856102AE2D39991A7BF50
6EBA1EFE1553A66E2D7D8115A47871F3F917E72CA2DE5DFE9903DF4FD42468EE
C03C21EACA200ABCE49E3489D5DBDB5E98DD0A4A6F2FE380E3FEFF85645C6821
15EC1172D41E67A5DA9DED9BE5B9AC4C1D3B5EE88333BD868287D5CABB44D78E
4019486371C6A39911627AAA02797E0DED5779B8511094B7D2DB2C726BCBBC4A
1228F0783C0456B6483CC69956DDBB6BE99EE40B8779ABCE7385A3DFD849C4DB
6C52347EE96DD833E9E26BF874DDD7ECA6EFE570CD7E489E12FE6A147E95FBFD
68D7134C8A3DDA4B7C4BB0266FE1C311EA375F5F2FE4021D13039F8FC658F873
021D5A353EC13FBF55D9EDB640EBF90E804061A72C02DBE841DFA3B1458EA90D
6868C52C24CF826AB13A07FAAFDDA3618EC3DD40C00813FFCD7E4D12F8F3C1CA
298E06C14A208695C9B1FB273F3F63A0E77220CED0385C2D8E694C9547E00E6B
7C02DA02C83C66893B84B7717102AB9395339D40CC3CCE3FBDD1B892BB9A8A95
BF91BCDC5B575258FE3E64FA86132CC71D6723399821D5EB099426CA6EBF577F
6C2E033240C86703986AAC3295E8ABA5C6D561AAA8181F8B37AC07261211B25F
7FE49AC54F43D30F95D31F182B98E70345724BE626863F5B5D29E8826A03FE1F
78C3589CBB259A2CDA4F518EBF078609547DB8B139A8E5FDBE69B21D8F023B2C
DB87540EB2A1C6E904770BC34C9A8E07AAF2D7F7A790A052551E0DAF7DD0CEED
BDF0333C56054695ACA0A7B73630F56FA5E62F8322964AB094A6659782CED96F
EBEB8AE2EC7D8C49E502DD8C3DAD462B99B293A16ED4D0F2EE0592822AC979C9
9FB855C523B22815888B88B0F6E4094A4476359D4EEC1732B99005189120DD0D
6C1F7200D24386D8E7AD99D78414780301A8FC9F10E174DD5B9691ACC87FA440
44CF1E14A0AFF77146DAAC7746D29DF80C14235BE8C791368A856350FAA77C4C
6D19386EBF362CF10BD6584367E8FA7C6A8DFEF2940D9026CDE3A97D5EF585B4
F218A117EA7A59AE326D3001A30B851C101B97942032AF801C7F9F8C6C1BB3D5
D9A85A491C54D24C12BA7AA3566621315E31B3D1D9CD3ADEAF2B3B4253A05170
6F7C5C98E4FE376CBD22D89F86B79029A69B73507759215E37025FB008F9CF67
962825F8E2C3189A543A23BEAD65DF647984D380AC861A17DAB09B0E6DA9CC22
E545A097878E66FDE710A442C87135891DB1F79A70E3BBD2BB3F17483E725992
D7C2C66A2E247301C32A6061047F21BA8F8F632D0852813192250F850F7E77D7
49839E907C5F44B31717F8DFE2BFDF19BF0BDCA7EB448523D42559662D17BB6D
0C0BD5999FC6FA31C813026C00A44BD9587ABEA3DB48360C1BE63B99D217F202
E700D98E0A785C0CE1248C484B9F669A430BF288997DED1119A107F575967934
AE3267BF358D127ECA4FF4B76F51736C06F18A8BB6E30EEE955EA77C09FBE80D
E8BE4A370E4FD2ED2FEFC52C2123CA8D494D03C5D2C27093E81BAEF27F8B7F35
ACF4E1396EFD779F74785393D74CC39FEF9774A4D83C6C4086912C12876AA129
EFB5148A7D74BA9FBC0C1F3D992A701FEEDB05D15B47D82BEF7482A4D6B1D586
DB711183064C942558FEE31E55E6719AB2A40C43C3804C4F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (Assignment1.dvi)
@start /Fa 193[65 62[{}1 83.022 /CMMI10 rf /Fb 240[34
15[{}1 58.1154 /CMSY7 rf /Fc 133[50 50 50 50 50 50 50
50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50
50 10[50 2[50 50 2[50 50 1[50 2[50 3[50 1[50 1[50 3[50
2[50 1[50 50 50 50 50 50 50 50 50 50 50 50 50 9[50 34[{
 TeXBase1Encoding ReEncodeFont }52 83.022 /NimbusMonL-Regu
rf /Fd 134[42 1[60 1[46 28 32 37 1[46 42 46 69 23 46
1[23 46 42 28 37 46 37 46 42 9[83 1[60 3[65 3[78 55 3[65
1[51 55 60 60 1[60 1[42 17[28 45[{ TeXBase1Encoding ReEncodeFont }34
83.022 /NimbusRomNo9L-Medi rf /Fe 107[37 25[37 42 42
60 42 42 23 32 28 42 42 42 42 65 23 42 23 23 42 42 28
37 42 37 42 37 9[78 60 60 51 46 55 60 46 60 60 74 51
60 1[28 60 60 46 51 60 55 55 60 6[23 42 42 42 42 42 42
42 42 42 42 23 21 28 21 2[28 28 28 36[46 2[{
 TeXBase1Encoding ReEncodeFont }68 83.022 /NimbusRomNo9L-Regu
rf /Ff 166[48 3[48 41 37 44 2[48 48 59 41 48 1[22 1[48
1[41 1[44 67[{ TeXBase1Encoding ReEncodeFont }14 66.4176
/NimbusRomNo9L-Regu rf /Fg 203[29 29 29 29 49[{
 TeXBase1Encoding ReEncodeFont }4 58.1154 /NimbusRomNo9L-Regu
rf /Fh 134[37 1[54 37 37 21 29 25 37 37 37 37 58 21 37
1[21 37 37 25 33 37 33 1[33 11[54 46 42 3[54 5[25 1[54
3[50 1[54 9[37 1[37 37 1[37 37 37 1[19 25 19 40[42 3[{
 TeXBase1Encoding ReEncodeFont }40 74.7198 /NimbusRomNo9L-Regu
rf /Fi 139[25 29 33 14[33 42 37 31[54 65[{
 TeXBase1Encoding ReEncodeFont }7 74.7198 /NimbusRomNo9L-Medi
rf /Fj 138[92 55 65 1[92 2[92 138 3[46 1[83 1[74 92 74
1[83 23[65 1[129 5[120 6[55 58[{ TeXBase1Encoding ReEncodeFont }16
166.044 /NimbusRomNo9L-Medi rf /Fk 166[67 4[57 52 62
1[52 1[67 83 3[31 1[67 1[57 3[67 65[{ TeXBase1Encoding ReEncodeFont }11
92.9846 /NimbusRomNo9L-Regu rf /Fl 133[52 2[84 1[58 2[39
1[58 58 58 1[32 2[32 58 2[52 58 52 1[52 13[65 3[84 5[39
1[84 2[84 78 78 7[32 2[58 1[58 58 1[58 58 58 2[39 45[{
 TeXBase1Encoding ReEncodeFont }29 116.231 /NimbusRomNo9L-Regu
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 0 1
TeXDict begin 0 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (CS 311 Project 1: UNIX File I/O)/Subject
(CS 311 Project 1)/Creator (LaTeX with hyperref package)/Author (D. Kevin McGrath)/Keywords
(cs311 ``operating systems'' files filesystem I/O) /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -481 a
SDict begin H.S end
 -158 -481 a -158 -481 a
SDict begin H.R end
 -158 -481 a -158
-481 a
SDict begin [/View [/XYZ H.V]/Dest (page.0) cvn /DEST pdfmark end
 -158 -481 a Black 0 TeXcolorgray Black 0 TeXcolorgray
-150 -150 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -150 -150 a -150 -150 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -150 -150 a -150
-150 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -150 -150 a -150 -150 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -150 -150 a -150 -150
a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Kernel Assignment)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (section.2) cvn/Title (Concurrency Assignment)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (section.3) cvn/Title (Version Control Log)
/OUT pdfmark end
 -150
-150 a -150 -150 a
SDict begin [/Count -0/Dest (section.4) cvn/Title (Work Log) /OUT pdfmark
end
 -150 -150 a -150 -150 a
SDict begin [/PageMode /UseNone/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -150 -150
a -150 -150 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin H.S end
 -150 -150 a -150
-150 a
SDict begin 12 H.A end
 -150 -150 a -150 -150 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -150 -150 a -150 -150
a
SDict begin [ {Catalog} <</PageLabels<</Nums[0<</P(0)>>1<</S/D>>]>>>>
/PUT pdfmark end
 -150 -150 a 709 -50 a Fl(Group)29 b(11-05:)g(Daniel)g(Schroeder)f
(and)g(Brian)h(Ozaro)m(wicz)1149 327 y(C)6 b(S)34 b(4)6
b(4)g(4)35 b(O)6 b Fk(P)g(E)g(R)g(A)l(T)g(I)g(N)g(G)32
b Fl(S)6 b Fk(Y)g(S)g(T)g(E)g(M)g(S)32 b Fl(I)6 b(I)1622
468 y(S)g Fk(P)g(R)g(I)g(N)g(G)33 b Fl(2)6 b(0)g(1)g(7)704
904 y Fj(Assignment)62 b(I:)g(Getting)h(Acquainted)1811
1445 y Fi(Abstract)p 0 TeXcolorgray 0 TeXcolorgray 141
1569 a Fh(This)26 b(document)i(is)e(a)h(summary)h(of)f(Assignment)g(1)g
(for)g(CS)e(444)j(Operating)f(Systems)g(II)f(at)h(Ore)o(gon)g(State)f
(Uni)n(v)o(ersity)h(Spring)g(2017.)16 1652 y(This)k(document)h
(includes)g(a)f(log)g(of)h(commands)g(used)g(to)f(complete)h(the)f(k)o
(ernel)h(assignment,)f(a)g(description)h(of)f(all)g(\003ags)g(in)g(the)
g(qemu)16 1735 y(command,)36 b(a)f(description)h(of)e(the)h(concurrenc)
o(y)i(assignment)f(solution)f(from)g(Group)h(11-05,)g(and)f(the)g
(responses)h(to)f(the)g(concurrenc)o(y)16 1818 y(assignment)27
b(follo)n(w)g(up)g(questions.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 1 2
TeXDict begin 1 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -481 a
SDict begin H.S end
 -158 -481 a -158 -481 a
SDict begin H.R end
 -158 -481 a -158
-481 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -158 -481 a 0 TeXcolorgray 0 TeXcolorgray 4021
-373 a Fg(1)p 0 TeXcolorgray -150 -150 a
SDict begin H.S end
 -150 -150 a
-150 -150 a
SDict begin 12 H.A end
 -150 -150 a -150 -150 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -150 -150 a 1503
-50 a Fe(I)t(.)45 b(K)t Ff(E)t(R)t(N)t(E)t(L)24 b Fe(A)t
Ff(S)t(S)t(I)t(G)t(N)t(M)t(E)t(N)t(T)-150 175 y Fd(Log)31
b(of)f(Commands)-150 209 y
SDict begin H.S end
 -150 209 a -150 209 a
SDict begin 12 H.A end
 -150
209 a -150 209 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -150 209 a 0 TeXcolorgray -94 291 a
Fe(1\))p 0 TeXcolorgray 40 w Fc(cd)49 b(/scratch/spring2017)-150
306 y
SDict begin H.S end
 -150 306 a -150 306 a
SDict begin 12 H.A end
 -150 306 a -150 306 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -150
306 a 0 TeXcolorgray -94 391 a Fe(2\))p 0 TeXcolorgray
40 w Fc(mkdir)g(11-05)-150 406 y
SDict begin H.S end
 -150 406 a -150 406
a
SDict begin 12 H.A end
 -150 406 a -150 406 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -150 406 a 0 TeXcolorgray -94
491 a Fe(3\))p 0 TeXcolorgray 40 w Fc(cd)g(11-05)-150
506 y
SDict begin H.S end
 -150 506 a -150 506 a
SDict begin 12 H.A end
 -150 506 a -150 506 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -150
506 a 0 TeXcolorgray -94 590 a Fe(4\))p 0 TeXcolorgray
40 w Fc(git)g(clone)g(git://git.yoctoproject.org/linux-yoc)o(to-3.1)o
(4)-150 605 y
SDict begin H.S end
 -150 605 a -150 605 a
SDict begin 12 H.A end
 -150 605 a -150 605
a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -150 605 a 0 TeXcolorgray -94 690 a Fe(5\))p 0 TeXcolorgray
40 w Fc(git)g(checkout)g(-b)g(v3.14.26)-150 705 y
SDict begin H.S end
 -150
705 a -150 705 a
SDict begin 12 H.A end
 -150 705 a -150 705 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -150 705 a 0 TeXcolorgray
-94 789 a Fe(6\))p 0 TeXcolorgray 40 w Fc(source)g
(/scratch/opt/environment-setup-i58)o(6-pok)o(y-linu)o(x.csh)-150
804 y
SDict begin H.S end
 -150 804 a -150 804 a
SDict begin 12 H.A end
 -150 804 a -150 804 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -150
804 a 0 TeXcolorgray -94 889 a Fe(7\))p 0 TeXcolorgray
40 w Fc(cd)g(linux-yocto-3.14)-150 904 y
SDict begin H.S end
 -150 904 a -150
904 a
SDict begin 12 H.A end
 -150 904 a -150 904 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -150 904 a 0 TeXcolorgray
-94 989 a Fe(8\))p 0 TeXcolorgray 40 w Fc(cp)g
(/scratch/spring2017/files/config-3.14.)o(26-yo)o(cto-qe)o(mu)44
b(.config)-150 1004 y
SDict begin H.S end
 -150 1004 a -150 1004 a
SDict begin 12 H.A end
 -150 1004
a -150 1004 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -150 1004 a 0 TeXcolorgray -94 1088 a Fe(9\))p
0 TeXcolorgray 40 w Fc(make)49 b(menuconfig)-150 1103
y
SDict begin H.S end
 -150 1103 a -150 1103 a
SDict begin 12 H.A end
 -150 1103 a -150 1103 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -150
1103 a 0 TeXcolorgray -136 1188 a Fe(10\))p 0 TeXcolorgray
40 w Fc(/)-150 1203 y
SDict begin H.S end
 -150 1203 a -150 1203 a
SDict begin 12 H.A end
 -150 1203
a -150 1203 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -150 1203 a 0 TeXcolorgray -136 1288 a
Fe(11\))p 0 TeXcolorgray 40 w Fc(LOCALVERSION)-150 1303
y
SDict begin H.S end
 -150 1303 a -150 1303 a
SDict begin 12 H.A end
 -150 1303 a -150 1303 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -150
1303 a 0 TeXcolorgray -136 1387 a Fe(12\))p 0 TeXcolorgray
40 w Fc(1)-150 1402 y
SDict begin H.S end
 -150 1402 a -150 1402 a
SDict begin 12 H.A end
 -150 1402
a -150 1402 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -150 1402 a 0 TeXcolorgray -136 1487 a
Fe(13\))p 0 TeXcolorgray 40 w Fc(-11-05-hw1)-150 1502
y
SDict begin H.S end
 -150 1502 a -150 1502 a
SDict begin 12 H.A end
 -150 1502 a -150 1502 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 -150
1502 a 0 TeXcolorgray -136 1586 a Fe(14\))p 0 TeXcolorgray
40 w Fc(make)g(-j4)g(all)-150 1601 y
SDict begin H.S end
 -150 1601 a -150
1601 a
SDict begin 12 H.A end
 -150 1601 a -150 1601 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -150 1601 a 0 TeXcolorgray
-136 1686 a Fe(15\))p 0 TeXcolorgray 40 w Fc(cd)g(..)-150
1701 y
SDict begin H.S end
 -150 1701 a -150 1701 a
SDict begin 12 H.A end
 -150 1701 a -150 1701
a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 -150 1701 a 0 TeXcolorgray -136 1786 a Fe(16\))p 0
TeXcolorgray 40 w Fc(cp)g(/scratch/spring2017/files/bzImage-qemu)o
(x86.b)o(in)44 b(.)-150 1801 y
SDict begin H.S end
 -150 1801 a -150 1801
a
SDict begin 12 H.A end
 -150 1801 a -150 1801 a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 -150 1801 a 0 TeXcolorgray
-136 1885 a Fe(17\))p 0 TeXcolorgray 40 w Fc(cp)49 b
(/scratch/spring2017/files/core-image-l)o(sb-sd)o(k-qemu)o(x86.e)o(xt3)
44 b(.)-150 1900 y
SDict begin H.S end
 -150 1900 a -150 1900 a
SDict begin 12 H.A end
 -150 1900
a -150 1900 a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 -150 1900 a 0 TeXcolorgray -136 1985 a
Fe(18\))p 0 TeXcolorgray 40 w Fc(qemu-system-i386)j(-gdb)i(tcp::6605)f
(-S)i(-nographic)d(-kernel)i(bzImage-qemux86.bin)d(-drive)16
2085 y(file=core-image-lsb-sdk-qemux86.ext3)o(,if=v)o(irtio)d
(-enable-kvm)48 b(-net)h(none)g(-usb)g(-localtime)16
2184 y(--no-reboot)f(--append)g("root=/dev/vda)f(rw)j(console=ttyS0)d
(debug")-150 2197 y
SDict begin H.S end
 -150 2197 a -150 2197 a
SDict begin 12 H.A end
 -150 2197
a -150 2197 a
SDict begin [/View [/XYZ H.V]/Dest (Item.19) cvn /DEST pdfmark end
 -150 2197 a 0 TeXcolorgray -136 2284 a
Fe(19\))p 0 TeXcolorgray 40 w Fc(gdb)-150 2299 y
SDict begin H.S end
 -150
2299 a -150 2299 a
SDict begin 12 H.A end
 -150 2299 a -150 2299 a
SDict begin [/View [/XYZ H.V]/Dest (Item.20) cvn /DEST pdfmark end
 -150 2299
a 0 TeXcolorgray -136 2383 a Fe(20\))p 0 TeXcolorgray
40 w Fc(target)i(remote)f(:6605)-150 2398 y
SDict begin H.S end
 -150 2398
a -150 2398 a
SDict begin 12 H.A end
 -150 2398 a -150 2398 a
SDict begin [/View [/XYZ H.V]/Dest (Item.21) cvn /DEST pdfmark end
 -150 2398 a 0 TeXcolorgray
-136 2483 a Fe(21\))p 0 TeXcolorgray 40 w Fc(continue)-150
2498 y
SDict begin H.S end
 -150 2498 a -150 2498 a
SDict begin 12 H.A end
 -150 2498 a -150 2498
a
SDict begin [/View [/XYZ H.V]/Dest (Item.22) cvn /DEST pdfmark end
 -150 2498 a 0 TeXcolorgray -136 2583 a Fe(22\))p 0
TeXcolorgray 40 w Fc(root)-150 2598 y
SDict begin H.S end
 -150 2598 a -150
2598 a
SDict begin 12 H.A end
 -150 2598 a -150 2598 a
SDict begin [/View [/XYZ H.V]/Dest (Item.23) cvn /DEST pdfmark end
 -150 2598 a 0 TeXcolorgray
-136 2682 a Fe(23\))p 0 TeXcolorgray 40 w Fc(uname)h(-a)-150
2697 y
SDict begin H.S end
 -150 2697 a -150 2697 a
SDict begin 12 H.A end
 -150 2697 a -150 2697
a
SDict begin [/View [/XYZ H.V]/Dest (Item.24) cvn /DEST pdfmark end
 -150 2697 a 0 TeXcolorgray -136 2782 a Fe(24\))p 0
TeXcolorgray 40 w Fc(reboot)-150 2797 y
SDict begin H.S end
 -150 2797 a -150
2797 a
SDict begin 12 H.A end
 -150 2797 a -150 2797 a
SDict begin [/View [/XYZ H.V]/Dest (Item.25) cvn /DEST pdfmark end
 -150 2797 a 0 TeXcolorgray
-136 2882 a Fe(25\))p 0 TeXcolorgray 40 w Fc(qemu-system-i386)e(-gdb)i
(tcp::6605)f(-S)i(-nographic)d(-kernel)i
(linux-yocto-3.14/arch/x86/boot/)16 2981 y(bzImage)g(-drive)f
(file=core-image-lsb-sdk-qemux86.ext3,)o(if=vi)o(rtio)43
b(-enable-kvm)48 b(-net)h(none)16 3081 y(-usb)g(-localtime)f
(--no-reboot)g(--append)g("root=/dev/vda)f(rw)j(console=ttyS0)d(debug")
-150 3094 y
SDict begin H.S end
 -150 3094 a -150 3094 a
SDict begin 12 H.A end
 -150 3094 a -150
3094 a
SDict begin [/View [/XYZ H.V]/Dest (Item.26) cvn /DEST pdfmark end
 -150 3094 a 0 TeXcolorgray -136 3180 a Fe(26\))p
0 TeXcolorgray 40 w Fc(gdb)-150 3195 y
SDict begin H.S end
 -150 3195 a -150
3195 a
SDict begin 12 H.A end
 -150 3195 a -150 3195 a
SDict begin [/View [/XYZ H.V]/Dest (Item.27) cvn /DEST pdfmark end
 -150 3195 a 0 TeXcolorgray
-136 3280 a Fe(27\))p 0 TeXcolorgray 40 w Fc(target)i(remote)f(:6605)
-150 3295 y
SDict begin H.S end
 -150 3295 a -150 3295 a
SDict begin 12 H.A end
 -150 3295 a -150
3295 a
SDict begin [/View [/XYZ H.V]/Dest (Item.28) cvn /DEST pdfmark end
 -150 3295 a 0 TeXcolorgray -136 3380 a Fe(28\))p
0 TeXcolorgray 40 w Fc(continue)-150 3395 y
SDict begin H.S end
 -150 3395
a -150 3395 a
SDict begin 12 H.A end
 -150 3395 a -150 3395 a
SDict begin [/View [/XYZ H.V]/Dest (Item.29) cvn /DEST pdfmark end
 -150 3395 a 0 TeXcolorgray
-136 3479 a Fe(29\))p 0 TeXcolorgray 40 w Fc(root)-150
3494 y
SDict begin H.S end
 -150 3494 a -150 3494 a
SDict begin 12 H.A end
 -150 3494 a -150 3494
a
SDict begin [/View [/XYZ H.V]/Dest (Item.30) cvn /DEST pdfmark end
 -150 3494 a 0 TeXcolorgray -136 3579 a Fe(30\))p 0
TeXcolorgray 40 w Fc(uname)h(-a)-150 3594 y
SDict begin H.S end
 -150 3594
a -150 3594 a
SDict begin 12 H.A end
 -150 3594 a -150 3594 a
SDict begin [/View [/XYZ H.V]/Dest (Item.31) cvn /DEST pdfmark end
 -150 3594 a 0 TeXcolorgray
-136 3679 a Fe(31\))p 0 TeXcolorgray 40 w Fc(reboot)-150
3894 y Fd(QEMU)31 b(Flags)p 0 TeXcolorgray -59 4011 a
Fb(\017)p 0 TeXcolorgray 41 w Fc(-gdb)49 b(tcp::11-05)27
b Fe(W)-7 b(aits)30 b(for)e(gdb)g(connection)e(on)i(the)h(speci\002ed)f
(port)p 0 TeXcolorgray -59 4110 a Fb(\017)p 0 TeXcolorgray
41 w Fc(-S)h Fe(Does)f(not)h(start)g(the)f(CPU)i(at)f(startup)p
0 TeXcolorgray -59 4210 a Fb(\017)p 0 TeXcolorgray 41
w Fc(-nographic)e Fe(Disables)i(all)g(graphical)e(output)h(so)g(that)h
(the)f(QEMU)h(runs)f(as)h(a)g(simple)g(command)d(line)j(application)p
0 TeXcolorgray -59 4310 a Fb(\017)p 0 TeXcolorgray 41
w Fc(-kernel)49 b(bzImage-qemux86.bin)25 b Fe(Speci\002es)k(the)f(k)o
(ernel)g(image)g(to)h(use)p 0 TeXcolorgray -59 4409 a
Fb(\017)p 0 TeXcolorgray 41 w Fc(-drive)49 b
(file=core-image-lsb-sdk-qemux86.ex)o(t3,if)o(=virti)o(o)26
b Fe(De\002nes)32 b(a)f(ne)n(w)g(dri)n(v)o(e)g(using)g(the)g
(speci\002ed)16 4509 y(disk)d(image)g(\()p Fc(file)p
Fe(\))g(that)h(is)g(connected)e(via)h(virtio)g(interf)o(ace)p
0 TeXcolorgray -59 4608 a Fb(\017)p 0 TeXcolorgray 41
w Fc(-enable-kvm)33 b Fe(Enables)h(KVM)h(\(K)n(ernel)f(V)-5
b(irtual)34 b(Machine\))f(full)i(virtualization)e(support.)g(This)h
(option)g(is)h(only)f(a)n(v)n(ailable)g(if)16 4708 y(KVM)29
b(support)e(is)i(enabled)f(when)f(compiling.)p 0 TeXcolorgray
-59 4808 a Fb(\017)p 0 TeXcolorgray 41 w Fc(-net)49 b(none)28
b Fe(Does)h(not)f(con\002gure)f(netw)o(ork)g(de)n(vices)p
0 TeXcolorgray -59 4907 a Fb(\017)p 0 TeXcolorgray 41
w Fc(-usb)h Fe(Enables)g(the)h(USB)g(dri)n(v)o(er)p 0
TeXcolorgray -59 5007 a Fb(\017)p 0 TeXcolorgray 41 w
Fc(-localtime)e Fe(Sets)j(the)e(real)h(time)f(clock)g(to)h(the)f
(system')-5 b(s)29 b(local)g(time)p 0 TeXcolorgray -59
5107 a Fb(\017)p 0 TeXcolorgray 41 w Fc(--no-reboot)e
Fe(Exits)i(instead)f(of)g(rebooting)p 0 TeXcolorgray
-59 5206 a Fb(\017)p 0 TeXcolorgray 41 w Fc(--append)48
b("root=/dev/vda)g(rw)h(console=ttyS0)e(debug")34 b Fe(Adds)f
(additional)g(options)g(to)h(the)g(k)o(ernel)f(command)16
5306 y(line)k(which)g(set)g(the)g(root)g(\002lesystem)g(as)h(the)f
(\002rst)h(detected)e(para)n(virtualized)f(disk)i(dri)n(v)o(er)e(\()p
Fc(/dev/vda)p Fe(\),)g(mounts)h(the)h(de)n(vice)16 5405
y(read-write)25 b(on)h(boot)f(\()p Fc(rw)p Fe(\),)h(and)g(sets)h(the)f
(output)f(console)h(to)g(be)h(the)f(virtual)f(console)h(de)n(vice)f(on)
h(the)h(\002rst)g(serial)f(port)g(with)g(k)o(ernel)16
5505 y(deb)n(ugging)g(enabled)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 2 3
TeXDict begin 2 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -481 a
SDict begin H.S end
 -158 -481 a -158 -481 a
SDict begin H.R end
 -158 -481 a -158
-481 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -158 -481 a 0 TeXcolorgray 0 TeXcolorgray 4021
-373 a Fg(2)p 0 TeXcolorgray -150 -150 a
SDict begin H.S end
 -150 -150 a
-150 -150 a
SDict begin 12 H.A end
 -150 -150 a -150 -150 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 -150 -150 a 1357
-50 a Fe(I)t(I)t(.)45 b(C)t Ff(O)t(N)t(C)t(U)t(R)t(R)t(E)t(N)t(C)t(Y)27
b Fe(A)t Ff(S)t(S)t(I)t(G)t(N)t(M)t(E)t(N)t(T)-150 175
y Fd(Write-up)-150 374 y Fe(Our)18 b(concurrenc)o(y)e(solution)i
(implemented)f(pthreads)g(and)i(multithreading)d(to)j(solv)o(e)f(a)h
(producer/consumer)c(style)k(problem.)e(The)h(problem:)-150
474 y(with)26 b(a)g(b)n(uf)n(fer)f(of)h(size)g(32,)g(ha)n(v)o(e)f
(producers)f(add)h(items)h(\(structs)g(with)g(int)h(v)n(alue)e(number)f
(and)h(int)i(v)n(alue)e(w)o(ait)h(time\))g(to)g(the)g(b)n(uf)n(fer)-5
b(.)25 b(The)-150 574 y(producers)h(must)i(w)o(ait)g(a)h(random)d
(number)g(of)i(seconds)f(\(time)h(to)g(produce\))d(and)j(also)g(w)o
(ait)g(if)h(the)e(b)n(uf)n(fer)g(is)i(full.)e(The)h(consumers)f(tak)o
(e)-150 673 y(the)32 b(items)h(from)f(the)g(b)n(uf)n(fer)m(,)f
(sleeping)g(for)h(the)g(time)h(gi)n(v)o(en)e(in)i(the)f(b)n(uf)n(fer)f
(item)i(struct')-5 b(s)33 b(w)o(ait)g(v)n(alue,)e(and)h(blocking)e(if)j
(the)g(b)n(uf)n(fer)e(is)-150 773 y(empty)-5 b(.)27 b(T)-7
b(o)29 b(do)f(this)h(we)g(implemented)d(mute)o(x)o(es,)h(pthread)g
(conditions,)g(and)h(concurrent)e(programming.)-150 872
y(\(Brian)33 b(and)f(Daniel\))h(Created)f(group)g(directory)f(at)j
(recitation)e(April)h(11th)f(at)h(11:00am)e(\(Brian\))i(Ran)g(script)g
(for)f(folder)g(permissions)-150 972 y(on)j(Friday)g(April)h(14th.)e
(Daniel)i(and)f(Brian)g(met)h(in)g(OSU)g(Library)e(at)i(1:50)f(pm)g(on)
g(Monday)f(April)i(17th.)e(W)-7 b(ork)o(ed)35 b(until)h(3:30pm,)-150
1072 y(\(Daniel\))h(Committed)g(the)h(concurrenc)o(y1.c)33
b(\002le)39 b(to)f(github)e(and)h(pushed)g(changes)g(on)g(Thursday)f
(April)i(20th.)e(\(Daniel)i(and)f(Brian\))-150 1171 y(T)m(ried)32
b(to)h(run)f(concurrenc)o(y1.c)d(on)j(os-class,)h(found)e(compile)h
(errors)g(and)g(rdrand)f(error)h(Thursday)-5 b(,)30 b(April)j(20th.)e
(\(Daniel)i(and)f(Brian\))-150 1271 y(Implemented)i(mt19937)h(function)
g(into)h(concurrenc)o(y1.c)c(so)37 b(that)g(random)e(numbers)g(could)h
(be)g(generated)f(on)i(os-class.)f(Pushed)g(to)-150 1371
y(github)m(.)27 b(Thursday)-5 b(,)27 b(April)i(20th.)g(\(Daniel)f(and)h
(Brian\))g(W)-7 b(ork)o(ed)29 b(on)g(LaT)-6 b(e)o(x)28
b(Mak)o(e\002le)h(and)g(formatting)e(for)i(Assignment1)f(repo)g
(\(Brian\))-150 1470 y(T)m(ransposed)e(google)h(doc)g(\002le)i(into)f
(LaT)-6 b(e)o(x)27 b(format)g(for)h(submission)f(Friday)-5
b(,)27 b(April)g(21st.)h(\(Brian\))f(Recon\002gured)f(Mak)o(e\002le)i
(to)h(compile)-150 1570 y(both)h(LaT)-6 b(e)o(x)31 b(submission)f
(\002le)i(and)f(concurrenc)o(y1.c)c(\002le)32 b(Friday)-5
b(,)30 b(April)h(21st.)g(\(Daniel\))g(Wrote)g(abstract)g(and)g
(answered)f(concurrenc)o(y)-150 1669 y(write-up)i(questions)g(for)g
(submission)g(Friday)-5 b(,)31 b(April)i(21st.)f(\(Brian\))g
(Reformatted)f(concurrenc)o(y1.c)e(according)i(to)h(k)o(ernel)g
(submission)-150 1769 y(format)f(guide)g(Friday)-5 b(,)31
b(April)h(21st.)g(\(Brian\))g(Pro)o(vided)e(class)j(\002le)g(for)e(T)-6
b(e)o(x)32 b(styling)g(Friday)-5 b(,)31 b(April)h(21st.)g(\(Daniel)g
(and)f(Brian\))h(Pushed)-150 1869 y(\002nal)d(changes)e(to)i(github)e
(for)h(submission)g(Friday)-5 b(,)27 b(April)h(21st.)-150
2068 y(Our)g(producers,)f(once)h(the)h(thread)e(is)j(created,)e(get)h
(a)g(random)e(number)g(using)h(either)g(rdrand)f(from)h(x86)g(assembly)
g(instructions)g(or)h(the)-150 2168 y(implemented)g(mt19937)h(function)
f(and)i(sleep)g(for)g(that)h(amount)e(of)h(time)g(\(the)g(time)h(it)g
(tak)o(es)f(to)h(produce\).)d(When)i(done)f(sleeping)h(the)-150
2267 y(thread)24 b(will)h(lock)g(the)g(mute)o(x)e(which)i(gi)n(v)o(es)f
(it)i(e)o(xclusi)n(v)o(e)d(access)i(to)g(the)g(b)n(uf)n(fer)-5
b(.)24 b(It)h(then)f(enters)h(a)g(loop)f(to)h(see)h(if)f(there)f(are)h
(an)o(y)f(a)n(v)n(ailable)-150 2367 y(inde)o(x)o(es)h(in)i(the)g(b)n
(uf)n(fer)-5 b(.)26 b(If)g(the)h(b)n(uf)n(fer)e(is)j(full)e(the)h
(producer)e(thread)g(w)o(aits)j(for)e(a)h(consumer)e(to)i(thro)n(w)f
(the)h(pthread)e(condition)g(for)h(\224full\224)-150
2466 y(meaning)i(a)i(consumer)e(has)i(opened)e(up)h(a)h(space)f(on)h
(the)f(b)n(uf)n(fer)-5 b(.)29 b(Once)g(it)h(is)h(able)e(to)h(add)f(its)
h(item)g(to)g(the)f(b)n(uf)n(fer)g(it)h(thro)n(ws)f(a)h(pthread)-150
2566 y(condition)22 b(\224empty\224)g(to)i(signal)g(that)g(the)f(b)n
(uf)n(fer)g(is)h(no)g(longer)e(empty)-5 b(,)22 b(prints)i(out)f(the)h
(number)m(,)d(w)o(aits)k(the)f(time)f(for)h(the)f(item)h(it)h(is)f
(adding,)-150 2666 y(unlocks)j(the)i(mute)o(x,)e(and)h(e)o(xits.)-150
2865 y(Similarly)-5 b(,)24 b(our)g(consumer)f(threads)h(lock)g(the)h
(mute)o(x)f(and)g(enter)g(a)h(loop)f(checking)f(for)i(an)f(item)h(in)g
(the)g(b)n(uf)n(fer)e(to)i(consume.)f(If)g(the)h(b)n(uf)n(fer)-150
2965 y(is)32 b(empty)f(it)h(will)g(w)o(ait)g(for)e(a)i(producer)d
(thread)h(to)i(thro)n(w)e(a)i(pthread)e(condition)f(that)j(the)f(b)n
(uf)n(fer)f(is)i(no)f(longer)f(empty)-5 b(.)30 b(Once)h(there)g(is)-150
3064 y(an)c(a)n(v)n(ailable)g(item)g(in)g(the)g(b)n(uf)n(fer)f(the)h
(consumer)f(stores)h(its)h(number)d(and)i(w)o(ait)h(time)f(in)g(local)g
(v)n(ariables)g(and)f(sets)i(both)f(struct)g(\002elds)g(to)-150
3164 y(-1)i(\(implying)f(it)i(is)g(no)n(w)f(an)g(empty)g(space\))g(and)
f(unlocks)h(the)g(mute)o(x.)f(The)h(consumer)f(then)h(w)o(aits)h(the)f
(gi)n(v)o(en)f(amount)g(of)i(time,)f(prints)-150 3263
y(a)g(message)f(that)h(it)g(has)g(consumed)d(the)j(speci\002ed)f
(number)m(,)e(then)i(e)o(xits.)-150 3463 y(Our)33 b(main)g(function)f
(mallocs)i(enough)d(size)j(for)f(the)h(b)n(uf)n(fer)e(and)h(thread)g
(arrays,)g(checks)g(to)g(see)i(if)e(rdrand)f(is)j(a)n(v)n(ailable)e(to)
h(use,)f(and)-150 3562 y(initializes)f(the)f(mute)o(x)f(and)h(pthread)e
(conditions.)h(It)h(then)g(uses)h(for)e(loops)h(to)g(create)g(and)g
(pthread)p 2908 3573 42 5 v 39 w(join)g(all)h(the)f(threads)g(and)f(w)o
(ait)i(for)-150 3662 y(them)25 b(to)h(e)o(xit.)g(The)f(pthread)g
(condition)f(v)n(ariables)h(allo)n(w)g(the)h(threads)f(to)h
(synchronize)e(by)h(locking)g(and)g(unlocking)e(the)j(mute)o(x)f(until)
h(the)-150 3762 y(speci\002ed)i(condition)f(is)i(satis\002ed.)-150
3961 y(The)36 b(program)f(accepts)h(a)h(command)e(line)h(parameter)f
(as)i(the)g(number)e(of)h(threads)g(to)h(produce.)d(If)i(the)h(program)
d(is)k(e)o(x)o(ecuted)c(with)-150 4060 y Fc(./concurrency1)47
b(100)28 b Fe(it)g(will)h(create)e(100)g(producer)f(and)h(100)g
(consumer)f(threads.)h(On)h(our)f(o)n(wn)g(local)h(machines)e(this)j
(program)-150 4160 y(w)o(orks)f(for)g(N)h Fa(>)p Fe(1000)e(threads,)h
(b)n(ut)g(on)g(os-class)h(it)h(se)o(gf)o(aults)e(after)g(about)g(240)g
(threads,)f(which)h(we)h(assume)g(to)f(be)h(due)f(to)h(limitations)-150
4260 y(on)f(serv)o(er)g(permissions)f(to)i(mediate)f(the)h(amount)e(of)
h(threads)g(a)h(single)f(user)g(can)h(produce.)-150 4559
y Fd(What)h(do)h(y)n(ou)g(think)g(the)g(main)g(point)f(of)h(this)g
(assignment)g(is?)-150 4708 y Fe(This)26 b(assignment)f(w)o(as)i
(designed)e(to)h(introduce)e(basic)i(concurrenc)o(y)c(programming)h
(and)i(get)h(us)g(f)o(amiliar)g(with)g(pthreads,)f(mute)o(x)o(es,)f
(and)-150 4808 y(the)32 b(basics)g(of)f(concurrent)e(implementation.)g
(W)-7 b(e)33 b(were)f(also)g(introduced)d(to)j(inline)f(assembly)g
(which)g(we)i(will)f(use)g(in)g(our)e(programs)-150 4907
y(throughout)25 b(the)k(course.)-150 5156 y Fd(Ho)o(w)h(did)i(y)n(ou)e
(personally)g(appr)o(oach)g(the)g(pr)o(oblem?)-150 5306
y Fe(W)-7 b(e)31 b(went)e(about)g(the)h(producer/consumer)25
b(problem)j(in)i(a)g(f)o(airly)f(straightforw)o(ard)e(manner)m(,)h
(implementing)f(a)j(function)e(to)i(produce)e(an)-150
5405 y(object)35 b(and)h(a)g(function)e(to)i(consume)f(an)h(object.)f
(Each)g(function)g(w)o(as)h(used)g(as)h(the)f(start)g(routine)f(for)g
(the)h(respecti)n(v)o(e)f(pthread)f(and)-150 5505 y(communicated)e(via)
i(pthread)f(conditions)f(and)i(mute)o(x)o(es)f(for)h(access)g(o)o(v)o
(er)f(the)h(global)g(b)n(uf)n(fer)f(and)g(synchronization.)e(W)-7
b(e)35 b(used)f(basic)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 3 4
TeXDict begin 3 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -481 a
SDict begin H.S end
 -158 -481 a -158 -481 a
SDict begin H.R end
 -158 -481 a -158
-481 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -158 -481 a 0 TeXcolorgray 0 TeXcolorgray 4021
-373 a Fg(3)p 0 TeXcolorgray -150 -50 a Fe(modular)30
b(arithmetic)h(to)h(get)g(a)h(random)d(number)g(\(within)h(a)i
(speci\002ed)e(range\),)f(from)h(rdrand)f(or)i(the)g(mt19937)e
(algorithm,)g(which)h(we)-150 49 y(used)d(as)h(the)g(w)o(ait-time)f
(struct)h(\002eld)g(for)e(consumer)g(w)o(ait-time)i(and)f(producer)e
(sleep)i(time.)-150 199 y(W)-7 b(e)29 b(also)f(used)f(tw)o(o)h(pthread)
e(arrays)h(to)g(k)o(eep)g(track)h(of)f(all)h(the)g(producer)d(threads)i
(and)g(consumer)e(threads.)i(The)g(\002rst)i(for)e(loop)f(in)i(main)
-150 298 y(created)34 b(N)h(number)e(of)i(threads)f(and)g(added)g(them)
g(to)h(the)g(pthread)e(arrays)h(upon)g(creation.)f(The)i(second)f(for)g
(loop)g(in)h(main)f(iterates)-150 398 y(through)26 b(each)i(array)g
(and)g(calls)h(pthread)p 1099 409 42 5 v 40 w(join)f(to)h(w)o(ait)g
(for)f(thread)f(termination.)-150 547 y(The)d(b)n(uf)n(fer)e(item)i
(struct)g(has)g(tw)o(o)g(int)g(\002elds,)g(one)g(for)f(the)h(number)e
(to)i(consume)e(and)h(one)h(for)f(the)h(w)o(ait-time)g(the)f(consumer)g
(thread)g(must)-150 647 y(w)o(ait)33 b(in)f(order)f(to)h(consume)f(the)
h(speci\002ed)g(number)-5 b(.)31 b(W)-7 b(e)33 b(initialized)f(the)g
(the)g(b)n(uf)n(fer)f(to)i(empty)e(structs)h(with)h(number)d(and)i(w)o
(ait-time)-150 747 y(v)n(alues)c(of)g(-1)h(and)e(the)i(consumer)e(sets)
i(the)g(item)g(struct)f(back)g(to)h(this)g(def)o(ault)e(format)h(once)g
(it)h(is)g(consumed.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 4 5
TeXDict begin 4 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -481 a
SDict begin H.S end
 -158 -481 a -158 -481 a
SDict begin H.R end
 -158 -481 a -158
-481 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -158 -481 a 0 TeXcolorgray 0 TeXcolorgray 4021
-373 a Fg(4)p 0 TeXcolorgray -150 -50 a Fd(Ho)o(w)30
b(did)i(y)n(ou)e(ensur)o(e)h(y)n(our)f(solution)h(was)g(corr)o(ect?)
-150 99 y Fe(W)-7 b(e)30 b(used)e(a)h(series)h(of)e(printf)5
b(')-5 b(s)28 b(to)h(deb)n(ug.)e(W)-7 b(e)30 b(printed)d(out)i(the)f(v)
n(alues)h(produced)d(as)j(well)g(as)h(the)f(number)e(of)h(threads)g
(being)g(run.)f(W)-7 b(e)-150 199 y(could)25 b(follo)n(w)h(along)f
(with)h(the)g(program)e(logic)i(through)e(these)i(print)g(statements)g
(w)o(atching)f(ho)n(w)h(long)f(threads)h(w)o(ould)f(sleep)h(for)m(,)f
(when)-150 298 y(production)h(and)j(consumption)d(w)o(as)k(performed,)c
(and)i(when)g(pthread)g(conditions)f(were)i(thro)n(wn)f(and)g(recei)n
(v)o(ed.)f(W)-7 b(e)30 b(also)f(used)g(a)g(print)-150
398 y(b)n(uf)n(fer)g(function)g(which)h(w)o(ould)g(run)g(a)h(for)f
(loop)f(and)h(print)g(out)h(the)f(v)n(alues)g(of)h(each)f(item)h(in)f
(the)h(b)n(uf)n(fer)-5 b(.)29 b(W)-7 b(e)32 b(used)e(this)h(to)g(see)g
(when)-150 498 y(items)26 b(were)f(added)f(and)h(remo)o(v)o(ed)e(from)h
(the)i(b)n(uf)n(fer)m(,)d(and)i(when)g(the)g(b)n(uf)n(fer)f(w)o(as)i
(empty)f(or)g(full.)g(This)g(helped)f(\002x)i(a)g(b)n(ug)f(we)g(had)g
(where)-150 597 y(the)k(b)n(uf)n(fer)e(w)o(as)i(not)f(originally)f
(emptying)g(properly)-5 b(.)-150 846 y Fd(What)30 b(did)i(y)n(ou)e
(lear)o(n?)-150 996 y Fe(W)-7 b(e)34 b(had)e(ne)n(v)o(er)f(used)i
(pthread)e(condition)g(v)n(ariables)h(before)f(to)i(communicate)e
(between)g(threads)h(and)h(synchronized.)c(This)k(w)o(as)h(v)o(ery)-150
1095 y(helpful)25 b(in)h(our)f(solution)g(to)i(share)e(the)h(mute)o(x)f
(during)g(b)n(uf)n(fer)f(full)i(and)g(b)n(uf)n(fer)e(empty)h
(conditions.)g(W)-7 b(e)27 b(also)f(learned)f(ho)n(w)g(to)i(use)f
(inline)-150 1195 y(assembly)i(to)h(generate)e(random)g(numbers)g
(which)h(w)o(as)h(a)g(ne)n(w)f(concept)f(for)h(us)h(in)g(C)g
(programming.)-150 1425 y
SDict begin H.S end
 -150 1425 a -150 1425 a
SDict begin 12 H.A end
 -150
1425 a -150 1425 a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 -150 1425 a 1431 1506 a Fe(I)t(I)t(I)t(.)45
b(V)t Ff(E)t(R)t(S)t(I)t(O)t(N)25 b Fe(C)t Ff(O)t(N)t(T)t(R)q(O)t(L)h
Fe(L)t Ff(O)t(G)-17 1703 y Fd(Detail)177 b(A)l(uthor)432
b(Description)p -67 1736 4771 4 v 0 TeXcolorgray -17
1807 a
SDict begin H.S end
 -17 1807 a 0 TeXcolorgray -1 x Fe(6fc0cad)p 0
TeXcolorgray 246 1749 a
SDict begin H.R end
 246 1749 a 246 1806 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/6fc0cad45a2a515f54c120fa6d411cbb62a0eed5)>>/Subtype
/Link H.B /ANN pdfmark end
 246 1806
a 0 TeXcolorgray 127 w Fe(DSchroederOSU)122 b(Initial)28
b(commit)p -67 1839 4771 4 v 0 TeXcolorgray -17 1910
a
SDict begin H.S end
 -17 1910 a 0 TeXcolorgray -1 x Fe(237aed0)p 0 TeXcolorgray
264 1852 a
SDict begin H.R end
 264 1852 a 264 1909 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/237aed09afe1e61e9421f419164f4d41387adddd)>>/Subtype
/Link H.B /ANN pdfmark end
 264 1909 a 0 TeXcolorgray
109 w Fe(DSchroederOSU)122 b(Added)27 b(assignment)h(1)g(folder)g(and)f
(starter)i(\002le)p -67 1942 4771 4 v 0 TeXcolorgray
-17 2013 a
SDict begin H.S end
 -17 2013 a 0 TeXcolorgray -1 x Fe(2c475d7)p
0 TeXcolorgray 269 1955 a
SDict begin H.R end
 269 1955 a 269 2012 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/2c475d7e15d1a54406c275a2a27c5df472c46ded)>>/Subtype
/Link H.B /ANN pdfmark end
 269 2012
a 0 TeXcolorgray 104 w Fe(DSchroederOSU)122 b(added)27
b(concurrenc)o(y)e(1)k(\002le)p -67 2045 4771 4 v 0 TeXcolorgray
-17 2116 a
SDict begin H.S end
 -17 2116 a 0 TeXcolorgray -1 x Fe(4126204)p
0 TeXcolorgray 273 2058 a
SDict begin H.R end
 273 2058 a 273 2115 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/4126204c49cd2e10090eb4d6bd3183bc23c94648)>>/Subtype
/Link H.B /ANN pdfmark end
 273 2115
a 0 TeXcolorgray 100 w Fe(DSchroederOSU)122 b(w)o(orking)27
b(on)h(concurrenc)o(y1.c.)c(made)k(a)g(sk)o(eleton)g(of)h(the)f
(project)p -67 2148 4771 4 v 0 TeXcolorgray -17 2219
a
SDict begin H.S end
 -17 2219 a 0 TeXcolorgray -1 x Fe(d862ede)p 0 TeXcolorgray
264 2161 a
SDict begin H.R end
 264 2161 a 264 2218 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/d862edec54dd0eb51bdde6e26337315a2675d434)>>/Subtype
/Link H.B /ANN pdfmark end
 264 2218 a 0 TeXcolorgray
109 w Fe(DSchroederOSU)122 b(progress,)27 b(got)h(rdrand)f(to)h(w)o
(ork)p -67 2251 4771 4 v 0 TeXcolorgray -17 2322 a
SDict begin H.S end
 -17
2322 a 0 TeXcolorgray -1 x Fe(a134ada)p 0 TeXcolorgray
259 2264 a
SDict begin H.R end
 259 2264 a 259 2321 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/a134adaeeff0b0ebc7bc662d809edc973ab6f841)>>/Subtype
/Link H.B /ANN pdfmark end
 259 2321 a 0 TeXcolorgray
114 w Fe(DSchroederOSU)122 b(\002nished)28 b(concurrenc)o(y)d(logic)j
(with)g(tw)o(o)h(threads)p -67 2354 4771 4 v 0 TeXcolorgray
-17 2425 a
SDict begin H.S end
 -17 2425 a 0 TeXcolorgray -2 x Fe(7096e2f)p
0 TeXcolorgray 255 2367 a
SDict begin H.R end
 255 2367 a 255 2423 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/7096e2f214d8f164dcf02c58d8924f903281e867)>>/Subtype
/Link H.B /ANN pdfmark end
 255 2423
a 0 TeXcolorgray 118 w Fe(DSchroederOSU)122 b(DONE)28
b(I)h(THINK)p -67 2457 4771 4 v 0 TeXcolorgray -17 2528
a
SDict begin H.S end
 -17 2528 a 0 TeXcolorgray -2 x Fe(29c5440)p 0 TeXcolorgray
269 2470 a
SDict begin H.R end
 269 2470 a 269 2526 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/29c5440b4d14c3656d11c907e8794f6f08d98897)>>/Subtype
/Link H.B /ANN pdfmark end
 269 2526 a 0 TeXcolorgray
104 w Fe(DSchroederOSU)122 b(This)28 b(w)o(orks)g(for)g(n)h(threads,)e
(there)h(w)o(as)i(a)f(b)n(ug)f(last)h(time)g(that)f(w)o(ould)g(not)g
(clear)h(the)f(b)n(uf)n(fer)f(space)i(once)e(consumed)p
-67 2560 4771 4 v 0 TeXcolorgray -17 2630 a
SDict begin H.S end
 -17 2630
a 0 TeXcolorgray -1 x Fe(c6ed2db)p 0 TeXcolorgray 264
2573 a
SDict begin H.R end
 264 2573 a 264 2629 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/c6ed2db4aab53f542abd8a00c05c9cf7953d9712)>>/Subtype
/Link H.B /ANN pdfmark end
 264 2629 a 0 TeXcolorgray
109 w Fe(ozaro)n(wib)378 b(recitation)27 b(program)p
-67 2663 4771 4 v 0 TeXcolorgray -17 2733 a
SDict begin H.S end
 -17 2733
a 0 TeXcolorgray -1 x Fe(ce1d4cd)p 0 TeXcolorgray 259
2676 a
SDict begin H.R end
 259 2676 a 259 2732 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/ce1d4cd2a712b1dfed27d304539fd552d15c4c6c)>>/Subtype
/Link H.B /ANN pdfmark end
 259 2732 a 0 TeXcolorgray
114 w Fe(DSchroederOSU)122 b(added)27 b(second)h(random)e(generator)p
-67 2766 4771 4 v 0 TeXcolorgray -17 2836 a
SDict begin H.S end
 -17 2836
a 0 TeXcolorgray -1 x Fe(870a6cf)p 0 TeXcolorgray 250
2779 a
SDict begin H.R end
 250 2779 a 250 2835 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/870a6cf75e9cf205425b40b0fd90a21bece56299)>>/Subtype
/Link H.B /ANN pdfmark end
 250 2835 a 0 TeXcolorgray
123 w Fe(DSchroederOSU)122 b(Mer)o(ge)27 b(branch)g('master')h(of)g
(https://github)m(.com/DSchroederOSU/CS44)o(4-)o(Grou)o(p)p
3647 2846 42 5 v 35 w(11)p 3766 2846 V 41 w(05)p -67
2868 4771 4 v 0 TeXcolorgray -17 2939 a
SDict begin H.S end
 -17 2939 a 0
TeXcolorgray -1 x Fe(17f)o(a4d7)p 0 TeXcolorgray 254
2882 a
SDict begin H.R end
 254 2882 a 254 2938 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/17fa4d7daa607f5a8466d4c854083fe763728c40)>>/Subtype
/Link H.B /ANN pdfmark end
 254 2938 a 0 TeXcolorgray
119 w Fe(Daniel)g(Schroeder)98 b(w)o(orks)28 b(on)g(os-class)p
-67 2971 4771 4 v 0 TeXcolorgray -17 3042 a
SDict begin H.S end
 -17 3042
a 0 TeXcolorgray -1 x Fe(8efe181)p 0 TeXcolorgray 250
2985 a
SDict begin H.R end
 250 2985 a 250 3041 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/8efe18126d63f4c3156da70cb6e8d6f3bb95dcf6)>>/Subtype
/Link H.B /ANN pdfmark end
 250 3041 a 0 TeXcolorgray
123 w Fe(Daniel)g(Schroeder)98 b(test)p -67 3074 4771
4 v 0 TeXcolorgray -17 3145 a
SDict begin H.S end
 -17 3145 a 0 TeXcolorgray
-1 x Fe(f860768)p 0 TeXcolorgray 260 3087 a
SDict begin H.R end
 260 3087
a 260 3144 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/f86076889a02b98fd55cc73c537e49ce93315ea4)>>/Subtype
/Link H.B /ANN pdfmark end
 260 3144 a 0 TeXcolorgray 113 w Fe(DSchroederOSU)122
b(\002x)o(ed)27 b(ar)o(gc)p -67 3177 4771 4 v 0 TeXcolorgray
-17 3248 a
SDict begin H.S end
 -17 3248 a 0 TeXcolorgray -1 x Fe(63f1ea3)p
0 TeXcolorgray 250 3190 a
SDict begin H.R end
 250 3190 a 250 3247 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/63f1ea3079fb2044a5fd16f4f60ed0afcecbca13)>>/Subtype
/Link H.B /ANN pdfmark end
 250 3247
a 0 TeXcolorgray 123 w Fe(Daniel)h(Schroeder)98 b(te)o(x)28
b(progress)p -67 3280 4771 4 v 0 TeXcolorgray -17 3352
a
SDict begin H.S end
 -17 3352 a 0 TeXcolorgray -2 x Fe(e3916b0)p 0 TeXcolorgray
269 3293 a
SDict begin H.R end
 269 3293 a 269 3350 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/e3916b0f556dc4093d8689662850a7ac1a0a3e71)>>/Subtype
/Link H.B /ANN pdfmark end
 269 3350 a 0 TeXcolorgray
104 w Fe(Daniel)g(Schroeder)98 b(idk)p -67 3383 4771
4 v 0 TeXcolorgray -17 3454 a
SDict begin H.S end
 -17 3454 a 0 TeXcolorgray
-1 x Fe(bafbb73)p 0 TeXcolorgray 255 3396 a
SDict begin H.R end
 255 3396
a 255 3453 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/bafbb7390e8525a17d2ad32ccd003c800ed0b4f0)>>/Subtype
/Link H.B /ANN pdfmark end
 255 3453 a 0 TeXcolorgray 118 w Fe(Daniel)28
b(Schroeder)98 b(ahaha)p -67 3486 4771 4 v 0 TeXcolorgray
-17 3557 a
SDict begin H.S end
 -17 3557 a 0 TeXcolorgray -1 x Fe(d8ae437)p
0 TeXcolorgray 264 3499 a
SDict begin H.R end
 264 3499 a 264 3556 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/d8ae437d3f4dffe4287eab3471225d489f16af0a)>>/Subtype
/Link H.B /ANN pdfmark end
 264 3556
a 0 TeXcolorgray 109 w Fe(ozaro)n(wib)378 b(conformed)25
b(to)k(class)g(style)g(guide)p -67 3589 4771 4 v 0 TeXcolorgray
-17 3660 a
SDict begin H.S end
 -17 3660 a 0 TeXcolorgray -1 x Fe(c7bf34a)p
0 TeXcolorgray 250 3602 a
SDict begin H.R end
 250 3602 a 250 3659 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/DSchroederOSU/CS444-Group_11_05/commit/c7bf34a5a0bdc36bfc9815bdf012847cb9b6b3da)>>/Subtype
/Link H.B /ANN pdfmark end
 250 3659
a 0 TeXcolorgray 123 w Fe(ozaro)n(wib)378 b(IEEEtran)27
b(w)o(orking,)f(updated)h(Mak)o(e\002le)p -67 3692 4771
4 v -150 3804 a
SDict begin H.S end
 -150 3804 a -150 3804 a
SDict begin 12 H.A end
 -150 3804 a -150
3804 a
SDict begin [/View [/XYZ H.V]/Dest (section.4) cvn /DEST pdfmark end
 -150 3804 a 1669 3859 a Fe(I)t(V)-7 b(.)46 b(W)s
Ff(O)t(R)t(K)26 b Fe(L)t Ff(O)t(G)-150 3985 y Fe(\(Brian)33
b(and)f(Daniel\))h(Created)f(group)g(directory)f(at)j(recitation)e
(April)h(11th)f(at)h(11:00am)e(\(Brian\))i(Ran)g(script)g(for)f(folder)
g(permissions)-150 4085 y(on)j(Friday)g(April)h(14th.)e(Daniel)i(and)f
(Brian)g(met)h(in)g(OSU)g(Library)e(at)i(1:50)f(pm)g(on)g(Monday)f
(April)i(17th.)e(W)-7 b(ork)o(ed)35 b(until)h(3:30pm.)-150
4184 y(\(Daniel\))h(Committed)g(the)h(concurrenc)o(y1.c)33
b(\002le)39 b(to)f(github)e(and)h(pushed)g(changes)g(on)g(Thursday)f
(April)i(20th.)e(\(Daniel)i(and)f(Brian\))-150 4284 y(T)m(ried)32
b(to)h(run)f(concurrenc)o(y1.c)d(on)j(os-class,)h(found)e(compile)h
(errors)g(and)g(rdrand)f(error)h(Thursday)-5 b(,)30 b(April)j(20th.)e
(\(Daniel)i(and)f(Brian\))-150 4384 y(Implemented)i(mt19937)h(function)
g(into)h(concurrenc)o(y1.c)c(so)37 b(that)g(random)e(numbers)g(could)h
(be)g(generated)f(on)i(os-class.)f(Pushed)g(to)-150 4483
y(github)m(.)27 b(Thursday)-5 b(,)27 b(April)i(20th.)g(\(Daniel)f(and)h
(Brian\))g(W)-7 b(ork)o(ed)29 b(on)g(LaT)-6 b(e)o(x)28
b(Mak)o(e\002le)h(and)g(formatting)e(for)i(Assignment1)f(repo)g
(\(Brian\))-150 4583 y(T)m(ransposed)e(google)h(doc)g(\002le)i(into)f
(LaT)-6 b(e)o(x)27 b(format)g(for)h(submission)f(Friday)-5
b(,)27 b(April)g(21st.)h(\(Brian\))f(Recon\002gured)f(Mak)o(e\002le)i
(to)h(compile)-150 4682 y(both)h(LaT)-6 b(e)o(x)31 b(submission)f
(\002le)i(and)f(concurrenc)o(y1.c)c(\002le)32 b(Friday)-5
b(,)30 b(April)h(21st.)g(\(Daniel\))g(Wrote)g(abstract)g(and)g
(answered)f(concurrenc)o(y)-150 4782 y(write-up)i(questions)g(for)g
(submission)g(Friday)-5 b(,)31 b(April)i(21st.)f(\(Brian\))g
(Reformatted)f(concurrenc)o(y1.c)e(according)i(to)h(k)o(ernel)g
(submission)-150 4882 y(format)f(guide)g(Friday)-5 b(,)31
b(April)h(21st.)g(\(Brian\))g(Pro)o(vided)e(class)j(\002le)g(for)e(T)-6
b(e)o(x)32 b(styling)g(Friday)-5 b(,)31 b(April)h(21st.)g(\(Daniel)g
(and)f(Brian\))h(Pushed)-150 4981 y(\002nal)d(changes)e(to)i(github)e
(for)h(submission)g(Friday)-5 b(,)27 b(April)h(21st.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
